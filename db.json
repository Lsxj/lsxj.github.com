{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/fexo/source/css/personal-style.css","path":"css/personal-style.css","modified":0,"renderable":1},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":0,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/mywebcode.png","path":"images/mywebcode.png","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/mylogo.jpg","path":"images/mylogo.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/qr-alipay.jpg","path":"images/qr-alipay.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/qr-wechat.jpg","path":"images/qr-wechat.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"9d540dd40a8f17673c72ac30719cbba002c428c4","modified":1511188021000},{"_id":"source/CNAME","hash":"66e1591802b47d328716bb8050dcd8398b4bcbc9","modified":1511188021000},{"_id":"source/.DS_Store","hash":"ebb9eee00e19d409f65ef8259f35d4f13d60536d","modified":1512916108000},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1511188021000},{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1511188021000},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1511188021000},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1511188021000},{"_id":"themes/fexo/_config.yml","hash":"94c436fe99129a76cb46963d386731ce103647d7","modified":1511188021000},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1511188021000},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1511188021000},{"_id":"source/_posts/RegExp-notes.md","hash":"e12adf0fb84c1f0056c4b5b3b05d6315ab212e09","modified":1511188021000},{"_id":"source/_posts/STOMP-over-WebSocket.md","hash":"02d7a3eeee8faf9e182185a0d132d7c107f59011","modified":1511188021000},{"_id":"source/_posts/cross-domain.md","hash":"352a1b25c6023265a721d34056a3de02129f3265","modified":1511188021000},{"_id":"source/_posts/effective-java-ch2-object.md","hash":"a8c59eb733b67be89802e9f484efdc725bb92d37","modified":1511188021000},{"_id":"source/_posts/effective-java-ch3-function.md","hash":"256a1d650afffd9735551590b5021d48e1aa5189","modified":1511188021000},{"_id":"source/_posts/effective-java-ch4-Classes-Interfaces.md","hash":"7888dbe26d156140e9ab9a7a4750c38b407939a2","modified":1511188021000},{"_id":"source/_posts/effective-java-ch5-generics.md","hash":"1bfb5e99993dd483c548054588776f57bcb75d69","modified":1511188021000},{"_id":"source/_posts/effective-java-ch6-Enums-and-Annotations.md","hash":"c9577edb29f4565c5be1f4a29f02bdcbf48cd087","modified":1511188021000},{"_id":"source/_posts/linux-commands.md","hash":"10f343f826f30465baee2f79ca87e09f924a5a8d","modified":1511188021000},{"_id":"source/_posts/mobile-touch-switch.md","hash":"b60132ca2c86abd8c20334d2d25cad2ee4df5e0b","modified":1511188021000},{"_id":"source/_posts/promise-notes.md","hash":"26a0b00b5305bfd0012f307e6d719b6badc3f1cc","modified":1511188021000},{"_id":"source/_posts/work-dairy.md","hash":"c61d1d420cb42eeab3e35648fb8c72358c3ff2b7","modified":1512916189000},{"_id":"source/_posts/summernote-notes.md","hash":"09b03aaea9948e0002928febd9419375a1d3acda","modified":1511188021000},{"_id":"source/about/index.md","hash":"bc1e33abe97db8273e6b12f35bb578534dde20a2","modified":1511188021000},{"_id":"source/_posts/websocket-notes.md","hash":"55975157bfabbd01b6fefa547794b4dd19a60662","modified":1511188021000},{"_id":"source/category/index.md","hash":"7f7244fded59157de316a6b1ba4dbb6fc08a2a5c","modified":1511188021000},{"_id":"source/search/index.md","hash":"50c12c2a6300c2d6355834fda046593a02bd9be0","modified":1511188021000},{"_id":"source/tag/index.md","hash":"34c7b76f347ad9f82a1b085bc6691d24c8fb126b","modified":1511188021000},{"_id":"source/link/index.md","hash":"357e194d549590b0ff8dcf404137578b10530196","modified":1511188021000},{"_id":"themes/fexo/layout/archive.ejs","hash":"f70a311fedda4468135aa5914954e9ecd0280a1d","modified":1511188021000},{"_id":"themes/fexo/layout/category.ejs","hash":"b8c2c9baf4e21e4472b25a717ba61a5457ccddff","modified":1511188021000},{"_id":"themes/fexo/layout/about.ejs","hash":"e8815233896c044cee92bfc16d20c4b9f5a00922","modified":1511188021000},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1511188021000},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1511188021000},{"_id":"themes/fexo/layout/link.ejs","hash":"64377bd27e2b61869b7d28c6dc74f3b801aedffa","modified":1511188021000},{"_id":"themes/fexo/layout/post.ejs","hash":"075586a9805c24683a154a19e8df9a7e9eab7bcd","modified":1511188021000},{"_id":"themes/fexo/layout/project.ejs","hash":"ce72621428276d54c15de0a4057144fc164ae5c1","modified":1511188021000},{"_id":"themes/fexo/layout/search.ejs","hash":"1b1f99b55721d9178d712d4d3c4928322ba3c649","modified":1511188021000},{"_id":"themes/fexo/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1511188021000},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1511188021000},{"_id":"themes/fexo/layout/tag.ejs","hash":"03aaee19788f09dbb153b108a54aa4899aacd133","modified":1511188021000},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1511188021000},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"751c74830d5609969f1fd6e7fa933ecd5756117a","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"c56f02b3344586f984e742732323b809a941282a","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/duoshuo.ejs","hash":"728522a31887d5cc896104cc1b4c48b9d2659350","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"aaee7fc7a120e9a45e91e95595dde85d770baf84","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"988b6b024125852eceac94df278cdeaa662c9d3d","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"99c20c0ae1a6876899614b029ce39864bf86f877","modified":1511188021000},{"_id":"themes/fexo/source/css/personal-style.css","hash":"83aff487a75abccc78113eb96a4402d014f7ac48","modified":1511188021000},{"_id":"themes/fexo/source/css/styles.css","hash":"975f1b389868464f9a99b7fa34827b42e20355e2","modified":1511188021000},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1511188021000},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1511188021000},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1511188021000},{"_id":"themes/fexo/source/sass/_base.scss","hash":"915bc919ae434a61b58511720300eca8646b6705","modified":1511188021000},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1511188021000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1511188021000},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1511188021000},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1511188021000},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1511188021000},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"e403294d093f6b5294938619786a22fde3e7f848","modified":1511188021000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1511188021000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1511188021000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1511188021000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1511188021000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1511188021000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1511188021000},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1511188021000},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1511188021000},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1511188021000},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1511188021000},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1511188021000},{"_id":"themes/fexo/source/images/mywebcode.png","hash":"9d52bfb9cb1978cdaf942bf15d6f74d3cc94000e","modified":1511188021000},{"_id":"themes/fexo/source/images/mylogo.jpg","hash":"ba19e46a5990d59af6508f68ccbc4ea92a6eaec3","modified":1511188021000},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1511188021000},{"_id":"themes/fexo/source/images/qr-alipay.jpg","hash":"483ef481fa2c870c9ff9f2ea447e58ea54b99c36","modified":1511188021000},{"_id":"themes/fexo/source/images/qr-wechat.jpg","hash":"037fbfac4e8a50ab7f013b3f17a6abeb2ee13b34","modified":1511188021000},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1511188021000},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1511188021000},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1511188021000},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1511188021000},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1511188021000},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1511188021000},{"_id":"themes/fexo/source/css/styles.css.map","hash":"61bc0709283224840518b3f864b8552ebf245b9f","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511188021000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"497bb978e6bc81a79cd2dc80fa355d57335f0b81","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"49d044fc7bff2c6a249842b36c3739f01333109e","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"a876cf39335d5ad935f01c31e87828b5115d0064","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"022291a0a5c872260b67b01a4aaa5de94978298c","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"33467eb5c760502eb75dcad63a4527a1f68deb95","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"6ab4c0769db4507d7fe1ffee1e69f988309309ff","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"0efd5e3294bb883ff96270e69b05e289e4f17efe","modified":1511188021000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"5a3a06aec68cc44df2e62bd66475dbf860792c30","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"dd8fb354d6196bf751978ae2215b8f0757c10ed5","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"dc7d816cc77cb46580828e9ded2cfa45ba454226","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1511188021000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1511188021000},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1511188021000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1511188021000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1511188021000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1511188021000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1511188021000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1511188021000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1511188021000}],"Category":[{"name":"前端开发","_id":"cjb0w5kj30005y3qwvt1zf0wz"},{"name":"后台开发","_id":"cjb0w5kjo000oy3qwedesb8q5"},{"name":"JAVA开发","parent":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kka001fy3qwdn9ydy93"},{"name":"随笔","_id":"cjb0w5kkc001iy3qwkej9mj1f"},{"name":"Linux","parent":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkl0025y3qwww6i102r"}],"Data":[],"Page":[{"title":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---\n","date":"2017-11-20T14:27:01.000Z","updated":"2017-11-20T14:27:01.000Z","path":"about/index.html","_id":"cjb0w5kiw0001y3qwhjewbvuw","content":"","excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n","date":"2017-11-20T14:27:01.000Z","updated":"2017-11-20T14:27:01.000Z","path":"category/index.html","_id":"cjb0w5kiz0003y3qwfii4mrum","content":"","excerpt":"","more":""},{"title":"search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---\n","date":"2017-11-20T14:27:01.000Z","updated":"2017-11-20T14:27:01.000Z","path":"search/index.html","_id":"cjb0w5kj40007y3qwd93qm0ir","content":"","excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n","date":"2017-11-20T14:27:01.000Z","updated":"2017-11-20T14:27:01.000Z","path":"tag/index.html","_id":"cjb0w5kj80009y3qwq7l32ib2","content":"","excerpt":"","more":""},{"title":"link","layout":"link","comments":0,"_content":"","source":"link/index.md","raw":"---\ntitle: link\nlayout: link\ncomments: false\n---\n","date":"2017-11-20T14:27:01.000Z","updated":"2017-11-20T14:27:01.000Z","path":"link/index.html","_id":"cjb0w5kjb000dy3qwha57wc1n","content":"","excerpt":"","more":""}],"Post":[{"title":"js谜之正则表达式","date":"2016-08-15T14:57:58.000Z","_content":"\n## 前言\n好久之前就说要写一篇正则表达式的文章，正则表达式总是记了又忘，忘了再记，记了再忘，卒。\n言归正传，今天终于要研究一下这个谜一样的正则表达式了。其实正则表达式并不难（真的吗？orz）\n\n## 为什么要用正则表达式\n在学习之前，我们需要弄明白，到底什么时候需要用到正则表达式，正则表达式的用途究竟是什么？\n比如说，你正在搜索一个文件，这个文件里面包含单词car(不区分大小写)，但是呢你又不想把包含字符串car的其他单词（例如carry）也一起找出来，那么这个时候你就可以使用正则表达式来帮你解决问题。当然，这只是众多场景中的一种。正则表达式功能强大，可以帮你解决各种匹配文本问题。又或者表单验证的方式，也可以使用正则表达式来解决。\n\n## 正则表达式是什么\n简单来说，正则表达式就是字符串，是用来匹配和处理文本的字符串。用正则表达式语言创建的。\n\n## 正则表达式的语法\n### 匹配字符\n* `.`（英文句号）：匹配任何一个单个字符\n* `[]`：匹配集合内多个字符中的某个字符\ne.g. `[ns]a` --> 匹配 na 或sa\n* `[-]`：匹配该区间内的字符\ne.g. [a-z] , [0-9]\n* `^` 取非匹配：除了该字符集内的字符，都可以匹配。只有当`^`出现在`[`和`]`之间，且紧跟在`[`后面，才能发挥取非的作用。\ne.g. `[^0-9]` 匹配非数字的字符\n\n### 使用元字符\n元字符：在正则表达式中有特殊含义的字符。若需要表示该字符本身，需使用`\\`转义。\n* `\\d` 任何一个数字字符，相当于[0-9]\n* `\\D` 任何一个非数字字符，相当于[^0-9]\n* `\\w` 任何一个字母数字字符或下划线字符，相当于[a-zA-Z0-9_]\n* `\\W` 任何一个非字母数字字符或非下划线字符，相当于[^a-zA-Z0-9_]\n* `\\s` 任何一个空白字符，等价于[\\f\\n\\r\\t\\v]\n* `\\S` 任何一个非空白字符，等价于[^\\f\\n\\r\\t\\v]\n\n总而言之，小写字母与大写字母都是相反的，所以记住小写字母的含义，大写字母则是对应的取非含义。\n\n### 重复匹配\n* `?` 0个或1个字符\ne.g. [0-9]? 出现0次或一次，且最多只能出现1次数字。\n* `+` 一个或多个字符\ne.g. [0-9]+ 表示一个或多个连续的数字\n* `*` 0个或多个字符\ne.g. [0-9]* 连续出现0次货多次的数字\n* `{n}` 设置一个精确的重复的值\ne.g. [0-9]{3} 三个数字\n* `{min,max}` 设置重复次数的最小值和最大值\ne.g. [0-9]{2,4} 最少2个数字，最多4个数字\n* `{min, }` 设置重复次数的最小值\ne.g. [0-9]{2,} 最少2个数字\n\n### 懒惰型匹配\n\n为了防止出现重复匹配造成的过度匹配，因为`*`和`+`都是“贪婪型”元字符，它们在进行匹配时会尽可能从一段文本的开头一直匹配到这段文本的末尾，而不是碰到第一个匹配就结束。\n\n那么这个时候就需要使用\"懒惰型\"。仅需在贪婪型元字符后加上`?`即可。如：`*?`,`+?`,`{n,}?` \n\n\n### 位置匹配\n* `\\b` 单词边界\n* `\\B` 非单词边界。查找前后都有多余空格的连字符。\n* `^` 字符串开头。出现在字符集合的外面且位于一个模式的开头，`^`匹配字符串的开头\n* `$` 字符串结尾\n\n\n---\n\n\n## Javascript中的正则表达式\nECMAScript通过`RegExp`类型来支持正则表达式。\n\n    var expression = / pattern / flags；\n    \n其中`pattern`可以是任何简单或复杂的正则表达式。\n`flags`用来标明正则表达式的行为。如下所示：\n* `g` : 全局模式。模式应用于所有的字符串，不是在发现第一个匹配项后就立即停止的。\n* `i` : 不区分大小写。正则表达式默认是区别大小写的。`i`则是忽略大小写\n* `m` : 表示多行模式，也就是说到达一行文本末尾的时候还会继续查找下一行中是否存在与模式匹配的项。\n\n### 创建正则表达式的方式\n* 以**字面量形式**来定义  \n`var pattern = /sxj/i;`\n\n* 使用`RegExp`构造函数    \n`var pattern = new RegExp(\"sxj\", \"i\"); `\n\n那么这两种方式的区别除了形式不一样，还有一个差别在于：\nECMAScript 3中，正则表达式字面量始终会**共享**同一个`RegExp`实例；而使用构造函数创建的每一个实例都是一个**新**实例。\n\n不过！【敲黑板！】ECMAScript 5明确规定了，使用正则表达式字面量必须想直接调用`RegExp`构造函数一样，每次都创建新的RegExp实例。而各大浏览器也对此进行了修改。\n\n### `RegExp`实例\n#### 实例属性\n* `global`: 布尔值，表示是否设置了`g`标志\n* `ignoreCase`: 布尔值，表示是否设置了`i`标志\n* `multiline`: 布尔值，表示是否设置了`m`标志\n* `lastIndex`：整数，表示开始搜索下一个匹配项的字符位置，从0开始。\n* `source`： 正则表达式的字符串表示。按照**字面量形式**返回。\n\n#### 实例方法\n##### `exec()`\n\n    pattern.exec(text);\n\n查找text中的匹配项。\n\n    //例子\n    var pattern = /sxj/i;\n    var text = \"sxj is a good student sxj haha\";\n    console.log(pattern.exec(text));\n    //[\"sxj\", index: 0, input: \"sxj is a good student sxj haha\"]\n    var pattern2 = /shi/i;\n    console.log(pattern2,exec(text));//null\n    \n从上述例子可以发现，若找到，则返回一个数组，该数组包含第一个匹配项，除此之外，还有两个属性：`index`（匹配项在字符串中的位置）,`input`（应用正则表达式的字符串）。若没有匹配项返回`null`。\n\n对于`exec`而言，无论是否设置`g`全局标志，每次也只会返回一个匹配项。但是如果在同一个字符串上多次调用，设置了`g`标志则会继续查找新的匹配项，而没有设置的话只会返回第一个匹配项信息。除此之外，pattern的`lastIndex`属性在全局模式会增加，非全局模式始终不变。\n\n##### `test()`\n    pattern.test(text);\n\n查看目标字符串与该模式是否匹配。匹配返回true，否则返回false。\n\n### String中的正则表达式\n##### `match()`\n\n    text.match(pattern);\n    \n`match`匹配一个字符串和一个正则表达式。若没有`g`标识，则结果与`pattern.exec(text)`相同。若有`g`标志，则返回一个包含所有匹配的数组。\n\n##### `search()`\n\n    text.search(pattern);\n    \n若找到匹配，返回第一个匹配的首字符位置。若没有找到返回-1。  \n此方法会忽略`g`标识，且没有position参数。\n\n##### `replace()`\n\n    string.replace(searchValue, replaceValue);\n    \n`searchValue`可以是一个字符串或一个正则表达式对象。若是一个字符串，只会在第一次出现的地方被替换。若是一个正则表达式，若有`g`标志则替换所有匹配之处，若没有则只替换第一个匹配之处。\n\n\n## 总结\n正则表达式是个非常好用的工具，若掌握了可达到事半功倍的效果。好好学哟~","source":"_posts/RegExp-notes.md","raw":"---\ntitle: js谜之正则表达式\ndate: 2016-08-15 22:57:58\ncategories: 前端开发\ntags: [javascript, 正则表达式]\n---\n\n## 前言\n好久之前就说要写一篇正则表达式的文章，正则表达式总是记了又忘，忘了再记，记了再忘，卒。\n言归正传，今天终于要研究一下这个谜一样的正则表达式了。其实正则表达式并不难（真的吗？orz）\n\n## 为什么要用正则表达式\n在学习之前，我们需要弄明白，到底什么时候需要用到正则表达式，正则表达式的用途究竟是什么？\n比如说，你正在搜索一个文件，这个文件里面包含单词car(不区分大小写)，但是呢你又不想把包含字符串car的其他单词（例如carry）也一起找出来，那么这个时候你就可以使用正则表达式来帮你解决问题。当然，这只是众多场景中的一种。正则表达式功能强大，可以帮你解决各种匹配文本问题。又或者表单验证的方式，也可以使用正则表达式来解决。\n\n## 正则表达式是什么\n简单来说，正则表达式就是字符串，是用来匹配和处理文本的字符串。用正则表达式语言创建的。\n\n## 正则表达式的语法\n### 匹配字符\n* `.`（英文句号）：匹配任何一个单个字符\n* `[]`：匹配集合内多个字符中的某个字符\ne.g. `[ns]a` --> 匹配 na 或sa\n* `[-]`：匹配该区间内的字符\ne.g. [a-z] , [0-9]\n* `^` 取非匹配：除了该字符集内的字符，都可以匹配。只有当`^`出现在`[`和`]`之间，且紧跟在`[`后面，才能发挥取非的作用。\ne.g. `[^0-9]` 匹配非数字的字符\n\n### 使用元字符\n元字符：在正则表达式中有特殊含义的字符。若需要表示该字符本身，需使用`\\`转义。\n* `\\d` 任何一个数字字符，相当于[0-9]\n* `\\D` 任何一个非数字字符，相当于[^0-9]\n* `\\w` 任何一个字母数字字符或下划线字符，相当于[a-zA-Z0-9_]\n* `\\W` 任何一个非字母数字字符或非下划线字符，相当于[^a-zA-Z0-9_]\n* `\\s` 任何一个空白字符，等价于[\\f\\n\\r\\t\\v]\n* `\\S` 任何一个非空白字符，等价于[^\\f\\n\\r\\t\\v]\n\n总而言之，小写字母与大写字母都是相反的，所以记住小写字母的含义，大写字母则是对应的取非含义。\n\n### 重复匹配\n* `?` 0个或1个字符\ne.g. [0-9]? 出现0次或一次，且最多只能出现1次数字。\n* `+` 一个或多个字符\ne.g. [0-9]+ 表示一个或多个连续的数字\n* `*` 0个或多个字符\ne.g. [0-9]* 连续出现0次货多次的数字\n* `{n}` 设置一个精确的重复的值\ne.g. [0-9]{3} 三个数字\n* `{min,max}` 设置重复次数的最小值和最大值\ne.g. [0-9]{2,4} 最少2个数字，最多4个数字\n* `{min, }` 设置重复次数的最小值\ne.g. [0-9]{2,} 最少2个数字\n\n### 懒惰型匹配\n\n为了防止出现重复匹配造成的过度匹配，因为`*`和`+`都是“贪婪型”元字符，它们在进行匹配时会尽可能从一段文本的开头一直匹配到这段文本的末尾，而不是碰到第一个匹配就结束。\n\n那么这个时候就需要使用\"懒惰型\"。仅需在贪婪型元字符后加上`?`即可。如：`*?`,`+?`,`{n,}?` \n\n\n### 位置匹配\n* `\\b` 单词边界\n* `\\B` 非单词边界。查找前后都有多余空格的连字符。\n* `^` 字符串开头。出现在字符集合的外面且位于一个模式的开头，`^`匹配字符串的开头\n* `$` 字符串结尾\n\n\n---\n\n\n## Javascript中的正则表达式\nECMAScript通过`RegExp`类型来支持正则表达式。\n\n    var expression = / pattern / flags；\n    \n其中`pattern`可以是任何简单或复杂的正则表达式。\n`flags`用来标明正则表达式的行为。如下所示：\n* `g` : 全局模式。模式应用于所有的字符串，不是在发现第一个匹配项后就立即停止的。\n* `i` : 不区分大小写。正则表达式默认是区别大小写的。`i`则是忽略大小写\n* `m` : 表示多行模式，也就是说到达一行文本末尾的时候还会继续查找下一行中是否存在与模式匹配的项。\n\n### 创建正则表达式的方式\n* 以**字面量形式**来定义  \n`var pattern = /sxj/i;`\n\n* 使用`RegExp`构造函数    \n`var pattern = new RegExp(\"sxj\", \"i\"); `\n\n那么这两种方式的区别除了形式不一样，还有一个差别在于：\nECMAScript 3中，正则表达式字面量始终会**共享**同一个`RegExp`实例；而使用构造函数创建的每一个实例都是一个**新**实例。\n\n不过！【敲黑板！】ECMAScript 5明确规定了，使用正则表达式字面量必须想直接调用`RegExp`构造函数一样，每次都创建新的RegExp实例。而各大浏览器也对此进行了修改。\n\n### `RegExp`实例\n#### 实例属性\n* `global`: 布尔值，表示是否设置了`g`标志\n* `ignoreCase`: 布尔值，表示是否设置了`i`标志\n* `multiline`: 布尔值，表示是否设置了`m`标志\n* `lastIndex`：整数，表示开始搜索下一个匹配项的字符位置，从0开始。\n* `source`： 正则表达式的字符串表示。按照**字面量形式**返回。\n\n#### 实例方法\n##### `exec()`\n\n    pattern.exec(text);\n\n查找text中的匹配项。\n\n    //例子\n    var pattern = /sxj/i;\n    var text = \"sxj is a good student sxj haha\";\n    console.log(pattern.exec(text));\n    //[\"sxj\", index: 0, input: \"sxj is a good student sxj haha\"]\n    var pattern2 = /shi/i;\n    console.log(pattern2,exec(text));//null\n    \n从上述例子可以发现，若找到，则返回一个数组，该数组包含第一个匹配项，除此之外，还有两个属性：`index`（匹配项在字符串中的位置）,`input`（应用正则表达式的字符串）。若没有匹配项返回`null`。\n\n对于`exec`而言，无论是否设置`g`全局标志，每次也只会返回一个匹配项。但是如果在同一个字符串上多次调用，设置了`g`标志则会继续查找新的匹配项，而没有设置的话只会返回第一个匹配项信息。除此之外，pattern的`lastIndex`属性在全局模式会增加，非全局模式始终不变。\n\n##### `test()`\n    pattern.test(text);\n\n查看目标字符串与该模式是否匹配。匹配返回true，否则返回false。\n\n### String中的正则表达式\n##### `match()`\n\n    text.match(pattern);\n    \n`match`匹配一个字符串和一个正则表达式。若没有`g`标识，则结果与`pattern.exec(text)`相同。若有`g`标志，则返回一个包含所有匹配的数组。\n\n##### `search()`\n\n    text.search(pattern);\n    \n若找到匹配，返回第一个匹配的首字符位置。若没有找到返回-1。  \n此方法会忽略`g`标识，且没有position参数。\n\n##### `replace()`\n\n    string.replace(searchValue, replaceValue);\n    \n`searchValue`可以是一个字符串或一个正则表达式对象。若是一个字符串，只会在第一次出现的地方被替换。若是一个正则表达式，若有`g`标志则替换所有匹配之处，若没有则只替换第一个匹配之处。\n\n\n## 总结\n正则表达式是个非常好用的工具，若掌握了可达到事半功倍的效果。好好学哟~","slug":"RegExp-notes","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kir0000y3qwn8oipobh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久之前就说要写一篇正则表达式的文章，正则表达式总是记了又忘，忘了再记，记了再忘，卒。<br>言归正传，今天终于要研究一下这个谜一样的正则表达式了。其实正则表达式并不难（真的吗？orz）</p>\n<h2 id=\"为什么要用正则表达式\"><a href=\"#为什么要用正则表达式\" class=\"headerlink\" title=\"为什么要用正则表达式\"></a>为什么要用正则表达式</h2><p>在学习之前，我们需要弄明白，到底什么时候需要用到正则表达式，正则表达式的用途究竟是什么？<br>比如说，你正在搜索一个文件，这个文件里面包含单词car(不区分大小写)，但是呢你又不想把包含字符串car的其他单词（例如carry）也一起找出来，那么这个时候你就可以使用正则表达式来帮你解决问题。当然，这只是众多场景中的一种。正则表达式功能强大，可以帮你解决各种匹配文本问题。又或者表单验证的方式，也可以使用正则表达式来解决。</p>\n<h2 id=\"正则表达式是什么\"><a href=\"#正则表达式是什么\" class=\"headerlink\" title=\"正则表达式是什么\"></a>正则表达式是什么</h2><p>简单来说，正则表达式就是字符串，是用来匹配和处理文本的字符串。用正则表达式语言创建的。</p>\n<h2 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h2><h3 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h3><ul>\n<li><code>.</code>（英文句号）：匹配任何一个单个字符</li>\n<li><code>[]</code>：匹配集合内多个字符中的某个字符<br>e.g. <code>[ns]a</code> –&gt; 匹配 na 或sa</li>\n<li><code>[-]</code>：匹配该区间内的字符<br>e.g. [a-z] , [0-9]</li>\n<li><code>^</code> 取非匹配：除了该字符集内的字符，都可以匹配。只有当<code>^</code>出现在<code>[</code>和<code>]</code>之间，且紧跟在<code>[</code>后面，才能发挥取非的作用。<br>e.g. <code>[^0-9]</code> 匹配非数字的字符</li>\n</ul>\n<h3 id=\"使用元字符\"><a href=\"#使用元字符\" class=\"headerlink\" title=\"使用元字符\"></a>使用元字符</h3><p>元字符：在正则表达式中有特殊含义的字符。若需要表示该字符本身，需使用<code>\\</code>转义。</p>\n<ul>\n<li><code>\\d</code> 任何一个数字字符，相当于[0-9]</li>\n<li><code>\\D</code> 任何一个非数字字符，相当于[^0-9]</li>\n<li><code>\\w</code> 任何一个字母数字字符或下划线字符，相当于[a-zA-Z0-9_]</li>\n<li><code>\\W</code> 任何一个非字母数字字符或非下划线字符，相当于[^a-zA-Z0-9_]</li>\n<li><code>\\s</code> 任何一个空白字符，等价于[\\f\\n\\r\\t\\v]</li>\n<li><code>\\S</code> 任何一个非空白字符，等价于[^\\f\\n\\r\\t\\v]</li>\n</ul>\n<p>总而言之，小写字母与大写字母都是相反的，所以记住小写字母的含义，大写字母则是对应的取非含义。</p>\n<h3 id=\"重复匹配\"><a href=\"#重复匹配\" class=\"headerlink\" title=\"重复匹配\"></a>重复匹配</h3><ul>\n<li><code>?</code> 0个或1个字符<br>e.g. [0-9]? 出现0次或一次，且最多只能出现1次数字。</li>\n<li><code>+</code> 一个或多个字符<br>e.g. [0-9]+ 表示一个或多个连续的数字</li>\n<li><code>*</code> 0个或多个字符<br>e.g. [0-9]* 连续出现0次货多次的数字</li>\n<li><code>{n}</code> 设置一个精确的重复的值<br>e.g. [0-9]{3} 三个数字</li>\n<li><code>{min,max}</code> 设置重复次数的最小值和最大值<br>e.g. [0-9]{2,4} 最少2个数字，最多4个数字</li>\n<li><code>{min, }</code> 设置重复次数的最小值<br>e.g. [0-9]{2,} 最少2个数字</li>\n</ul>\n<h3 id=\"懒惰型匹配\"><a href=\"#懒惰型匹配\" class=\"headerlink\" title=\"懒惰型匹配\"></a>懒惰型匹配</h3><p>为了防止出现重复匹配造成的过度匹配，因为<code>*</code>和<code>+</code>都是“贪婪型”元字符，它们在进行匹配时会尽可能从一段文本的开头一直匹配到这段文本的末尾，而不是碰到第一个匹配就结束。</p>\n<p>那么这个时候就需要使用”懒惰型”。仅需在贪婪型元字符后加上<code>?</code>即可。如：<code>*?</code>,<code>+?</code>,<code>{n,}?</code> </p>\n<h3 id=\"位置匹配\"><a href=\"#位置匹配\" class=\"headerlink\" title=\"位置匹配\"></a>位置匹配</h3><ul>\n<li><code>\\b</code> 单词边界</li>\n<li><code>\\B</code> 非单词边界。查找前后都有多余空格的连字符。</li>\n<li><code>^</code> 字符串开头。出现在字符集合的外面且位于一个模式的开头，<code>^</code>匹配字符串的开头</li>\n<li><code>$</code> 字符串结尾</li>\n</ul>\n<hr>\n<h2 id=\"Javascript中的正则表达式\"><a href=\"#Javascript中的正则表达式\" class=\"headerlink\" title=\"Javascript中的正则表达式\"></a>Javascript中的正则表达式</h2><p>ECMAScript通过<code>RegExp</code>类型来支持正则表达式。</p>\n<pre><code>var expression = / pattern / flags；\n</code></pre><p>其中<code>pattern</code>可以是任何简单或复杂的正则表达式。<br><code>flags</code>用来标明正则表达式的行为。如下所示：</p>\n<ul>\n<li><code>g</code> : 全局模式。模式应用于所有的字符串，不是在发现第一个匹配项后就立即停止的。</li>\n<li><code>i</code> : 不区分大小写。正则表达式默认是区别大小写的。<code>i</code>则是忽略大小写</li>\n<li><code>m</code> : 表示多行模式，也就是说到达一行文本末尾的时候还会继续查找下一行中是否存在与模式匹配的项。</li>\n</ul>\n<h3 id=\"创建正则表达式的方式\"><a href=\"#创建正则表达式的方式\" class=\"headerlink\" title=\"创建正则表达式的方式\"></a>创建正则表达式的方式</h3><ul>\n<li><p>以<strong>字面量形式</strong>来定义<br><code>var pattern = /sxj/i;</code></p>\n</li>\n<li><p>使用<code>RegExp</code>构造函数<br><code>var pattern = new RegExp(&quot;sxj&quot;, &quot;i&quot;);</code></p>\n</li>\n</ul>\n<p>那么这两种方式的区别除了形式不一样，还有一个差别在于：<br>ECMAScript 3中，正则表达式字面量始终会<strong>共享</strong>同一个<code>RegExp</code>实例；而使用构造函数创建的每一个实例都是一个<strong>新</strong>实例。</p>\n<p>不过！【敲黑板！】ECMAScript 5明确规定了，使用正则表达式字面量必须想直接调用<code>RegExp</code>构造函数一样，每次都创建新的RegExp实例。而各大浏览器也对此进行了修改。</p>\n<h3 id=\"RegExp实例\"><a href=\"#RegExp实例\" class=\"headerlink\" title=\"RegExp实例\"></a><code>RegExp</code>实例</h3><h4 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h4><ul>\n<li><code>global</code>: 布尔值，表示是否设置了<code>g</code>标志</li>\n<li><code>ignoreCase</code>: 布尔值，表示是否设置了<code>i</code>标志</li>\n<li><code>multiline</code>: 布尔值，表示是否设置了<code>m</code>标志</li>\n<li><code>lastIndex</code>：整数，表示开始搜索下一个匹配项的字符位置，从0开始。</li>\n<li><code>source</code>： 正则表达式的字符串表示。按照<strong>字面量形式</strong>返回。</li>\n</ul>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><h5 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a><code>exec()</code></h5><pre><code>pattern.exec(text);\n</code></pre><p>查找text中的匹配项。</p>\n<pre><code>//例子\nvar pattern = /sxj/i;\nvar text = &quot;sxj is a good student sxj haha&quot;;\nconsole.log(pattern.exec(text));\n//[&quot;sxj&quot;, index: 0, input: &quot;sxj is a good student sxj haha&quot;]\nvar pattern2 = /shi/i;\nconsole.log(pattern2,exec(text));//null\n</code></pre><p>从上述例子可以发现，若找到，则返回一个数组，该数组包含第一个匹配项，除此之外，还有两个属性：<code>index</code>（匹配项在字符串中的位置）,<code>input</code>（应用正则表达式的字符串）。若没有匹配项返回<code>null</code>。</p>\n<p>对于<code>exec</code>而言，无论是否设置<code>g</code>全局标志，每次也只会返回一个匹配项。但是如果在同一个字符串上多次调用，设置了<code>g</code>标志则会继续查找新的匹配项，而没有设置的话只会返回第一个匹配项信息。除此之外，pattern的<code>lastIndex</code>属性在全局模式会增加，非全局模式始终不变。</p>\n<h5 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a><code>test()</code></h5><pre><code>pattern.test(text);\n</code></pre><p>查看目标字符串与该模式是否匹配。匹配返回true，否则返回false。</p>\n<h3 id=\"String中的正则表达式\"><a href=\"#String中的正则表达式\" class=\"headerlink\" title=\"String中的正则表达式\"></a>String中的正则表达式</h3><h5 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a><code>match()</code></h5><pre><code>text.match(pattern);\n</code></pre><p><code>match</code>匹配一个字符串和一个正则表达式。若没有<code>g</code>标识，则结果与<code>pattern.exec(text)</code>相同。若有<code>g</code>标志，则返回一个包含所有匹配的数组。</p>\n<h5 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a><code>search()</code></h5><pre><code>text.search(pattern);\n</code></pre><p>若找到匹配，返回第一个匹配的首字符位置。若没有找到返回-1。<br>此方法会忽略<code>g</code>标识，且没有position参数。</p>\n<h5 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a><code>replace()</code></h5><pre><code>string.replace(searchValue, replaceValue);\n</code></pre><p><code>searchValue</code>可以是一个字符串或一个正则表达式对象。若是一个字符串，只会在第一次出现的地方被替换。若是一个正则表达式，若有<code>g</code>标志则替换所有匹配之处，若没有则只替换第一个匹配之处。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>正则表达式是个非常好用的工具，若掌握了可达到事半功倍的效果。好好学哟~</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久之前就说要写一篇正则表达式的文章，正则表达式总是记了又忘，忘了再记，记了再忘，卒。<br>言归正传，今天终于要研究一下这个谜一样的正则表达式了。其实正则表达式并不难（真的吗？orz）</p>\n<h2 id=\"为什么要用正则表达式\"><a href=\"#为什么要用正则表达式\" class=\"headerlink\" title=\"为什么要用正则表达式\"></a>为什么要用正则表达式</h2><p>在学习之前，我们需要弄明白，到底什么时候需要用到正则表达式，正则表达式的用途究竟是什么？<br>比如说，你正在搜索一个文件，这个文件里面包含单词car(不区分大小写)，但是呢你又不想把包含字符串car的其他单词（例如carry）也一起找出来，那么这个时候你就可以使用正则表达式来帮你解决问题。当然，这只是众多场景中的一种。正则表达式功能强大，可以帮你解决各种匹配文本问题。又或者表单验证的方式，也可以使用正则表达式来解决。</p>\n<h2 id=\"正则表达式是什么\"><a href=\"#正则表达式是什么\" class=\"headerlink\" title=\"正则表达式是什么\"></a>正则表达式是什么</h2><p>简单来说，正则表达式就是字符串，是用来匹配和处理文本的字符串。用正则表达式语言创建的。</p>\n<h2 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h2><h3 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h3><ul>\n<li><code>.</code>（英文句号）：匹配任何一个单个字符</li>\n<li><code>[]</code>：匹配集合内多个字符中的某个字符<br>e.g. <code>[ns]a</code> –&gt; 匹配 na 或sa</li>\n<li><code>[-]</code>：匹配该区间内的字符<br>e.g. [a-z] , [0-9]</li>\n<li><code>^</code> 取非匹配：除了该字符集内的字符，都可以匹配。只有当<code>^</code>出现在<code>[</code>和<code>]</code>之间，且紧跟在<code>[</code>后面，才能发挥取非的作用。<br>e.g. <code>[^0-9]</code> 匹配非数字的字符</li>\n</ul>\n<h3 id=\"使用元字符\"><a href=\"#使用元字符\" class=\"headerlink\" title=\"使用元字符\"></a>使用元字符</h3><p>元字符：在正则表达式中有特殊含义的字符。若需要表示该字符本身，需使用<code>\\</code>转义。</p>\n<ul>\n<li><code>\\d</code> 任何一个数字字符，相当于[0-9]</li>\n<li><code>\\D</code> 任何一个非数字字符，相当于[^0-9]</li>\n<li><code>\\w</code> 任何一个字母数字字符或下划线字符，相当于[a-zA-Z0-9_]</li>\n<li><code>\\W</code> 任何一个非字母数字字符或非下划线字符，相当于[^a-zA-Z0-9_]</li>\n<li><code>\\s</code> 任何一个空白字符，等价于[\\f\\n\\r\\t\\v]</li>\n<li><code>\\S</code> 任何一个非空白字符，等价于[^\\f\\n\\r\\t\\v]</li>\n</ul>\n<p>总而言之，小写字母与大写字母都是相反的，所以记住小写字母的含义，大写字母则是对应的取非含义。</p>\n<h3 id=\"重复匹配\"><a href=\"#重复匹配\" class=\"headerlink\" title=\"重复匹配\"></a>重复匹配</h3><ul>\n<li><code>?</code> 0个或1个字符<br>e.g. [0-9]? 出现0次或一次，且最多只能出现1次数字。</li>\n<li><code>+</code> 一个或多个字符<br>e.g. [0-9]+ 表示一个或多个连续的数字</li>\n<li><code>*</code> 0个或多个字符<br>e.g. [0-9]* 连续出现0次货多次的数字</li>\n<li><code>{n}</code> 设置一个精确的重复的值<br>e.g. [0-9]{3} 三个数字</li>\n<li><code>{min,max}</code> 设置重复次数的最小值和最大值<br>e.g. [0-9]{2,4} 最少2个数字，最多4个数字</li>\n<li><code>{min, }</code> 设置重复次数的最小值<br>e.g. [0-9]{2,} 最少2个数字</li>\n</ul>\n<h3 id=\"懒惰型匹配\"><a href=\"#懒惰型匹配\" class=\"headerlink\" title=\"懒惰型匹配\"></a>懒惰型匹配</h3><p>为了防止出现重复匹配造成的过度匹配，因为<code>*</code>和<code>+</code>都是“贪婪型”元字符，它们在进行匹配时会尽可能从一段文本的开头一直匹配到这段文本的末尾，而不是碰到第一个匹配就结束。</p>\n<p>那么这个时候就需要使用”懒惰型”。仅需在贪婪型元字符后加上<code>?</code>即可。如：<code>*?</code>,<code>+?</code>,<code>{n,}?</code> </p>\n<h3 id=\"位置匹配\"><a href=\"#位置匹配\" class=\"headerlink\" title=\"位置匹配\"></a>位置匹配</h3><ul>\n<li><code>\\b</code> 单词边界</li>\n<li><code>\\B</code> 非单词边界。查找前后都有多余空格的连字符。</li>\n<li><code>^</code> 字符串开头。出现在字符集合的外面且位于一个模式的开头，<code>^</code>匹配字符串的开头</li>\n<li><code>$</code> 字符串结尾</li>\n</ul>\n<hr>\n<h2 id=\"Javascript中的正则表达式\"><a href=\"#Javascript中的正则表达式\" class=\"headerlink\" title=\"Javascript中的正则表达式\"></a>Javascript中的正则表达式</h2><p>ECMAScript通过<code>RegExp</code>类型来支持正则表达式。</p>\n<pre><code>var expression = / pattern / flags；\n</code></pre><p>其中<code>pattern</code>可以是任何简单或复杂的正则表达式。<br><code>flags</code>用来标明正则表达式的行为。如下所示：</p>\n<ul>\n<li><code>g</code> : 全局模式。模式应用于所有的字符串，不是在发现第一个匹配项后就立即停止的。</li>\n<li><code>i</code> : 不区分大小写。正则表达式默认是区别大小写的。<code>i</code>则是忽略大小写</li>\n<li><code>m</code> : 表示多行模式，也就是说到达一行文本末尾的时候还会继续查找下一行中是否存在与模式匹配的项。</li>\n</ul>\n<h3 id=\"创建正则表达式的方式\"><a href=\"#创建正则表达式的方式\" class=\"headerlink\" title=\"创建正则表达式的方式\"></a>创建正则表达式的方式</h3><ul>\n<li><p>以<strong>字面量形式</strong>来定义<br><code>var pattern = /sxj/i;</code></p>\n</li>\n<li><p>使用<code>RegExp</code>构造函数<br><code>var pattern = new RegExp(&quot;sxj&quot;, &quot;i&quot;);</code></p>\n</li>\n</ul>\n<p>那么这两种方式的区别除了形式不一样，还有一个差别在于：<br>ECMAScript 3中，正则表达式字面量始终会<strong>共享</strong>同一个<code>RegExp</code>实例；而使用构造函数创建的每一个实例都是一个<strong>新</strong>实例。</p>\n<p>不过！【敲黑板！】ECMAScript 5明确规定了，使用正则表达式字面量必须想直接调用<code>RegExp</code>构造函数一样，每次都创建新的RegExp实例。而各大浏览器也对此进行了修改。</p>\n<h3 id=\"RegExp实例\"><a href=\"#RegExp实例\" class=\"headerlink\" title=\"RegExp实例\"></a><code>RegExp</code>实例</h3><h4 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h4><ul>\n<li><code>global</code>: 布尔值，表示是否设置了<code>g</code>标志</li>\n<li><code>ignoreCase</code>: 布尔值，表示是否设置了<code>i</code>标志</li>\n<li><code>multiline</code>: 布尔值，表示是否设置了<code>m</code>标志</li>\n<li><code>lastIndex</code>：整数，表示开始搜索下一个匹配项的字符位置，从0开始。</li>\n<li><code>source</code>： 正则表达式的字符串表示。按照<strong>字面量形式</strong>返回。</li>\n</ul>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><h5 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a><code>exec()</code></h5><pre><code>pattern.exec(text);\n</code></pre><p>查找text中的匹配项。</p>\n<pre><code>//例子\nvar pattern = /sxj/i;\nvar text = &quot;sxj is a good student sxj haha&quot;;\nconsole.log(pattern.exec(text));\n//[&quot;sxj&quot;, index: 0, input: &quot;sxj is a good student sxj haha&quot;]\nvar pattern2 = /shi/i;\nconsole.log(pattern2,exec(text));//null\n</code></pre><p>从上述例子可以发现，若找到，则返回一个数组，该数组包含第一个匹配项，除此之外，还有两个属性：<code>index</code>（匹配项在字符串中的位置）,<code>input</code>（应用正则表达式的字符串）。若没有匹配项返回<code>null</code>。</p>\n<p>对于<code>exec</code>而言，无论是否设置<code>g</code>全局标志，每次也只会返回一个匹配项。但是如果在同一个字符串上多次调用，设置了<code>g</code>标志则会继续查找新的匹配项，而没有设置的话只会返回第一个匹配项信息。除此之外，pattern的<code>lastIndex</code>属性在全局模式会增加，非全局模式始终不变。</p>\n<h5 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a><code>test()</code></h5><pre><code>pattern.test(text);\n</code></pre><p>查看目标字符串与该模式是否匹配。匹配返回true，否则返回false。</p>\n<h3 id=\"String中的正则表达式\"><a href=\"#String中的正则表达式\" class=\"headerlink\" title=\"String中的正则表达式\"></a>String中的正则表达式</h3><h5 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a><code>match()</code></h5><pre><code>text.match(pattern);\n</code></pre><p><code>match</code>匹配一个字符串和一个正则表达式。若没有<code>g</code>标识，则结果与<code>pattern.exec(text)</code>相同。若有<code>g</code>标志，则返回一个包含所有匹配的数组。</p>\n<h5 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a><code>search()</code></h5><pre><code>text.search(pattern);\n</code></pre><p>若找到匹配，返回第一个匹配的首字符位置。若没有找到返回-1。<br>此方法会忽略<code>g</code>标识，且没有position参数。</p>\n<h5 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a><code>replace()</code></h5><pre><code>string.replace(searchValue, replaceValue);\n</code></pre><p><code>searchValue</code>可以是一个字符串或一个正则表达式对象。若是一个字符串，只会在第一次出现的地方被替换。若是一个正则表达式，若有<code>g</code>标志则替换所有匹配之处，若没有则只替换第一个匹配之处。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>正则表达式是个非常好用的工具，若掌握了可达到事半功倍的效果。好好学哟~</p>\n"},{"title":"STOMP-over-WebSocket文档","date":"2016-08-17T07:40:36.000Z","_content":"\n## 前言\n前两天整理了`websocket`的资料，今天就把上次没说完的`Stomp.js`好好说一说~  \nStomp Over Webscoket参考文档：http://jmesnil.net/stomp-websocket/doc/  \n本文为参考文档的部分翻译，技术不佳，如有失误请指正。\n\n## 什么是Stomp\n> STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。\n\n## 协议支持\n该库支持多种版本的STOMP协议：\n* [STOMP 1.0][1]\n* [STOMP 1.1][2](包含 heart-beating)\n\n## 下载STOMP.JS\n你可以下载 [stomp.js][3] 并在你自己的WEB应用程序中使用。\n提供了[多种版本][4]也可以直接用于生产。\n这个js文件由CoffeeScript文件构建，请查看[Contribute][5]部分下载源码或浏览 [annote source code][6]\n\n## 服务端要求\n这个库不是单纯的Stomp 客户端。它旨在WebSockets上运行而不是TCP。基本上，WebSocket协议需要在浏览器客户端和服务端之间进行握手，确保浏览器的“same-origin”（同源）安全模型仍然有效。\n\n这意味着该库不能连接常规的STOMP 代理，因为Websocket初始化的握手不是STOMP协议的一部分，他们不能理解从而会拒绝连接。\n\n有一些正在进行的工作添加了WebSocket支持STOMP代理，从而他们可以在WebSocket协议上接受STOMP连接。\n\n### HornetQ\nHornetQ是由Red Hat and JBoss创立的开源消息系统.\n\n要使HornetQ支持STOMP Over WebSocket，下载最新版本并按照下列步骤执行：\n\n    $ cd hornetq-x.y.z/examples/jms/stomp-websockets\n    $ mvn clean install\n    ...\n    INFO: HQ221020: Started Netty Acceptor version 3.6.2.Final-c0d783c         localhost:61614 for STOMP_WS protocol\n    Apr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl$SharedStoreLiveActivation run\n    INFO: HQ221007: Server is now live\n    Apr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl start\n    INFO: HQ221001: HornetQ Server version 2.3.0.CR2 (black'n'yellow2, 123) [c9e29e45-a5bd-11e2-976a-b3fef7ceb5df]\n    \n此时HornetQ已经开启了，并且61614在端口监听STOMP over WebSocket\n它从URL为ws://localhost:61614/stomp 接受WebSocket的连接。\n\n[配置文档][7]\n\n### ActiveMQ\n[配置文档][8]\n\n### ActiveMQ Apollo\n[配置文档][9]\n\n### RabbitMQ\n[配置文档][10]\n\n### Stilts & Torquebox\n[Stilts][11] 是一个STOMP原生的消息框架。\n\n[TorqueBox][12] 使用Stilts去提供它的[Websockets and STOMP stack][13]。\n\n## Stomp API\n### STOMP 帧（Frame）\nSTOMP Over WebSocket 提供了一个直接从`Stomp Frame`映射到 Javascript 对象的方式。  \n`Stomp Frame`帧格式如下：\n\n|Property|Type|Notes\n| ----------- |:--------:| -----:|\n|command|String\t|name of the frame (\"CONNECT\", \"SEND\", etc.)\n|headers|JavaScript object\t\n|body|String|\t\n\n`command`和`headers`属性始终会被定义，不过当这个`frame`没有头部时，`headers`可以为空。若这个`frame`没有`body`，`body`的值可以为`null`。\n\n### 创建`STOMP`客户端\n#### 在web浏览器中使用普通的Web Socket\nSTOMP javascript 客户端会使用`ws://`的URL与STOMP 服务端进行交互。\n\n为了创建一个STOMP客户端js对象，你需要使用`Stomp.client(url)`，而这个URL连接着服务端的WebSocket的代理：\n\n    var url = \"ws://localhost:61614/stomp\";\n    var client = Stomp.client(url);\n\n`Stomp.client(url, protocols)`也可以用来覆盖默认的`subprotocols`。第二个参数可以是一个字符串或一个字符串数组去指定多个`subprotocols`。\n\n#### 在web浏览器中使用定制的WebSocket\n浏览器提供了不同的WebSocket的协议，一些老的浏览器不支持WebSocket的脚本或者使用别的名字。默认下，`stomp.js`会使用浏览器原生的`WebSocket class`去创建WebSocket。\n\n但是利用`Stomp.over(ws)`这个方法可以使用其他类型的WebSockets。这个方法得到一个满足WebSocket定义的对象。\n\n例如，可以使用由`SockJS`实现的Websocket：\n\n    <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\"></script>\n    <script>\n        // use SockJS implementation instead of the browser's native implementation\n        var ws = new SockJS(url);\n        var client = Stomp.over(ws);\n        [...]\n    </script>\n\n如果使用原生的Websockets就使用`Stomp.client(url)`，如果需要使用其他类型的Websocket（例如由SockJS包装的Websocket）就使用`Stomp.over(ws)`。\n\n除了初始化有差别，Stomp API在这两种方式下是相同的。\n\n#### 在`node.js`程序中\n通过`stompjs npm package`同样也可以在`node.js`程序中使用这个库。\n\n    $ npm install stompjs\n\n在node.js`app`中, `require`这个模块:\n\n    var Stomp = require('stompjs');\n\n为了与建立在TCP socket的STOMP-broker连接，使用`Stomp.overTCP(host, port)`方法。\n\n    var client = Stomp.overTCP('localhost', 61613);\n\n为了与建立在Web Socket的STOMP broker连接，使用`Stomp.overWS(url)`方法。\n\n    var client = Stomp.overWS('ws://localhost:61614/stomp');\n\n除了初始化不同，无论是浏览器还是node.js环境下，Stomp API都是相同的。\n\n### 连接服务端\n一旦Stomp 客户端建立了，必须调用它的`connect()`方法去连接，从而Stomp服务端进行验证。这个方法需要两个参数，用户的登录和密码凭证。\n\n这种情况下，客户端会使用Websocket打开连接，并发送一个`CONNECT frame`。\n\n这个连接是异步进行的：你不能保证当这个方法返回时是有效连接的。为了知道连接的结果，你需要一个回调函数。\n\n    var connect_callback = function() {\n        // called back after the client is connected and authenticated to the STOMP server\n    };\n\n但是如果连接失败会发生什么呢？`connect()`方法接受一个可选的参数(`error_callback`)，当客户端不能连接上服务端时，这个回调函数`error_callback`会被调用，该函数的参数为对应的错误对象。\n\n    var error_callback = function(error) {\n        // display the error's message header:\n        alert(error.headers.message);\n    };\n    \n在大多数情况下，`connect()`方法可接受不同数量的参数来提供简单的API：\n\n    client.connect(login, passcode, connectCallback);\n    client.connect(login, passcode, connectCallback, errorCallback);\n    client.connect(login, passcode, connectCallback, errorCallback, host);\n\n`login`和`passcode`是strings，`connectCallback`和`errorCallback`则是functions。（有些brokers（代理）还需要传递一个`host`（String类型）参数。）\n\n如果你需要附加一个`headers`头部，`connect`方法还接受其他两种形式的参数：\n\n    client.connect(headers, connectCallback);\n    client.connect(headers, connectCallback, errorCallback);\n    \n`header`是`map`形式，`connectCallback`和`errorCallback`为functions。\n\n需要注意：如果你使用上述这种方式，你需要自行在`headers`添加`login`,`passcode`（甚至`host`）：\n\n    var headers = {\n        login: 'mylogin',\n        passcode: 'mypasscode',\n        // additional header\n        'client-id': 'my-client-id'\n    };\n    client.connect(headers, connectCallback);\n\n断开连接时，调用`disconnect`方法，这个方法也是异步的，当断开成功后会接收一个额外的回调函数的参数。如下所示。\n    client.disconnect(function() {\n        alert(\"See you next time!\");\n    };\n\n当客户端与服务端断开连接，就不会再发送或接收消息了。\n\n### Heart-beating\n如果STOMP broker(代理)接收STOMP 1.1版本的帧，`heart-beating`是默认启用的。`heart-beating`也就是频率，`incoming`是接收频率，`outgoing`是发送频率。\n\n通过改变`incoming`和`outgoing`可以更改客户端的`heart-beating`(默认为10000ms)：\n\n    client.heartbeat.outgoing = 20000; \n    // client will send heartbeats every 20000ms\n    client.heartbeat.incoming = 0;\n    // client does not want to receive heartbeats\n    // from the server\n    \n\n`heart-beating`是利用`window.setInterval()`去规律地发送`heart-beats`或者检查服务端的`heart-beats`。\n\n### 发送消息\n\n当客户端与服务端连接成功后，可以调用`send()`来发送STOMP消息。这个方法必须有一个参数，用来描述对应的STOMP的目的地。另外可以有两个可选的参数：`headers`，`object`类型包含额外的信息头部；`body`，一个String类型的参数。\n\n    client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n\nclient会发送一个STOMP发送帧给`/queue/test`，这个帧包含一个设置了`priority`为9的`header`和内容为“Hello, STOMP”的`body`。\n\n如果你想发送一个有`body`的信息，也必须传递`headers`参数。如果没有`headers`需要传递，那么就传`{}`即可，如下所示：\n\n    client.send(destination, {}, body);\n    \n\n### 订阅（Subscribe）和接收（receive）消息\n为了在浏览器中接收消息，STOMP客户端必须先订阅一个目的地`destination`。\n\n你可以使用`subscribe()`去订阅。这个方法有2个必需的参数：目的地(`destination`)，回调函数(`callback`)；还有一个可选的参数`headers`。其中`destination`是String类型，对应目的地，回调函数是伴随着一个参数的`function`类型。\n\n    var subscription = client.subscribe(\"/queue/test\", callback);\n\n`subscribe()`方法返回一个`object`，这个`object`包含一个`id`属性，对应这个这个客户端的订阅ID。而`unsubscribe()`可以用来取消客户端对这个目的地`destination`的订阅。\n\n默认情况下，如果没有在`headers`额外添加，这个库会默认构建一个独一无二的`ID`。在传递`headers`这个参数时，可以使用你自己的`ID`:\n\n    var mysubid = '...';\n    var subscription = client.subscribe(destination, callback, { id: mysubid });\n\n这个客户端会向服务端发送一个STOMP订阅帧（`SUBSCRIBE frame`）并注册回调事件。每次服务端向客户端发送消息时，客户端都会轮流调用回调函数，参数为对应消息的STOMP帧对象（`Frame object`）。如下所示：\n\n    callback = function(message) {\n        // called when the client receives a STOMP message from the server\n        if (message.body) {\n            alert(\"got message with body \" + message.body)\n        } else {\n            alert(\"got empty message\");\n        }\n    });\n    \n`subscribe()`方法，接受一个可选的`headers`参数用来标识附加的头部。\n\n    var headers = {ack: 'client', 'selector': \"location = 'Europe'\"};\n  \n    client.subscribe(\"/queue/test\", message_callback, headers);\n\n\n这个客户端指定了它会确认接收的信息，只接收符合这个`selector : location = 'Europe'`的消息。\n\n如果想让客户端订阅多个目的地，你可以在接收所有信息的时候调用相同的回调函数：\n\n    onmessage = function(message) {\n        // called every time the client receives a message\n    }\n    var sub1 = client.subscribe(\"queue/test\", onmessage);\n    var sub2 = client.subscribe(\"queue/another\", onmessage)\n\n\n如果要中止接收消息，客户端可以在`subscribe()`返回的`object`对象调用`unsubscribe()`来结束接收。\n\n    var subscription = client.subscribe(...);\n  \n    ...\n  \n    subscription.unsubscribe();\n\n### 支持JSON\nSTOMP消息的`body`必须为字符串。如果你需要发送/接收`JSON`对象，你可以使用`JSON.stringify()`和`JSON.parse()`去转换JSON对象。\n\n    var quote = {symbol: 'APPL', value: 195.46};\n    client.send(\"/topic/stocks\", {}, JSON.stringify(quote));\n\n    client.subcribe(\"/topic/stocks\", function(message) {\n        var quote = JSON.parse(message.body);\n        alert(quote.symbol + \" is at \" + quote.value);\n    };\n\n### Acknowledgment(确认)\n默认情况，在消息发送给客户端之前，服务端会自动确认（`acknowledged`）。\n\n客户端可以选择通过订阅一个目的地时设置一个`ack header`为`client`或`client-individual`来处理消息确认。\n\n在下面这个例子，客户端必须调用`message.ack()`来通知客户端它已经接收了消息。\n\n    var subscription = client.subscribe(\"/queue/test\",\n        function(message) {\n            // do something with the message\n            ...\n            // and acknowledge it\n            message.ack();\n        },\n        {ack: 'client'}\n    );\n\n`ack()`接受`headers`参数用来附加确认消息。例如，将消息作为事务(transaction)的一部分，当要求接收消息时其实代理（broker）已经将`ACK STOMP frame`处理了。\n\n    var tx = client.begin();\n    message.ack({ transaction: tx.id, receipt: 'my-receipt' });\n    tx.commit();\n\n`nack()`也可以用来通知STOMP 1.1.brokers（代理）：客户端不能消费这个消息。与`ack()`方法的参数相同。\n\n### 事务(Transactions)\n可以在将消息的发送和确认接收放在一个事务中。\n\n客户端调用自身的`begin()`方法就可以开始启动事务了，`begin()`有一个可选的参数`transaction`，一个唯一的可标识事务的字符串。如果没有传递这个参数，那么库会自动构建一个。\n\n这个方法会返回一个object。这个对象有一个`id`属性对应这个事务的ID，还有两个方法：\n`commit()`提交事务\n`abort()`中止事务\n\n在一个事务中，客户端可以在发送/接受消息时指定transaction id来设置transaction。\n\n    // start the transaction\n    var tx = client.begin();\n    // send the message in a transaction\n    client.send(\"/queue/test\", {transaction: tx.id}, \"message in a transaction\");\n    // commit the transaction to effectively send the message\n    tx.commit();\n\n如果你在调用`send()`方法发送消息的时候忘记添加transction header，那么这不会称为事务的一部分，这个消息会直接发送，不会等到事务完成后才发送。\n\n    var txid = \"unique_transaction_identifier\";\n    // start the transaction\n    var tx = client.begin();\n    // oops! send the message outside the transaction\n    client.send(\"/queue/test\", {}, \"I thought I was in a transaction!\");\n    tx.abort(); // Too late! the message has been sent\n  \n### 调试（Debug）\n\n有一些测试代码能有助于你知道库发送或接收的是什么，从而来调试程序。\n\n客户端可以将其`debug`属性设置为一个函数，传递一个字符串参数去观察库所有的debug语句。\n\n    client.debug = function(str) {\n        // append the debug log to a #debug div somewhere in the page using JQuery:\n        $(\"#debug\").append(str + \"\\n\");\n    };\n\n默认情况，debug消息会被记录在在浏览器的控制台。\n\n\n  [1]: http://stomp.github.io/stomp-specification-1.0.html\n  [2]: http://stomp.github.io/stomp-specification-1.1.html\n  [3]: https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.js\n  [4]: https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.min.js\n  [5]: http://jmesnil.net/stomp-websocket/doc/#contribute\n  [6]: http://jmesnil.net/stomp-websocket/doc/stomp.html\n  [7]: http://docs.jboss.org/hornetq/2.3.0.CR2/docs/user-manual/html/interoperability.html#stomp.websockets\n  [8]: http://activemq.apache.org/websockets.html\n  [9]: http://activemq.apache.org/apollo/documentation/user-manual.html#WebSocket_Transports\n  [10]: RabbitMQ\n  [11]: http://stilts.projectodd.org/\n  [12]: http://torquebox.org/\n  [13]: http://torquebox.org/documentation/2.1.2/stomp.html","source":"_posts/STOMP-over-WebSocket.md","raw":"---\ntitle: STOMP-over-WebSocket文档\ndate: 2016-08-17 15:40:36\ncategories: 前端开发\ntags: [Stomp, websocket, javascript, html5]\n---\n\n## 前言\n前两天整理了`websocket`的资料，今天就把上次没说完的`Stomp.js`好好说一说~  \nStomp Over Webscoket参考文档：http://jmesnil.net/stomp-websocket/doc/  \n本文为参考文档的部分翻译，技术不佳，如有失误请指正。\n\n## 什么是Stomp\n> STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。\n\n## 协议支持\n该库支持多种版本的STOMP协议：\n* [STOMP 1.0][1]\n* [STOMP 1.1][2](包含 heart-beating)\n\n## 下载STOMP.JS\n你可以下载 [stomp.js][3] 并在你自己的WEB应用程序中使用。\n提供了[多种版本][4]也可以直接用于生产。\n这个js文件由CoffeeScript文件构建，请查看[Contribute][5]部分下载源码或浏览 [annote source code][6]\n\n## 服务端要求\n这个库不是单纯的Stomp 客户端。它旨在WebSockets上运行而不是TCP。基本上，WebSocket协议需要在浏览器客户端和服务端之间进行握手，确保浏览器的“same-origin”（同源）安全模型仍然有效。\n\n这意味着该库不能连接常规的STOMP 代理，因为Websocket初始化的握手不是STOMP协议的一部分，他们不能理解从而会拒绝连接。\n\n有一些正在进行的工作添加了WebSocket支持STOMP代理，从而他们可以在WebSocket协议上接受STOMP连接。\n\n### HornetQ\nHornetQ是由Red Hat and JBoss创立的开源消息系统.\n\n要使HornetQ支持STOMP Over WebSocket，下载最新版本并按照下列步骤执行：\n\n    $ cd hornetq-x.y.z/examples/jms/stomp-websockets\n    $ mvn clean install\n    ...\n    INFO: HQ221020: Started Netty Acceptor version 3.6.2.Final-c0d783c         localhost:61614 for STOMP_WS protocol\n    Apr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl$SharedStoreLiveActivation run\n    INFO: HQ221007: Server is now live\n    Apr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl start\n    INFO: HQ221001: HornetQ Server version 2.3.0.CR2 (black'n'yellow2, 123) [c9e29e45-a5bd-11e2-976a-b3fef7ceb5df]\n    \n此时HornetQ已经开启了，并且61614在端口监听STOMP over WebSocket\n它从URL为ws://localhost:61614/stomp 接受WebSocket的连接。\n\n[配置文档][7]\n\n### ActiveMQ\n[配置文档][8]\n\n### ActiveMQ Apollo\n[配置文档][9]\n\n### RabbitMQ\n[配置文档][10]\n\n### Stilts & Torquebox\n[Stilts][11] 是一个STOMP原生的消息框架。\n\n[TorqueBox][12] 使用Stilts去提供它的[Websockets and STOMP stack][13]。\n\n## Stomp API\n### STOMP 帧（Frame）\nSTOMP Over WebSocket 提供了一个直接从`Stomp Frame`映射到 Javascript 对象的方式。  \n`Stomp Frame`帧格式如下：\n\n|Property|Type|Notes\n| ----------- |:--------:| -----:|\n|command|String\t|name of the frame (\"CONNECT\", \"SEND\", etc.)\n|headers|JavaScript object\t\n|body|String|\t\n\n`command`和`headers`属性始终会被定义，不过当这个`frame`没有头部时，`headers`可以为空。若这个`frame`没有`body`，`body`的值可以为`null`。\n\n### 创建`STOMP`客户端\n#### 在web浏览器中使用普通的Web Socket\nSTOMP javascript 客户端会使用`ws://`的URL与STOMP 服务端进行交互。\n\n为了创建一个STOMP客户端js对象，你需要使用`Stomp.client(url)`，而这个URL连接着服务端的WebSocket的代理：\n\n    var url = \"ws://localhost:61614/stomp\";\n    var client = Stomp.client(url);\n\n`Stomp.client(url, protocols)`也可以用来覆盖默认的`subprotocols`。第二个参数可以是一个字符串或一个字符串数组去指定多个`subprotocols`。\n\n#### 在web浏览器中使用定制的WebSocket\n浏览器提供了不同的WebSocket的协议，一些老的浏览器不支持WebSocket的脚本或者使用别的名字。默认下，`stomp.js`会使用浏览器原生的`WebSocket class`去创建WebSocket。\n\n但是利用`Stomp.over(ws)`这个方法可以使用其他类型的WebSockets。这个方法得到一个满足WebSocket定义的对象。\n\n例如，可以使用由`SockJS`实现的Websocket：\n\n    <script src=\"http://cdn.sockjs.org/sockjs-0.3.min.js\"></script>\n    <script>\n        // use SockJS implementation instead of the browser's native implementation\n        var ws = new SockJS(url);\n        var client = Stomp.over(ws);\n        [...]\n    </script>\n\n如果使用原生的Websockets就使用`Stomp.client(url)`，如果需要使用其他类型的Websocket（例如由SockJS包装的Websocket）就使用`Stomp.over(ws)`。\n\n除了初始化有差别，Stomp API在这两种方式下是相同的。\n\n#### 在`node.js`程序中\n通过`stompjs npm package`同样也可以在`node.js`程序中使用这个库。\n\n    $ npm install stompjs\n\n在node.js`app`中, `require`这个模块:\n\n    var Stomp = require('stompjs');\n\n为了与建立在TCP socket的STOMP-broker连接，使用`Stomp.overTCP(host, port)`方法。\n\n    var client = Stomp.overTCP('localhost', 61613);\n\n为了与建立在Web Socket的STOMP broker连接，使用`Stomp.overWS(url)`方法。\n\n    var client = Stomp.overWS('ws://localhost:61614/stomp');\n\n除了初始化不同，无论是浏览器还是node.js环境下，Stomp API都是相同的。\n\n### 连接服务端\n一旦Stomp 客户端建立了，必须调用它的`connect()`方法去连接，从而Stomp服务端进行验证。这个方法需要两个参数，用户的登录和密码凭证。\n\n这种情况下，客户端会使用Websocket打开连接，并发送一个`CONNECT frame`。\n\n这个连接是异步进行的：你不能保证当这个方法返回时是有效连接的。为了知道连接的结果，你需要一个回调函数。\n\n    var connect_callback = function() {\n        // called back after the client is connected and authenticated to the STOMP server\n    };\n\n但是如果连接失败会发生什么呢？`connect()`方法接受一个可选的参数(`error_callback`)，当客户端不能连接上服务端时，这个回调函数`error_callback`会被调用，该函数的参数为对应的错误对象。\n\n    var error_callback = function(error) {\n        // display the error's message header:\n        alert(error.headers.message);\n    };\n    \n在大多数情况下，`connect()`方法可接受不同数量的参数来提供简单的API：\n\n    client.connect(login, passcode, connectCallback);\n    client.connect(login, passcode, connectCallback, errorCallback);\n    client.connect(login, passcode, connectCallback, errorCallback, host);\n\n`login`和`passcode`是strings，`connectCallback`和`errorCallback`则是functions。（有些brokers（代理）还需要传递一个`host`（String类型）参数。）\n\n如果你需要附加一个`headers`头部，`connect`方法还接受其他两种形式的参数：\n\n    client.connect(headers, connectCallback);\n    client.connect(headers, connectCallback, errorCallback);\n    \n`header`是`map`形式，`connectCallback`和`errorCallback`为functions。\n\n需要注意：如果你使用上述这种方式，你需要自行在`headers`添加`login`,`passcode`（甚至`host`）：\n\n    var headers = {\n        login: 'mylogin',\n        passcode: 'mypasscode',\n        // additional header\n        'client-id': 'my-client-id'\n    };\n    client.connect(headers, connectCallback);\n\n断开连接时，调用`disconnect`方法，这个方法也是异步的，当断开成功后会接收一个额外的回调函数的参数。如下所示。\n    client.disconnect(function() {\n        alert(\"See you next time!\");\n    };\n\n当客户端与服务端断开连接，就不会再发送或接收消息了。\n\n### Heart-beating\n如果STOMP broker(代理)接收STOMP 1.1版本的帧，`heart-beating`是默认启用的。`heart-beating`也就是频率，`incoming`是接收频率，`outgoing`是发送频率。\n\n通过改变`incoming`和`outgoing`可以更改客户端的`heart-beating`(默认为10000ms)：\n\n    client.heartbeat.outgoing = 20000; \n    // client will send heartbeats every 20000ms\n    client.heartbeat.incoming = 0;\n    // client does not want to receive heartbeats\n    // from the server\n    \n\n`heart-beating`是利用`window.setInterval()`去规律地发送`heart-beats`或者检查服务端的`heart-beats`。\n\n### 发送消息\n\n当客户端与服务端连接成功后，可以调用`send()`来发送STOMP消息。这个方法必须有一个参数，用来描述对应的STOMP的目的地。另外可以有两个可选的参数：`headers`，`object`类型包含额外的信息头部；`body`，一个String类型的参数。\n\n    client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n\nclient会发送一个STOMP发送帧给`/queue/test`，这个帧包含一个设置了`priority`为9的`header`和内容为“Hello, STOMP”的`body`。\n\n如果你想发送一个有`body`的信息，也必须传递`headers`参数。如果没有`headers`需要传递，那么就传`{}`即可，如下所示：\n\n    client.send(destination, {}, body);\n    \n\n### 订阅（Subscribe）和接收（receive）消息\n为了在浏览器中接收消息，STOMP客户端必须先订阅一个目的地`destination`。\n\n你可以使用`subscribe()`去订阅。这个方法有2个必需的参数：目的地(`destination`)，回调函数(`callback`)；还有一个可选的参数`headers`。其中`destination`是String类型，对应目的地，回调函数是伴随着一个参数的`function`类型。\n\n    var subscription = client.subscribe(\"/queue/test\", callback);\n\n`subscribe()`方法返回一个`object`，这个`object`包含一个`id`属性，对应这个这个客户端的订阅ID。而`unsubscribe()`可以用来取消客户端对这个目的地`destination`的订阅。\n\n默认情况下，如果没有在`headers`额外添加，这个库会默认构建一个独一无二的`ID`。在传递`headers`这个参数时，可以使用你自己的`ID`:\n\n    var mysubid = '...';\n    var subscription = client.subscribe(destination, callback, { id: mysubid });\n\n这个客户端会向服务端发送一个STOMP订阅帧（`SUBSCRIBE frame`）并注册回调事件。每次服务端向客户端发送消息时，客户端都会轮流调用回调函数，参数为对应消息的STOMP帧对象（`Frame object`）。如下所示：\n\n    callback = function(message) {\n        // called when the client receives a STOMP message from the server\n        if (message.body) {\n            alert(\"got message with body \" + message.body)\n        } else {\n            alert(\"got empty message\");\n        }\n    });\n    \n`subscribe()`方法，接受一个可选的`headers`参数用来标识附加的头部。\n\n    var headers = {ack: 'client', 'selector': \"location = 'Europe'\"};\n  \n    client.subscribe(\"/queue/test\", message_callback, headers);\n\n\n这个客户端指定了它会确认接收的信息，只接收符合这个`selector : location = 'Europe'`的消息。\n\n如果想让客户端订阅多个目的地，你可以在接收所有信息的时候调用相同的回调函数：\n\n    onmessage = function(message) {\n        // called every time the client receives a message\n    }\n    var sub1 = client.subscribe(\"queue/test\", onmessage);\n    var sub2 = client.subscribe(\"queue/another\", onmessage)\n\n\n如果要中止接收消息，客户端可以在`subscribe()`返回的`object`对象调用`unsubscribe()`来结束接收。\n\n    var subscription = client.subscribe(...);\n  \n    ...\n  \n    subscription.unsubscribe();\n\n### 支持JSON\nSTOMP消息的`body`必须为字符串。如果你需要发送/接收`JSON`对象，你可以使用`JSON.stringify()`和`JSON.parse()`去转换JSON对象。\n\n    var quote = {symbol: 'APPL', value: 195.46};\n    client.send(\"/topic/stocks\", {}, JSON.stringify(quote));\n\n    client.subcribe(\"/topic/stocks\", function(message) {\n        var quote = JSON.parse(message.body);\n        alert(quote.symbol + \" is at \" + quote.value);\n    };\n\n### Acknowledgment(确认)\n默认情况，在消息发送给客户端之前，服务端会自动确认（`acknowledged`）。\n\n客户端可以选择通过订阅一个目的地时设置一个`ack header`为`client`或`client-individual`来处理消息确认。\n\n在下面这个例子，客户端必须调用`message.ack()`来通知客户端它已经接收了消息。\n\n    var subscription = client.subscribe(\"/queue/test\",\n        function(message) {\n            // do something with the message\n            ...\n            // and acknowledge it\n            message.ack();\n        },\n        {ack: 'client'}\n    );\n\n`ack()`接受`headers`参数用来附加确认消息。例如，将消息作为事务(transaction)的一部分，当要求接收消息时其实代理（broker）已经将`ACK STOMP frame`处理了。\n\n    var tx = client.begin();\n    message.ack({ transaction: tx.id, receipt: 'my-receipt' });\n    tx.commit();\n\n`nack()`也可以用来通知STOMP 1.1.brokers（代理）：客户端不能消费这个消息。与`ack()`方法的参数相同。\n\n### 事务(Transactions)\n可以在将消息的发送和确认接收放在一个事务中。\n\n客户端调用自身的`begin()`方法就可以开始启动事务了，`begin()`有一个可选的参数`transaction`，一个唯一的可标识事务的字符串。如果没有传递这个参数，那么库会自动构建一个。\n\n这个方法会返回一个object。这个对象有一个`id`属性对应这个事务的ID，还有两个方法：\n`commit()`提交事务\n`abort()`中止事务\n\n在一个事务中，客户端可以在发送/接受消息时指定transaction id来设置transaction。\n\n    // start the transaction\n    var tx = client.begin();\n    // send the message in a transaction\n    client.send(\"/queue/test\", {transaction: tx.id}, \"message in a transaction\");\n    // commit the transaction to effectively send the message\n    tx.commit();\n\n如果你在调用`send()`方法发送消息的时候忘记添加transction header，那么这不会称为事务的一部分，这个消息会直接发送，不会等到事务完成后才发送。\n\n    var txid = \"unique_transaction_identifier\";\n    // start the transaction\n    var tx = client.begin();\n    // oops! send the message outside the transaction\n    client.send(\"/queue/test\", {}, \"I thought I was in a transaction!\");\n    tx.abort(); // Too late! the message has been sent\n  \n### 调试（Debug）\n\n有一些测试代码能有助于你知道库发送或接收的是什么，从而来调试程序。\n\n客户端可以将其`debug`属性设置为一个函数，传递一个字符串参数去观察库所有的debug语句。\n\n    client.debug = function(str) {\n        // append the debug log to a #debug div somewhere in the page using JQuery:\n        $(\"#debug\").append(str + \"\\n\");\n    };\n\n默认情况，debug消息会被记录在在浏览器的控制台。\n\n\n  [1]: http://stomp.github.io/stomp-specification-1.0.html\n  [2]: http://stomp.github.io/stomp-specification-1.1.html\n  [3]: https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.js\n  [4]: https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.min.js\n  [5]: http://jmesnil.net/stomp-websocket/doc/#contribute\n  [6]: http://jmesnil.net/stomp-websocket/doc/stomp.html\n  [7]: http://docs.jboss.org/hornetq/2.3.0.CR2/docs/user-manual/html/interoperability.html#stomp.websockets\n  [8]: http://activemq.apache.org/websockets.html\n  [9]: http://activemq.apache.org/apollo/documentation/user-manual.html#WebSocket_Transports\n  [10]: RabbitMQ\n  [11]: http://stilts.projectodd.org/\n  [12]: http://torquebox.org/\n  [13]: http://torquebox.org/documentation/2.1.2/stomp.html","slug":"STOMP-over-WebSocket","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kix0002y3qwllq28bvq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前两天整理了<code>websocket</code>的资料，今天就把上次没说完的<code>Stomp.js</code>好好说一说~<br>Stomp Over Webscoket参考文档：<a href=\"http://jmesnil.net/stomp-websocket/doc/\" target=\"_blank\" rel=\"external\">http://jmesnil.net/stomp-websocket/doc/</a><br>本文为参考文档的部分翻译，技术不佳，如有失误请指正。</p>\n<h2 id=\"什么是Stomp\"><a href=\"#什么是Stomp\" class=\"headerlink\" title=\"什么是Stomp\"></a>什么是Stomp</h2><blockquote>\n<p>STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p>\n</blockquote>\n<h2 id=\"协议支持\"><a href=\"#协议支持\" class=\"headerlink\" title=\"协议支持\"></a>协议支持</h2><p>该库支持多种版本的STOMP协议：</p>\n<ul>\n<li><a href=\"http://stomp.github.io/stomp-specification-1.0.html\" target=\"_blank\" rel=\"external\">STOMP 1.0</a></li>\n<li><a href=\"http://stomp.github.io/stomp-specification-1.1.html\" target=\"_blank\" rel=\"external\">STOMP 1.1</a>(包含 heart-beating)</li>\n</ul>\n<h2 id=\"下载STOMP-JS\"><a href=\"#下载STOMP-JS\" class=\"headerlink\" title=\"下载STOMP.JS\"></a>下载STOMP.JS</h2><p>你可以下载 <a href=\"https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.js\" target=\"_blank\" rel=\"external\">stomp.js</a> 并在你自己的WEB应用程序中使用。<br>提供了<a href=\"https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.min.js\" target=\"_blank\" rel=\"external\">多种版本</a>也可以直接用于生产。<br>这个js文件由CoffeeScript文件构建，请查看<a href=\"http://jmesnil.net/stomp-websocket/doc/#contribute\" target=\"_blank\" rel=\"external\">Contribute</a>部分下载源码或浏览 <a href=\"http://jmesnil.net/stomp-websocket/doc/stomp.html\" target=\"_blank\" rel=\"external\">annote source code</a></p>\n<h2 id=\"服务端要求\"><a href=\"#服务端要求\" class=\"headerlink\" title=\"服务端要求\"></a>服务端要求</h2><p>这个库不是单纯的Stomp 客户端。它旨在WebSockets上运行而不是TCP。基本上，WebSocket协议需要在浏览器客户端和服务端之间进行握手，确保浏览器的“same-origin”（同源）安全模型仍然有效。</p>\n<p>这意味着该库不能连接常规的STOMP 代理，因为Websocket初始化的握手不是STOMP协议的一部分，他们不能理解从而会拒绝连接。</p>\n<p>有一些正在进行的工作添加了WebSocket支持STOMP代理，从而他们可以在WebSocket协议上接受STOMP连接。</p>\n<h3 id=\"HornetQ\"><a href=\"#HornetQ\" class=\"headerlink\" title=\"HornetQ\"></a>HornetQ</h3><p>HornetQ是由Red Hat and JBoss创立的开源消息系统.</p>\n<p>要使HornetQ支持STOMP Over WebSocket，下载最新版本并按照下列步骤执行：</p>\n<pre><code>$ cd hornetq-x.y.z/examples/jms/stomp-websockets\n$ mvn clean install\n...\nINFO: HQ221020: Started Netty Acceptor version 3.6.2.Final-c0d783c         localhost:61614 for STOMP_WS protocol\nApr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl$SharedStoreLiveActivation run\nINFO: HQ221007: Server is now live\nApr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl start\nINFO: HQ221001: HornetQ Server version 2.3.0.CR2 (black&apos;n&apos;yellow2, 123) [c9e29e45-a5bd-11e2-976a-b3fef7ceb5df]\n</code></pre><p>此时HornetQ已经开启了，并且61614在端口监听STOMP over WebSocket<br>它从URL为ws://localhost:61614/stomp 接受WebSocket的连接。</p>\n<p><a href=\"http://docs.jboss.org/hornetq/2.3.0.CR2/docs/user-manual/html/interoperability.html#stomp.websockets\" target=\"_blank\" rel=\"external\">配置文档</a></p>\n<h3 id=\"ActiveMQ\"><a href=\"#ActiveMQ\" class=\"headerlink\" title=\"ActiveMQ\"></a>ActiveMQ</h3><p><a href=\"http://activemq.apache.org/websockets.html\" target=\"_blank\" rel=\"external\">配置文档</a></p>\n<h3 id=\"ActiveMQ-Apollo\"><a href=\"#ActiveMQ-Apollo\" class=\"headerlink\" title=\"ActiveMQ Apollo\"></a>ActiveMQ Apollo</h3><p><a href=\"http://activemq.apache.org/apollo/documentation/user-manual.html#WebSocket_Transports\" target=\"_blank\" rel=\"external\">配置文档</a></p>\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p><a href=\"RabbitMQ\">配置文档</a></p>\n<h3 id=\"Stilts-amp-Torquebox\"><a href=\"#Stilts-amp-Torquebox\" class=\"headerlink\" title=\"Stilts &amp; Torquebox\"></a>Stilts &amp; Torquebox</h3><p><a href=\"http://stilts.projectodd.org/\" target=\"_blank\" rel=\"external\">Stilts</a> 是一个STOMP原生的消息框架。</p>\n<p><a href=\"http://torquebox.org/\" target=\"_blank\" rel=\"external\">TorqueBox</a> 使用Stilts去提供它的<a href=\"http://torquebox.org/documentation/2.1.2/stomp.html\" target=\"_blank\" rel=\"external\">Websockets and STOMP stack</a>。</p>\n<h2 id=\"Stomp-API\"><a href=\"#Stomp-API\" class=\"headerlink\" title=\"Stomp API\"></a>Stomp API</h2><h3 id=\"STOMP-帧（Frame）\"><a href=\"#STOMP-帧（Frame）\" class=\"headerlink\" title=\"STOMP 帧（Frame）\"></a>STOMP 帧（Frame）</h3><p>STOMP Over WebSocket 提供了一个直接从<code>Stomp Frame</code>映射到 Javascript 对象的方式。<br><code>Stomp Frame</code>帧格式如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:right\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">name of the frame (“CONNECT”, “SEND”, etc.)</td>\n</tr>\n<tr>\n<td>headers</td>\n<td style=\"text-align:center\">JavaScript object    </td>\n</tr>\n<tr>\n<td>body</td>\n<td style=\"text-align:center\">String</td>\n</tr>\n</tbody>\n</table>\n<p><code>command</code>和<code>headers</code>属性始终会被定义，不过当这个<code>frame</code>没有头部时，<code>headers</code>可以为空。若这个<code>frame</code>没有<code>body</code>，<code>body</code>的值可以为<code>null</code>。</p>\n<h3 id=\"创建STOMP客户端\"><a href=\"#创建STOMP客户端\" class=\"headerlink\" title=\"创建STOMP客户端\"></a>创建<code>STOMP</code>客户端</h3><h4 id=\"在web浏览器中使用普通的Web-Socket\"><a href=\"#在web浏览器中使用普通的Web-Socket\" class=\"headerlink\" title=\"在web浏览器中使用普通的Web Socket\"></a>在web浏览器中使用普通的Web Socket</h4><p>STOMP javascript 客户端会使用<code>ws://</code>的URL与STOMP 服务端进行交互。</p>\n<p>为了创建一个STOMP客户端js对象，你需要使用<code>Stomp.client(url)</code>，而这个URL连接着服务端的WebSocket的代理：</p>\n<pre><code>var url = &quot;ws://localhost:61614/stomp&quot;;\nvar client = Stomp.client(url);\n</code></pre><p><code>Stomp.client(url, protocols)</code>也可以用来覆盖默认的<code>subprotocols</code>。第二个参数可以是一个字符串或一个字符串数组去指定多个<code>subprotocols</code>。</p>\n<h4 id=\"在web浏览器中使用定制的WebSocket\"><a href=\"#在web浏览器中使用定制的WebSocket\" class=\"headerlink\" title=\"在web浏览器中使用定制的WebSocket\"></a>在web浏览器中使用定制的WebSocket</h4><p>浏览器提供了不同的WebSocket的协议，一些老的浏览器不支持WebSocket的脚本或者使用别的名字。默认下，<code>stomp.js</code>会使用浏览器原生的<code>WebSocket class</code>去创建WebSocket。</p>\n<p>但是利用<code>Stomp.over(ws)</code>这个方法可以使用其他类型的WebSockets。这个方法得到一个满足WebSocket定义的对象。</p>\n<p>例如，可以使用由<code>SockJS</code>实现的Websocket：</p>\n<pre><code>&lt;script src=&quot;http://cdn.sockjs.org/sockjs-0.3.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    // use SockJS implementation instead of the browser&apos;s native implementation\n    var ws = new SockJS(url);\n    var client = Stomp.over(ws);\n    [...]\n&lt;/script&gt;\n</code></pre><p>如果使用原生的Websockets就使用<code>Stomp.client(url)</code>，如果需要使用其他类型的Websocket（例如由SockJS包装的Websocket）就使用<code>Stomp.over(ws)</code>。</p>\n<p>除了初始化有差别，Stomp API在这两种方式下是相同的。</p>\n<h4 id=\"在node-js程序中\"><a href=\"#在node-js程序中\" class=\"headerlink\" title=\"在node.js程序中\"></a>在<code>node.js</code>程序中</h4><p>通过<code>stompjs npm package</code>同样也可以在<code>node.js</code>程序中使用这个库。</p>\n<pre><code>$ npm install stompjs\n</code></pre><p>在node.js<code>app</code>中, <code>require</code>这个模块:</p>\n<pre><code>var Stomp = require(&apos;stompjs&apos;);\n</code></pre><p>为了与建立在TCP socket的STOMP-broker连接，使用<code>Stomp.overTCP(host, port)</code>方法。</p>\n<pre><code>var client = Stomp.overTCP(&apos;localhost&apos;, 61613);\n</code></pre><p>为了与建立在Web Socket的STOMP broker连接，使用<code>Stomp.overWS(url)</code>方法。</p>\n<pre><code>var client = Stomp.overWS(&apos;ws://localhost:61614/stomp&apos;);\n</code></pre><p>除了初始化不同，无论是浏览器还是node.js环境下，Stomp API都是相同的。</p>\n<h3 id=\"连接服务端\"><a href=\"#连接服务端\" class=\"headerlink\" title=\"连接服务端\"></a>连接服务端</h3><p>一旦Stomp 客户端建立了，必须调用它的<code>connect()</code>方法去连接，从而Stomp服务端进行验证。这个方法需要两个参数，用户的登录和密码凭证。</p>\n<p>这种情况下，客户端会使用Websocket打开连接，并发送一个<code>CONNECT frame</code>。</p>\n<p>这个连接是异步进行的：你不能保证当这个方法返回时是有效连接的。为了知道连接的结果，你需要一个回调函数。</p>\n<pre><code>var connect_callback = function() {\n    // called back after the client is connected and authenticated to the STOMP server\n};\n</code></pre><p>但是如果连接失败会发生什么呢？<code>connect()</code>方法接受一个可选的参数(<code>error_callback</code>)，当客户端不能连接上服务端时，这个回调函数<code>error_callback</code>会被调用，该函数的参数为对应的错误对象。</p>\n<pre><code>var error_callback = function(error) {\n    // display the error&apos;s message header:\n    alert(error.headers.message);\n};\n</code></pre><p>在大多数情况下，<code>connect()</code>方法可接受不同数量的参数来提供简单的API：</p>\n<pre><code>client.connect(login, passcode, connectCallback);\nclient.connect(login, passcode, connectCallback, errorCallback);\nclient.connect(login, passcode, connectCallback, errorCallback, host);\n</code></pre><p><code>login</code>和<code>passcode</code>是strings，<code>connectCallback</code>和<code>errorCallback</code>则是functions。（有些brokers（代理）还需要传递一个<code>host</code>（String类型）参数。）</p>\n<p>如果你需要附加一个<code>headers</code>头部，<code>connect</code>方法还接受其他两种形式的参数：</p>\n<pre><code>client.connect(headers, connectCallback);\nclient.connect(headers, connectCallback, errorCallback);\n</code></pre><p><code>header</code>是<code>map</code>形式，<code>connectCallback</code>和<code>errorCallback</code>为functions。</p>\n<p>需要注意：如果你使用上述这种方式，你需要自行在<code>headers</code>添加<code>login</code>,<code>passcode</code>（甚至<code>host</code>）：</p>\n<pre><code>var headers = {\n    login: &apos;mylogin&apos;,\n    passcode: &apos;mypasscode&apos;,\n    // additional header\n    &apos;client-id&apos;: &apos;my-client-id&apos;\n};\nclient.connect(headers, connectCallback);\n</code></pre><p>断开连接时，调用<code>disconnect</code>方法，这个方法也是异步的，当断开成功后会接收一个额外的回调函数的参数。如下所示。<br>    client.disconnect(function() {<br>        alert(“See you next time!”);<br>    };</p>\n<p>当客户端与服务端断开连接，就不会再发送或接收消息了。</p>\n<h3 id=\"Heart-beating\"><a href=\"#Heart-beating\" class=\"headerlink\" title=\"Heart-beating\"></a>Heart-beating</h3><p>如果STOMP broker(代理)接收STOMP 1.1版本的帧，<code>heart-beating</code>是默认启用的。<code>heart-beating</code>也就是频率，<code>incoming</code>是接收频率，<code>outgoing</code>是发送频率。</p>\n<p>通过改变<code>incoming</code>和<code>outgoing</code>可以更改客户端的<code>heart-beating</code>(默认为10000ms)：</p>\n<pre><code>client.heartbeat.outgoing = 20000; \n// client will send heartbeats every 20000ms\nclient.heartbeat.incoming = 0;\n// client does not want to receive heartbeats\n// from the server\n</code></pre><p><code>heart-beating</code>是利用<code>window.setInterval()</code>去规律地发送<code>heart-beats</code>或者检查服务端的<code>heart-beats</code>。</p>\n<h3 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h3><p>当客户端与服务端连接成功后，可以调用<code>send()</code>来发送STOMP消息。这个方法必须有一个参数，用来描述对应的STOMP的目的地。另外可以有两个可选的参数：<code>headers</code>，<code>object</code>类型包含额外的信息头部；<code>body</code>，一个String类型的参数。</p>\n<pre><code>client.send(&quot;/queue/test&quot;, {priority: 9}, &quot;Hello, STOMP&quot;);\n</code></pre><p>client会发送一个STOMP发送帧给<code>/queue/test</code>，这个帧包含一个设置了<code>priority</code>为9的<code>header</code>和内容为“Hello, STOMP”的<code>body</code>。</p>\n<p>如果你想发送一个有<code>body</code>的信息，也必须传递<code>headers</code>参数。如果没有<code>headers</code>需要传递，那么就传<code>{}</code>即可，如下所示：</p>\n<pre><code>client.send(destination, {}, body);\n</code></pre><h3 id=\"订阅（Subscribe）和接收（receive）消息\"><a href=\"#订阅（Subscribe）和接收（receive）消息\" class=\"headerlink\" title=\"订阅（Subscribe）和接收（receive）消息\"></a>订阅（Subscribe）和接收（receive）消息</h3><p>为了在浏览器中接收消息，STOMP客户端必须先订阅一个目的地<code>destination</code>。</p>\n<p>你可以使用<code>subscribe()</code>去订阅。这个方法有2个必需的参数：目的地(<code>destination</code>)，回调函数(<code>callback</code>)；还有一个可选的参数<code>headers</code>。其中<code>destination</code>是String类型，对应目的地，回调函数是伴随着一个参数的<code>function</code>类型。</p>\n<pre><code>var subscription = client.subscribe(&quot;/queue/test&quot;, callback);\n</code></pre><p><code>subscribe()</code>方法返回一个<code>object</code>，这个<code>object</code>包含一个<code>id</code>属性，对应这个这个客户端的订阅ID。而<code>unsubscribe()</code>可以用来取消客户端对这个目的地<code>destination</code>的订阅。</p>\n<p>默认情况下，如果没有在<code>headers</code>额外添加，这个库会默认构建一个独一无二的<code>ID</code>。在传递<code>headers</code>这个参数时，可以使用你自己的<code>ID</code>:</p>\n<pre><code>var mysubid = &apos;...&apos;;\nvar subscription = client.subscribe(destination, callback, { id: mysubid });\n</code></pre><p>这个客户端会向服务端发送一个STOMP订阅帧（<code>SUBSCRIBE frame</code>）并注册回调事件。每次服务端向客户端发送消息时，客户端都会轮流调用回调函数，参数为对应消息的STOMP帧对象（<code>Frame object</code>）。如下所示：</p>\n<pre><code>callback = function(message) {\n    // called when the client receives a STOMP message from the server\n    if (message.body) {\n        alert(&quot;got message with body &quot; + message.body)\n    } else {\n        alert(&quot;got empty message&quot;);\n    }\n});\n</code></pre><p><code>subscribe()</code>方法，接受一个可选的<code>headers</code>参数用来标识附加的头部。</p>\n<pre><code>var headers = {ack: &apos;client&apos;, &apos;selector&apos;: &quot;location = &apos;Europe&apos;&quot;};\n\nclient.subscribe(&quot;/queue/test&quot;, message_callback, headers);\n</code></pre><p>这个客户端指定了它会确认接收的信息，只接收符合这个<code>selector : location = &#39;Europe&#39;</code>的消息。</p>\n<p>如果想让客户端订阅多个目的地，你可以在接收所有信息的时候调用相同的回调函数：</p>\n<pre><code>onmessage = function(message) {\n    // called every time the client receives a message\n}\nvar sub1 = client.subscribe(&quot;queue/test&quot;, onmessage);\nvar sub2 = client.subscribe(&quot;queue/another&quot;, onmessage)\n</code></pre><p>如果要中止接收消息，客户端可以在<code>subscribe()</code>返回的<code>object</code>对象调用<code>unsubscribe()</code>来结束接收。</p>\n<pre><code>var subscription = client.subscribe(...);\n\n...\n\nsubscription.unsubscribe();\n</code></pre><h3 id=\"支持JSON\"><a href=\"#支持JSON\" class=\"headerlink\" title=\"支持JSON\"></a>支持JSON</h3><p>STOMP消息的<code>body</code>必须为字符串。如果你需要发送/接收<code>JSON</code>对象，你可以使用<code>JSON.stringify()</code>和<code>JSON.parse()</code>去转换JSON对象。</p>\n<pre><code>var quote = {symbol: &apos;APPL&apos;, value: 195.46};\nclient.send(&quot;/topic/stocks&quot;, {}, JSON.stringify(quote));\n\nclient.subcribe(&quot;/topic/stocks&quot;, function(message) {\n    var quote = JSON.parse(message.body);\n    alert(quote.symbol + &quot; is at &quot; + quote.value);\n};\n</code></pre><h3 id=\"Acknowledgment-确认\"><a href=\"#Acknowledgment-确认\" class=\"headerlink\" title=\"Acknowledgment(确认)\"></a>Acknowledgment(确认)</h3><p>默认情况，在消息发送给客户端之前，服务端会自动确认（<code>acknowledged</code>）。</p>\n<p>客户端可以选择通过订阅一个目的地时设置一个<code>ack header</code>为<code>client</code>或<code>client-individual</code>来处理消息确认。</p>\n<p>在下面这个例子，客户端必须调用<code>message.ack()</code>来通知客户端它已经接收了消息。</p>\n<pre><code>var subscription = client.subscribe(&quot;/queue/test&quot;,\n    function(message) {\n        // do something with the message\n        ...\n        // and acknowledge it\n        message.ack();\n    },\n    {ack: &apos;client&apos;}\n);\n</code></pre><p><code>ack()</code>接受<code>headers</code>参数用来附加确认消息。例如，将消息作为事务(transaction)的一部分，当要求接收消息时其实代理（broker）已经将<code>ACK STOMP frame</code>处理了。</p>\n<pre><code>var tx = client.begin();\nmessage.ack({ transaction: tx.id, receipt: &apos;my-receipt&apos; });\ntx.commit();\n</code></pre><p><code>nack()</code>也可以用来通知STOMP 1.1.brokers（代理）：客户端不能消费这个消息。与<code>ack()</code>方法的参数相同。</p>\n<h3 id=\"事务-Transactions\"><a href=\"#事务-Transactions\" class=\"headerlink\" title=\"事务(Transactions)\"></a>事务(Transactions)</h3><p>可以在将消息的发送和确认接收放在一个事务中。</p>\n<p>客户端调用自身的<code>begin()</code>方法就可以开始启动事务了，<code>begin()</code>有一个可选的参数<code>transaction</code>，一个唯一的可标识事务的字符串。如果没有传递这个参数，那么库会自动构建一个。</p>\n<p>这个方法会返回一个object。这个对象有一个<code>id</code>属性对应这个事务的ID，还有两个方法：<br><code>commit()</code>提交事务<br><code>abort()</code>中止事务</p>\n<p>在一个事务中，客户端可以在发送/接受消息时指定transaction id来设置transaction。</p>\n<pre><code>// start the transaction\nvar tx = client.begin();\n// send the message in a transaction\nclient.send(&quot;/queue/test&quot;, {transaction: tx.id}, &quot;message in a transaction&quot;);\n// commit the transaction to effectively send the message\ntx.commit();\n</code></pre><p>如果你在调用<code>send()</code>方法发送消息的时候忘记添加transction header，那么这不会称为事务的一部分，这个消息会直接发送，不会等到事务完成后才发送。</p>\n<pre><code>var txid = &quot;unique_transaction_identifier&quot;;\n// start the transaction\nvar tx = client.begin();\n// oops! send the message outside the transaction\nclient.send(&quot;/queue/test&quot;, {}, &quot;I thought I was in a transaction!&quot;);\ntx.abort(); // Too late! the message has been sent\n</code></pre><h3 id=\"调试（Debug）\"><a href=\"#调试（Debug）\" class=\"headerlink\" title=\"调试（Debug）\"></a>调试（Debug）</h3><p>有一些测试代码能有助于你知道库发送或接收的是什么，从而来调试程序。</p>\n<p>客户端可以将其<code>debug</code>属性设置为一个函数，传递一个字符串参数去观察库所有的debug语句。</p>\n<pre><code>client.debug = function(str) {\n    // append the debug log to a #debug div somewhere in the page using JQuery:\n    $(&quot;#debug&quot;).append(str + &quot;\\n&quot;);\n};\n</code></pre><p>默认情况，debug消息会被记录在在浏览器的控制台。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前两天整理了<code>websocket</code>的资料，今天就把上次没说完的<code>Stomp.js</code>好好说一说~<br>Stomp Over Webscoket参考文档：<a href=\"http://jmesnil.net/stomp-websocket/doc/\">http://jmesnil.net/stomp-websocket/doc/</a><br>本文为参考文档的部分翻译，技术不佳，如有失误请指正。</p>\n<h2 id=\"什么是Stomp\"><a href=\"#什么是Stomp\" class=\"headerlink\" title=\"什么是Stomp\"></a>什么是Stomp</h2><blockquote>\n<p>STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p>\n</blockquote>\n<h2 id=\"协议支持\"><a href=\"#协议支持\" class=\"headerlink\" title=\"协议支持\"></a>协议支持</h2><p>该库支持多种版本的STOMP协议：</p>\n<ul>\n<li><a href=\"http://stomp.github.io/stomp-specification-1.0.html\">STOMP 1.0</a></li>\n<li><a href=\"http://stomp.github.io/stomp-specification-1.1.html\">STOMP 1.1</a>(包含 heart-beating)</li>\n</ul>\n<h2 id=\"下载STOMP-JS\"><a href=\"#下载STOMP-JS\" class=\"headerlink\" title=\"下载STOMP.JS\"></a>下载STOMP.JS</h2><p>你可以下载 <a href=\"https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.js\">stomp.js</a> 并在你自己的WEB应用程序中使用。<br>提供了<a href=\"https://raw.githubusercontent.com/jmesnil/stomp-websocket/master/lib/stomp.min.js\">多种版本</a>也可以直接用于生产。<br>这个js文件由CoffeeScript文件构建，请查看<a href=\"http://jmesnil.net/stomp-websocket/doc/#contribute\">Contribute</a>部分下载源码或浏览 <a href=\"http://jmesnil.net/stomp-websocket/doc/stomp.html\">annote source code</a></p>\n<h2 id=\"服务端要求\"><a href=\"#服务端要求\" class=\"headerlink\" title=\"服务端要求\"></a>服务端要求</h2><p>这个库不是单纯的Stomp 客户端。它旨在WebSockets上运行而不是TCP。基本上，WebSocket协议需要在浏览器客户端和服务端之间进行握手，确保浏览器的“same-origin”（同源）安全模型仍然有效。</p>\n<p>这意味着该库不能连接常规的STOMP 代理，因为Websocket初始化的握手不是STOMP协议的一部分，他们不能理解从而会拒绝连接。</p>\n<p>有一些正在进行的工作添加了WebSocket支持STOMP代理，从而他们可以在WebSocket协议上接受STOMP连接。</p>\n<h3 id=\"HornetQ\"><a href=\"#HornetQ\" class=\"headerlink\" title=\"HornetQ\"></a>HornetQ</h3><p>HornetQ是由Red Hat and JBoss创立的开源消息系统.</p>\n<p>要使HornetQ支持STOMP Over WebSocket，下载最新版本并按照下列步骤执行：</p>\n<pre><code>$ cd hornetq-x.y.z/examples/jms/stomp-websockets\n$ mvn clean install\n...\nINFO: HQ221020: Started Netty Acceptor version 3.6.2.Final-c0d783c         localhost:61614 for STOMP_WS protocol\nApr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl$SharedStoreLiveActivation run\nINFO: HQ221007: Server is now live\nApr 15, 2013 1:15:33 PM org.hornetq.core.server.impl.HornetQServerImpl start\nINFO: HQ221001: HornetQ Server version 2.3.0.CR2 (black&apos;n&apos;yellow2, 123) [c9e29e45-a5bd-11e2-976a-b3fef7ceb5df]\n</code></pre><p>此时HornetQ已经开启了，并且61614在端口监听STOMP over WebSocket<br>它从URL为ws://localhost:61614/stomp 接受WebSocket的连接。</p>\n<p><a href=\"http://docs.jboss.org/hornetq/2.3.0.CR2/docs/user-manual/html/interoperability.html#stomp.websockets\">配置文档</a></p>\n<h3 id=\"ActiveMQ\"><a href=\"#ActiveMQ\" class=\"headerlink\" title=\"ActiveMQ\"></a>ActiveMQ</h3><p><a href=\"http://activemq.apache.org/websockets.html\">配置文档</a></p>\n<h3 id=\"ActiveMQ-Apollo\"><a href=\"#ActiveMQ-Apollo\" class=\"headerlink\" title=\"ActiveMQ Apollo\"></a>ActiveMQ Apollo</h3><p><a href=\"http://activemq.apache.org/apollo/documentation/user-manual.html#WebSocket_Transports\">配置文档</a></p>\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p><a href=\"RabbitMQ\">配置文档</a></p>\n<h3 id=\"Stilts-amp-Torquebox\"><a href=\"#Stilts-amp-Torquebox\" class=\"headerlink\" title=\"Stilts &amp; Torquebox\"></a>Stilts &amp; Torquebox</h3><p><a href=\"http://stilts.projectodd.org/\">Stilts</a> 是一个STOMP原生的消息框架。</p>\n<p><a href=\"http://torquebox.org/\">TorqueBox</a> 使用Stilts去提供它的<a href=\"http://torquebox.org/documentation/2.1.2/stomp.html\">Websockets and STOMP stack</a>。</p>\n<h2 id=\"Stomp-API\"><a href=\"#Stomp-API\" class=\"headerlink\" title=\"Stomp API\"></a>Stomp API</h2><h3 id=\"STOMP-帧（Frame）\"><a href=\"#STOMP-帧（Frame）\" class=\"headerlink\" title=\"STOMP 帧（Frame）\"></a>STOMP 帧（Frame）</h3><p>STOMP Over WebSocket 提供了一个直接从<code>Stomp Frame</code>映射到 Javascript 对象的方式。<br><code>Stomp Frame</code>帧格式如下：</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:right\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">name of the frame (“CONNECT”, “SEND”, etc.)</td>\n</tr>\n<tr>\n<td>headers</td>\n<td style=\"text-align:center\">JavaScript object    </td>\n</tr>\n<tr>\n<td>body</td>\n<td style=\"text-align:center\">String</td>\n</tr>\n</tbody>\n</table>\n<p><code>command</code>和<code>headers</code>属性始终会被定义，不过当这个<code>frame</code>没有头部时，<code>headers</code>可以为空。若这个<code>frame</code>没有<code>body</code>，<code>body</code>的值可以为<code>null</code>。</p>\n<h3 id=\"创建STOMP客户端\"><a href=\"#创建STOMP客户端\" class=\"headerlink\" title=\"创建STOMP客户端\"></a>创建<code>STOMP</code>客户端</h3><h4 id=\"在web浏览器中使用普通的Web-Socket\"><a href=\"#在web浏览器中使用普通的Web-Socket\" class=\"headerlink\" title=\"在web浏览器中使用普通的Web Socket\"></a>在web浏览器中使用普通的Web Socket</h4><p>STOMP javascript 客户端会使用<code>ws://</code>的URL与STOMP 服务端进行交互。</p>\n<p>为了创建一个STOMP客户端js对象，你需要使用<code>Stomp.client(url)</code>，而这个URL连接着服务端的WebSocket的代理：</p>\n<pre><code>var url = &quot;ws://localhost:61614/stomp&quot;;\nvar client = Stomp.client(url);\n</code></pre><p><code>Stomp.client(url, protocols)</code>也可以用来覆盖默认的<code>subprotocols</code>。第二个参数可以是一个字符串或一个字符串数组去指定多个<code>subprotocols</code>。</p>\n<h4 id=\"在web浏览器中使用定制的WebSocket\"><a href=\"#在web浏览器中使用定制的WebSocket\" class=\"headerlink\" title=\"在web浏览器中使用定制的WebSocket\"></a>在web浏览器中使用定制的WebSocket</h4><p>浏览器提供了不同的WebSocket的协议，一些老的浏览器不支持WebSocket的脚本或者使用别的名字。默认下，<code>stomp.js</code>会使用浏览器原生的<code>WebSocket class</code>去创建WebSocket。</p>\n<p>但是利用<code>Stomp.over(ws)</code>这个方法可以使用其他类型的WebSockets。这个方法得到一个满足WebSocket定义的对象。</p>\n<p>例如，可以使用由<code>SockJS</code>实现的Websocket：</p>\n<pre><code>&lt;script src=&quot;http://cdn.sockjs.org/sockjs-0.3.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    // use SockJS implementation instead of the browser&apos;s native implementation\n    var ws = new SockJS(url);\n    var client = Stomp.over(ws);\n    [...]\n&lt;/script&gt;\n</code></pre><p>如果使用原生的Websockets就使用<code>Stomp.client(url)</code>，如果需要使用其他类型的Websocket（例如由SockJS包装的Websocket）就使用<code>Stomp.over(ws)</code>。</p>\n<p>除了初始化有差别，Stomp API在这两种方式下是相同的。</p>\n<h4 id=\"在node-js程序中\"><a href=\"#在node-js程序中\" class=\"headerlink\" title=\"在node.js程序中\"></a>在<code>node.js</code>程序中</h4><p>通过<code>stompjs npm package</code>同样也可以在<code>node.js</code>程序中使用这个库。</p>\n<pre><code>$ npm install stompjs\n</code></pre><p>在node.js<code>app</code>中, <code>require</code>这个模块:</p>\n<pre><code>var Stomp = require(&apos;stompjs&apos;);\n</code></pre><p>为了与建立在TCP socket的STOMP-broker连接，使用<code>Stomp.overTCP(host, port)</code>方法。</p>\n<pre><code>var client = Stomp.overTCP(&apos;localhost&apos;, 61613);\n</code></pre><p>为了与建立在Web Socket的STOMP broker连接，使用<code>Stomp.overWS(url)</code>方法。</p>\n<pre><code>var client = Stomp.overWS(&apos;ws://localhost:61614/stomp&apos;);\n</code></pre><p>除了初始化不同，无论是浏览器还是node.js环境下，Stomp API都是相同的。</p>\n<h3 id=\"连接服务端\"><a href=\"#连接服务端\" class=\"headerlink\" title=\"连接服务端\"></a>连接服务端</h3><p>一旦Stomp 客户端建立了，必须调用它的<code>connect()</code>方法去连接，从而Stomp服务端进行验证。这个方法需要两个参数，用户的登录和密码凭证。</p>\n<p>这种情况下，客户端会使用Websocket打开连接，并发送一个<code>CONNECT frame</code>。</p>\n<p>这个连接是异步进行的：你不能保证当这个方法返回时是有效连接的。为了知道连接的结果，你需要一个回调函数。</p>\n<pre><code>var connect_callback = function() {\n    // called back after the client is connected and authenticated to the STOMP server\n};\n</code></pre><p>但是如果连接失败会发生什么呢？<code>connect()</code>方法接受一个可选的参数(<code>error_callback</code>)，当客户端不能连接上服务端时，这个回调函数<code>error_callback</code>会被调用，该函数的参数为对应的错误对象。</p>\n<pre><code>var error_callback = function(error) {\n    // display the error&apos;s message header:\n    alert(error.headers.message);\n};\n</code></pre><p>在大多数情况下，<code>connect()</code>方法可接受不同数量的参数来提供简单的API：</p>\n<pre><code>client.connect(login, passcode, connectCallback);\nclient.connect(login, passcode, connectCallback, errorCallback);\nclient.connect(login, passcode, connectCallback, errorCallback, host);\n</code></pre><p><code>login</code>和<code>passcode</code>是strings，<code>connectCallback</code>和<code>errorCallback</code>则是functions。（有些brokers（代理）还需要传递一个<code>host</code>（String类型）参数。）</p>\n<p>如果你需要附加一个<code>headers</code>头部，<code>connect</code>方法还接受其他两种形式的参数：</p>\n<pre><code>client.connect(headers, connectCallback);\nclient.connect(headers, connectCallback, errorCallback);\n</code></pre><p><code>header</code>是<code>map</code>形式，<code>connectCallback</code>和<code>errorCallback</code>为functions。</p>\n<p>需要注意：如果你使用上述这种方式，你需要自行在<code>headers</code>添加<code>login</code>,<code>passcode</code>（甚至<code>host</code>）：</p>\n<pre><code>var headers = {\n    login: &apos;mylogin&apos;,\n    passcode: &apos;mypasscode&apos;,\n    // additional header\n    &apos;client-id&apos;: &apos;my-client-id&apos;\n};\nclient.connect(headers, connectCallback);\n</code></pre><p>断开连接时，调用<code>disconnect</code>方法，这个方法也是异步的，当断开成功后会接收一个额外的回调函数的参数。如下所示。<br>    client.disconnect(function() {<br>        alert(“See you next time!”);<br>    };</p>\n<p>当客户端与服务端断开连接，就不会再发送或接收消息了。</p>\n<h3 id=\"Heart-beating\"><a href=\"#Heart-beating\" class=\"headerlink\" title=\"Heart-beating\"></a>Heart-beating</h3><p>如果STOMP broker(代理)接收STOMP 1.1版本的帧，<code>heart-beating</code>是默认启用的。<code>heart-beating</code>也就是频率，<code>incoming</code>是接收频率，<code>outgoing</code>是发送频率。</p>\n<p>通过改变<code>incoming</code>和<code>outgoing</code>可以更改客户端的<code>heart-beating</code>(默认为10000ms)：</p>\n<pre><code>client.heartbeat.outgoing = 20000; \n// client will send heartbeats every 20000ms\nclient.heartbeat.incoming = 0;\n// client does not want to receive heartbeats\n// from the server\n</code></pre><p><code>heart-beating</code>是利用<code>window.setInterval()</code>去规律地发送<code>heart-beats</code>或者检查服务端的<code>heart-beats</code>。</p>\n<h3 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h3><p>当客户端与服务端连接成功后，可以调用<code>send()</code>来发送STOMP消息。这个方法必须有一个参数，用来描述对应的STOMP的目的地。另外可以有两个可选的参数：<code>headers</code>，<code>object</code>类型包含额外的信息头部；<code>body</code>，一个String类型的参数。</p>\n<pre><code>client.send(&quot;/queue/test&quot;, {priority: 9}, &quot;Hello, STOMP&quot;);\n</code></pre><p>client会发送一个STOMP发送帧给<code>/queue/test</code>，这个帧包含一个设置了<code>priority</code>为9的<code>header</code>和内容为“Hello, STOMP”的<code>body</code>。</p>\n<p>如果你想发送一个有<code>body</code>的信息，也必须传递<code>headers</code>参数。如果没有<code>headers</code>需要传递，那么就传<code>{}</code>即可，如下所示：</p>\n<pre><code>client.send(destination, {}, body);\n</code></pre><h3 id=\"订阅（Subscribe）和接收（receive）消息\"><a href=\"#订阅（Subscribe）和接收（receive）消息\" class=\"headerlink\" title=\"订阅（Subscribe）和接收（receive）消息\"></a>订阅（Subscribe）和接收（receive）消息</h3><p>为了在浏览器中接收消息，STOMP客户端必须先订阅一个目的地<code>destination</code>。</p>\n<p>你可以使用<code>subscribe()</code>去订阅。这个方法有2个必需的参数：目的地(<code>destination</code>)，回调函数(<code>callback</code>)；还有一个可选的参数<code>headers</code>。其中<code>destination</code>是String类型，对应目的地，回调函数是伴随着一个参数的<code>function</code>类型。</p>\n<pre><code>var subscription = client.subscribe(&quot;/queue/test&quot;, callback);\n</code></pre><p><code>subscribe()</code>方法返回一个<code>object</code>，这个<code>object</code>包含一个<code>id</code>属性，对应这个这个客户端的订阅ID。而<code>unsubscribe()</code>可以用来取消客户端对这个目的地<code>destination</code>的订阅。</p>\n<p>默认情况下，如果没有在<code>headers</code>额外添加，这个库会默认构建一个独一无二的<code>ID</code>。在传递<code>headers</code>这个参数时，可以使用你自己的<code>ID</code>:</p>\n<pre><code>var mysubid = &apos;...&apos;;\nvar subscription = client.subscribe(destination, callback, { id: mysubid });\n</code></pre><p>这个客户端会向服务端发送一个STOMP订阅帧（<code>SUBSCRIBE frame</code>）并注册回调事件。每次服务端向客户端发送消息时，客户端都会轮流调用回调函数，参数为对应消息的STOMP帧对象（<code>Frame object</code>）。如下所示：</p>\n<pre><code>callback = function(message) {\n    // called when the client receives a STOMP message from the server\n    if (message.body) {\n        alert(&quot;got message with body &quot; + message.body)\n    } else {\n        alert(&quot;got empty message&quot;);\n    }\n});\n</code></pre><p><code>subscribe()</code>方法，接受一个可选的<code>headers</code>参数用来标识附加的头部。</p>\n<pre><code>var headers = {ack: &apos;client&apos;, &apos;selector&apos;: &quot;location = &apos;Europe&apos;&quot;};\n\nclient.subscribe(&quot;/queue/test&quot;, message_callback, headers);\n</code></pre><p>这个客户端指定了它会确认接收的信息，只接收符合这个<code>selector : location = &#39;Europe&#39;</code>的消息。</p>\n<p>如果想让客户端订阅多个目的地，你可以在接收所有信息的时候调用相同的回调函数：</p>\n<pre><code>onmessage = function(message) {\n    // called every time the client receives a message\n}\nvar sub1 = client.subscribe(&quot;queue/test&quot;, onmessage);\nvar sub2 = client.subscribe(&quot;queue/another&quot;, onmessage)\n</code></pre><p>如果要中止接收消息，客户端可以在<code>subscribe()</code>返回的<code>object</code>对象调用<code>unsubscribe()</code>来结束接收。</p>\n<pre><code>var subscription = client.subscribe(...);\n\n...\n\nsubscription.unsubscribe();\n</code></pre><h3 id=\"支持JSON\"><a href=\"#支持JSON\" class=\"headerlink\" title=\"支持JSON\"></a>支持JSON</h3><p>STOMP消息的<code>body</code>必须为字符串。如果你需要发送/接收<code>JSON</code>对象，你可以使用<code>JSON.stringify()</code>和<code>JSON.parse()</code>去转换JSON对象。</p>\n<pre><code>var quote = {symbol: &apos;APPL&apos;, value: 195.46};\nclient.send(&quot;/topic/stocks&quot;, {}, JSON.stringify(quote));\n\nclient.subcribe(&quot;/topic/stocks&quot;, function(message) {\n    var quote = JSON.parse(message.body);\n    alert(quote.symbol + &quot; is at &quot; + quote.value);\n};\n</code></pre><h3 id=\"Acknowledgment-确认\"><a href=\"#Acknowledgment-确认\" class=\"headerlink\" title=\"Acknowledgment(确认)\"></a>Acknowledgment(确认)</h3><p>默认情况，在消息发送给客户端之前，服务端会自动确认（<code>acknowledged</code>）。</p>\n<p>客户端可以选择通过订阅一个目的地时设置一个<code>ack header</code>为<code>client</code>或<code>client-individual</code>来处理消息确认。</p>\n<p>在下面这个例子，客户端必须调用<code>message.ack()</code>来通知客户端它已经接收了消息。</p>\n<pre><code>var subscription = client.subscribe(&quot;/queue/test&quot;,\n    function(message) {\n        // do something with the message\n        ...\n        // and acknowledge it\n        message.ack();\n    },\n    {ack: &apos;client&apos;}\n);\n</code></pre><p><code>ack()</code>接受<code>headers</code>参数用来附加确认消息。例如，将消息作为事务(transaction)的一部分，当要求接收消息时其实代理（broker）已经将<code>ACK STOMP frame</code>处理了。</p>\n<pre><code>var tx = client.begin();\nmessage.ack({ transaction: tx.id, receipt: &apos;my-receipt&apos; });\ntx.commit();\n</code></pre><p><code>nack()</code>也可以用来通知STOMP 1.1.brokers（代理）：客户端不能消费这个消息。与<code>ack()</code>方法的参数相同。</p>\n<h3 id=\"事务-Transactions\"><a href=\"#事务-Transactions\" class=\"headerlink\" title=\"事务(Transactions)\"></a>事务(Transactions)</h3><p>可以在将消息的发送和确认接收放在一个事务中。</p>\n<p>客户端调用自身的<code>begin()</code>方法就可以开始启动事务了，<code>begin()</code>有一个可选的参数<code>transaction</code>，一个唯一的可标识事务的字符串。如果没有传递这个参数，那么库会自动构建一个。</p>\n<p>这个方法会返回一个object。这个对象有一个<code>id</code>属性对应这个事务的ID，还有两个方法：<br><code>commit()</code>提交事务<br><code>abort()</code>中止事务</p>\n<p>在一个事务中，客户端可以在发送/接受消息时指定transaction id来设置transaction。</p>\n<pre><code>// start the transaction\nvar tx = client.begin();\n// send the message in a transaction\nclient.send(&quot;/queue/test&quot;, {transaction: tx.id}, &quot;message in a transaction&quot;);\n// commit the transaction to effectively send the message\ntx.commit();\n</code></pre><p>如果你在调用<code>send()</code>方法发送消息的时候忘记添加transction header，那么这不会称为事务的一部分，这个消息会直接发送，不会等到事务完成后才发送。</p>\n<pre><code>var txid = &quot;unique_transaction_identifier&quot;;\n// start the transaction\nvar tx = client.begin();\n// oops! send the message outside the transaction\nclient.send(&quot;/queue/test&quot;, {}, &quot;I thought I was in a transaction!&quot;);\ntx.abort(); // Too late! the message has been sent\n</code></pre><h3 id=\"调试（Debug）\"><a href=\"#调试（Debug）\" class=\"headerlink\" title=\"调试（Debug）\"></a>调试（Debug）</h3><p>有一些测试代码能有助于你知道库发送或接收的是什么，从而来调试程序。</p>\n<p>客户端可以将其<code>debug</code>属性设置为一个函数，传递一个字符串参数去观察库所有的debug语句。</p>\n<pre><code>client.debug = function(str) {\n    // append the debug log to a #debug div somewhere in the page using JQuery:\n    $(&quot;#debug&quot;).append(str + &quot;\\n&quot;);\n};\n</code></pre><p>默认情况，debug消息会被记录在在浏览器的控制台。</p>\n"},{"title":"关于跨域","date":"2016-09-14T09:57:56.000Z","_content":"\n# 前言\n转眼就是秋招季啦。经历了几场笔试面试，屡次被问到关于如何实现跨域。老实说，之前都是纸上谈兵，也没有项目需要跨域，甚至觉得这个东西没什么意义。直到今天项目中遇到了跨域问题，看了不少资料才理解跨域的普遍性和意义。特写此篇文章整理自己所得。\n\n\n# 什么是跨域\n一般来说，如果你在开发中需要进行跨域操作（从一个非同源网站发送请求获取数据），一般而言，你在浏览器控制台看到的结果为：\n\n`XMLHttpRequest cannot load http://external-domain/service. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://my-domain’ is therefore not allowed access.`\n\n\n## 同源策略\n说到跨域就不得不提“同源策略”。   \n同源策略是Web浏览器针对恶意的代码所进行的措施，为了防止世界被破坏，为了保护世界的和平，Web浏览器，采取了同源策略，只允许脚本读取和所属文档来源相同的窗口和文档的属性。\n那么，怎么判断文档来源是否相同呢？很简单，看三个部分： **协议**、**主机**、**端口号**。只要其中一个部分不同，则不同源。\n\n## 跨域的应用场景\n1. 来自 `home.example.com` 的文档里的脚本读取 `developer.example.com`载入的文档的属性。\n2. 来自 `home.example.com` 的文档里的脚本读取 `text.segmentfault.com`载入的文档的属性\n\n# 如何跨域\n## 设置`domain`属性\n针对上述应用场景的第一种情况，可以设置`Document`对象的`domain`属性。但是设置时使用的字符串必须具有有效的域前缀或者它本身。   \nPS: `domain`值中必须有一个点号。   \nPS: `domain`不能由松散的变为紧绷的。\n\n    //初始值 \"home.example.com\" \n    document.domain = \"example.com\"; //OK\n    document.domain = \"home.example.com\"; //NO,不能由松散变紧绷\n    document.domain = \"example\"; //NO，必须有一个点号\n    document.domain = \"another.com\"; //NO， 必须是有效域前缀或其本身\n    \n## JSONP\nJSONP由两部分组成： 回调函数和数据。\n原理：通过动态`<script>`元素来使用，可以通过`src`属性指定一个跨域URL。\n\n    function handler(data){\n        console.log(data);\n    }\n    \n    var script = document.createElement(\"script\");\n    script.src = \"https://segmentfault.com/json/?callback=handler\";\n    document.body.insertBefore(script, document.body.firstChild);\n    \n除此之外，还可以利用`jQuery`来实现。\n\n\tfunction jsonCallback(json){\n\t  console.log(json);\n\t}\n\t\n\t$.ajax({\n\t  url: \"http://run.plnkr.co/plunks/v8xyYN64V4nqCshgjKms/data-2.json\",\n\t  dataType: \"jsonp\"\n\t});\n\n运行结果如下：\n![结果](http://oao50r2ex.bkt.clouddn.com/image/blog0918_1.png)\n\n某些API(例如[Github API](https://developer.github.com/v3/#json-p-callbacks \"Github API\"))允许你定义一个回调函数，当请求返回时执行该函数。\n\n\tfunction logResults(json){\n\t  console.log(json);\n\t}\n\t\n\t$.ajax({\n\t  url: \"https://api.github.com/users/jeresig\",\n\t  dataType: \"jsonp\",\n\t  jsonpCallback: \"logResults\"\n\t});\n\n运行结果如下：   \n![结果](http://oao50r2ex.bkt.clouddn.com/image/blog0918_2.png)\n    \n优点:   \n1. 兼容性强。   \n2. 简单易用，能之间访问响应文本，支持浏览器与服务器之间双向通信。\n\n不足：   \n1. 只能用`GET`方法，不能使用`POST`方法   \n2. 无法判断请求是否失败，没有错误处理。\n\n\n## 跨域资源共享CORS\n需要浏览器和服务器同时支持。   \n原理：使用`\"Origin:\"`请求头和`\"Access-Control-Allow-Origin\"`响应头来扩展HTTP。其实就是利用新的HTTP头部来进行浏览器与服务器之间的沟通。\n\n针对前端代码而言，变化的地方在于**相对路径需改为绝对路径**。\n\n    //以前的方式\n    var xhr = new XMLHttpRequest(); \n    xhr.open(\"GET\", \"/test\", true); \n    xhr.send(); \n    //CORS方式\n    var xhr = new XMLHttpRequest(); \n    xhr.open(\"GET\", \"http://segmentfault.com/test\", true); \n    xhr.send(); \n    \n针对服务器代码而言，需要设置`Access-Control-Allow-Origin`，显式地列出源或使用通配符来匹配所有源。\n\n优点：   \n1. CORS支持所有类型的HTTP请求。   \n2. 使用CORS，开发者可以使用普通的`XMLHttpRequest`发起请求和获得数据   \n\n\n不足：   \n1. 不能发送和接收`cookie`   \n**更新：**服务端可以通过设置`Access-Control-Allow-Credentials`该字段来表示是否允许发送Cookie。发送ajax请求时，需配置`withCredentials`属性。(感谢sf小伙伴@lloyd_zhou 指正)\n具体可查看   [阮一峰大大的博客][6]。   \n2. 不能使用`setRequestHeader()`设置自定义头部   \n3. 兼容IE10+\n\n## postMessage\n`postMessge()`是HTML5新定义的通信机制。所有主流浏览器都已实现。该API定义在Window对象。\n\n    otherWindow.postMessage(message, targetOrigin);\n\n`message`: 要传递的消息。   \n`targetOrigin`: 指定**目标窗口**的源。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；\n\n当源匹配时，调用`postMessage()`方法时，目标窗口的Window对象会触发一个`message`事件。在进行监听事件时，应先判断`origin`属性，忽略来自未知源的消息。\n\n    //<http://example.com:8080>上的脚本:\n    var popup = window.open(...popup details...);\n    popup.postMessage(\"The user is 'bob' and the password is 'secret'\",\n                  \"https://secure.example.net\");  \n    popup.postMessage(\"hello there!\", \"http://example.org\");\n    \n    function receiveMessage(event)\n    {\n      if (event.origin !== \"http://example.org\")\n        return;\n      // event.source is popup\n      // event.data is \"hi there yourself!  the secret response is: rheeeeet!\"【见下面一段代码可知】\n    }\n    window.addEventListener(\"message\", receiveMessage, false);\n    \n针对上面的脚本进行接受数据的操作：\n\n    /*\n     * popup的脚本，运行在<http://example.org>:\n     */\n    \n    //当postMessage后触发的监听事件\n    function receiveMessage(event)\n    {\n      //先判断源\n      if (event.origin !== \"http://example.com:8080\")\n        return;\n    \n      // event.source：window.opener\n      // event.data：\"hello there!\"\n    \n      event.source.postMessage(\"hi there yourself!  the secret response \" +\n                               \"is: rheeeeet!\",\n                               event.origin);\n    }\n    \n    window.addEventListener(\"message\", receiveMessage, false);     \n\n# 后续\n收到了很多小伙伴的建议和指正，不胜感激，我会慢慢丰富这篇文章的内容的。请多多指教~\n\n# 参考文章\n1. [前端跨域请求原理及实践][1]\n2. [Window.postMessage()|MDN][2]\n3. [老生常谈的跨域处理][3]\n4. [JavaScript跨域问题总结][4]\n5. [实现跨域的几种方式][5]\n6. [jQuery’s JSONP Explained with Examples][7]\n\n\n  [1]: http://www.tuicool.com/articles/YRFRrmb\n  [2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n  [3]: http://www.tuicool.com/articles/zEZJzm2\n  [4]: http://www.tuicool.com/articles/A7Ff2iV\n  [5]: http://www.tuicool.com/articles/JrMFbiY\n  [6]: http://www.ruanyifeng.com/blog/2016/04/cors.html\n  [7]: https://www.sitepoint.com/jsonp-examples/","source":"_posts/cross-domain.md","raw":"---\ntitle: 关于跨域\ndate: 2016-09-14 17:57:56\ncategories: 前端开发\ntags: [javascript, 跨域]\n---\n\n# 前言\n转眼就是秋招季啦。经历了几场笔试面试，屡次被问到关于如何实现跨域。老实说，之前都是纸上谈兵，也没有项目需要跨域，甚至觉得这个东西没什么意义。直到今天项目中遇到了跨域问题，看了不少资料才理解跨域的普遍性和意义。特写此篇文章整理自己所得。\n\n\n# 什么是跨域\n一般来说，如果你在开发中需要进行跨域操作（从一个非同源网站发送请求获取数据），一般而言，你在浏览器控制台看到的结果为：\n\n`XMLHttpRequest cannot load http://external-domain/service. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://my-domain’ is therefore not allowed access.`\n\n\n## 同源策略\n说到跨域就不得不提“同源策略”。   \n同源策略是Web浏览器针对恶意的代码所进行的措施，为了防止世界被破坏，为了保护世界的和平，Web浏览器，采取了同源策略，只允许脚本读取和所属文档来源相同的窗口和文档的属性。\n那么，怎么判断文档来源是否相同呢？很简单，看三个部分： **协议**、**主机**、**端口号**。只要其中一个部分不同，则不同源。\n\n## 跨域的应用场景\n1. 来自 `home.example.com` 的文档里的脚本读取 `developer.example.com`载入的文档的属性。\n2. 来自 `home.example.com` 的文档里的脚本读取 `text.segmentfault.com`载入的文档的属性\n\n# 如何跨域\n## 设置`domain`属性\n针对上述应用场景的第一种情况，可以设置`Document`对象的`domain`属性。但是设置时使用的字符串必须具有有效的域前缀或者它本身。   \nPS: `domain`值中必须有一个点号。   \nPS: `domain`不能由松散的变为紧绷的。\n\n    //初始值 \"home.example.com\" \n    document.domain = \"example.com\"; //OK\n    document.domain = \"home.example.com\"; //NO,不能由松散变紧绷\n    document.domain = \"example\"; //NO，必须有一个点号\n    document.domain = \"another.com\"; //NO， 必须是有效域前缀或其本身\n    \n## JSONP\nJSONP由两部分组成： 回调函数和数据。\n原理：通过动态`<script>`元素来使用，可以通过`src`属性指定一个跨域URL。\n\n    function handler(data){\n        console.log(data);\n    }\n    \n    var script = document.createElement(\"script\");\n    script.src = \"https://segmentfault.com/json/?callback=handler\";\n    document.body.insertBefore(script, document.body.firstChild);\n    \n除此之外，还可以利用`jQuery`来实现。\n\n\tfunction jsonCallback(json){\n\t  console.log(json);\n\t}\n\t\n\t$.ajax({\n\t  url: \"http://run.plnkr.co/plunks/v8xyYN64V4nqCshgjKms/data-2.json\",\n\t  dataType: \"jsonp\"\n\t});\n\n运行结果如下：\n![结果](http://oao50r2ex.bkt.clouddn.com/image/blog0918_1.png)\n\n某些API(例如[Github API](https://developer.github.com/v3/#json-p-callbacks \"Github API\"))允许你定义一个回调函数，当请求返回时执行该函数。\n\n\tfunction logResults(json){\n\t  console.log(json);\n\t}\n\t\n\t$.ajax({\n\t  url: \"https://api.github.com/users/jeresig\",\n\t  dataType: \"jsonp\",\n\t  jsonpCallback: \"logResults\"\n\t});\n\n运行结果如下：   \n![结果](http://oao50r2ex.bkt.clouddn.com/image/blog0918_2.png)\n    \n优点:   \n1. 兼容性强。   \n2. 简单易用，能之间访问响应文本，支持浏览器与服务器之间双向通信。\n\n不足：   \n1. 只能用`GET`方法，不能使用`POST`方法   \n2. 无法判断请求是否失败，没有错误处理。\n\n\n## 跨域资源共享CORS\n需要浏览器和服务器同时支持。   \n原理：使用`\"Origin:\"`请求头和`\"Access-Control-Allow-Origin\"`响应头来扩展HTTP。其实就是利用新的HTTP头部来进行浏览器与服务器之间的沟通。\n\n针对前端代码而言，变化的地方在于**相对路径需改为绝对路径**。\n\n    //以前的方式\n    var xhr = new XMLHttpRequest(); \n    xhr.open(\"GET\", \"/test\", true); \n    xhr.send(); \n    //CORS方式\n    var xhr = new XMLHttpRequest(); \n    xhr.open(\"GET\", \"http://segmentfault.com/test\", true); \n    xhr.send(); \n    \n针对服务器代码而言，需要设置`Access-Control-Allow-Origin`，显式地列出源或使用通配符来匹配所有源。\n\n优点：   \n1. CORS支持所有类型的HTTP请求。   \n2. 使用CORS，开发者可以使用普通的`XMLHttpRequest`发起请求和获得数据   \n\n\n不足：   \n1. 不能发送和接收`cookie`   \n**更新：**服务端可以通过设置`Access-Control-Allow-Credentials`该字段来表示是否允许发送Cookie。发送ajax请求时，需配置`withCredentials`属性。(感谢sf小伙伴@lloyd_zhou 指正)\n具体可查看   [阮一峰大大的博客][6]。   \n2. 不能使用`setRequestHeader()`设置自定义头部   \n3. 兼容IE10+\n\n## postMessage\n`postMessge()`是HTML5新定义的通信机制。所有主流浏览器都已实现。该API定义在Window对象。\n\n    otherWindow.postMessage(message, targetOrigin);\n\n`message`: 要传递的消息。   \n`targetOrigin`: 指定**目标窗口**的源。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；\n\n当源匹配时，调用`postMessage()`方法时，目标窗口的Window对象会触发一个`message`事件。在进行监听事件时，应先判断`origin`属性，忽略来自未知源的消息。\n\n    //<http://example.com:8080>上的脚本:\n    var popup = window.open(...popup details...);\n    popup.postMessage(\"The user is 'bob' and the password is 'secret'\",\n                  \"https://secure.example.net\");  \n    popup.postMessage(\"hello there!\", \"http://example.org\");\n    \n    function receiveMessage(event)\n    {\n      if (event.origin !== \"http://example.org\")\n        return;\n      // event.source is popup\n      // event.data is \"hi there yourself!  the secret response is: rheeeeet!\"【见下面一段代码可知】\n    }\n    window.addEventListener(\"message\", receiveMessage, false);\n    \n针对上面的脚本进行接受数据的操作：\n\n    /*\n     * popup的脚本，运行在<http://example.org>:\n     */\n    \n    //当postMessage后触发的监听事件\n    function receiveMessage(event)\n    {\n      //先判断源\n      if (event.origin !== \"http://example.com:8080\")\n        return;\n    \n      // event.source：window.opener\n      // event.data：\"hello there!\"\n    \n      event.source.postMessage(\"hi there yourself!  the secret response \" +\n                               \"is: rheeeeet!\",\n                               event.origin);\n    }\n    \n    window.addEventListener(\"message\", receiveMessage, false);     \n\n# 后续\n收到了很多小伙伴的建议和指正，不胜感激，我会慢慢丰富这篇文章的内容的。请多多指教~\n\n# 参考文章\n1. [前端跨域请求原理及实践][1]\n2. [Window.postMessage()|MDN][2]\n3. [老生常谈的跨域处理][3]\n4. [JavaScript跨域问题总结][4]\n5. [实现跨域的几种方式][5]\n6. [jQuery’s JSONP Explained with Examples][7]\n\n\n  [1]: http://www.tuicool.com/articles/YRFRrmb\n  [2]: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n  [3]: http://www.tuicool.com/articles/zEZJzm2\n  [4]: http://www.tuicool.com/articles/A7Ff2iV\n  [5]: http://www.tuicool.com/articles/JrMFbiY\n  [6]: http://www.ruanyifeng.com/blog/2016/04/cors.html\n  [7]: https://www.sitepoint.com/jsonp-examples/","slug":"cross-domain","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kj30006y3qwijdqphiq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>转眼就是秋招季啦。经历了几场笔试面试，屡次被问到关于如何实现跨域。老实说，之前都是纸上谈兵，也没有项目需要跨域，甚至觉得这个东西没什么意义。直到今天项目中遇到了跨域问题，看了不少资料才理解跨域的普遍性和意义。特写此篇文章整理自己所得。</p>\n<h1 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h1><p>一般来说，如果你在开发中需要进行跨域操作（从一个非同源网站发送请求获取数据），一般而言，你在浏览器控制台看到的结果为：</p>\n<p><code>XMLHttpRequest cannot load http://external-domain/service. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://my-domain’ is therefore not allowed access.</code></p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>说到跨域就不得不提“同源策略”。<br>同源策略是Web浏览器针对恶意的代码所进行的措施，为了防止世界被破坏，为了保护世界的和平，Web浏览器，采取了同源策略，只允许脚本读取和所属文档来源相同的窗口和文档的属性。<br>那么，怎么判断文档来源是否相同呢？很简单，看三个部分： <strong>协议</strong>、<strong>主机</strong>、<strong>端口号</strong>。只要其中一个部分不同，则不同源。</p>\n<h2 id=\"跨域的应用场景\"><a href=\"#跨域的应用场景\" class=\"headerlink\" title=\"跨域的应用场景\"></a>跨域的应用场景</h2><ol>\n<li>来自 <code>home.example.com</code> 的文档里的脚本读取 <code>developer.example.com</code>载入的文档的属性。</li>\n<li>来自 <code>home.example.com</code> 的文档里的脚本读取 <code>text.segmentfault.com</code>载入的文档的属性</li>\n</ol>\n<h1 id=\"如何跨域\"><a href=\"#如何跨域\" class=\"headerlink\" title=\"如何跨域\"></a>如何跨域</h1><h2 id=\"设置domain属性\"><a href=\"#设置domain属性\" class=\"headerlink\" title=\"设置domain属性\"></a>设置<code>domain</code>属性</h2><p>针对上述应用场景的第一种情况，可以设置<code>Document</code>对象的<code>domain</code>属性。但是设置时使用的字符串必须具有有效的域前缀或者它本身。<br>PS: <code>domain</code>值中必须有一个点号。<br>PS: <code>domain</code>不能由松散的变为紧绷的。</p>\n<pre><code>//初始值 &quot;home.example.com&quot; \ndocument.domain = &quot;example.com&quot;; //OK\ndocument.domain = &quot;home.example.com&quot;; //NO,不能由松散变紧绷\ndocument.domain = &quot;example&quot;; //NO，必须有一个点号\ndocument.domain = &quot;another.com&quot;; //NO， 必须是有效域前缀或其本身\n</code></pre><h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP由两部分组成： 回调函数和数据。<br>原理：通过动态<code>&lt;script&gt;</code>元素来使用，可以通过<code>src</code>属性指定一个跨域URL。</p>\n<pre><code>function handler(data){\n    console.log(data);\n}\n\nvar script = document.createElement(&quot;script&quot;);\nscript.src = &quot;https://segmentfault.com/json/?callback=handler&quot;;\ndocument.body.insertBefore(script, document.body.firstChild);\n</code></pre><p>除此之外，还可以利用<code>jQuery</code>来实现。</p>\n<pre><code>function jsonCallback(json){\n  console.log(json);\n}\n\n$.ajax({\n  url: &quot;http://run.plnkr.co/plunks/v8xyYN64V4nqCshgjKms/data-2.json&quot;,\n  dataType: &quot;jsonp&quot;\n});\n</code></pre><p>运行结果如下：<br><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0918_1.png\" alt=\"结果\"></p>\n<p>某些API(例如<a href=\"https://developer.github.com/v3/#json-p-callbacks\" title=\"Github API\" target=\"_blank\" rel=\"external\">Github API</a>)允许你定义一个回调函数，当请求返回时执行该函数。</p>\n<pre><code>function logResults(json){\n  console.log(json);\n}\n\n$.ajax({\n  url: &quot;https://api.github.com/users/jeresig&quot;,\n  dataType: &quot;jsonp&quot;,\n  jsonpCallback: &quot;logResults&quot;\n});\n</code></pre><p>运行结果如下：<br><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0918_2.png\" alt=\"结果\"></p>\n<p>优点:   </p>\n<ol>\n<li>兼容性强。   </li>\n<li>简单易用，能之间访问响应文本，支持浏览器与服务器之间双向通信。</li>\n</ol>\n<p>不足：   </p>\n<ol>\n<li>只能用<code>GET</code>方法，不能使用<code>POST</code>方法   </li>\n<li>无法判断请求是否失败，没有错误处理。</li>\n</ol>\n<h2 id=\"跨域资源共享CORS\"><a href=\"#跨域资源共享CORS\" class=\"headerlink\" title=\"跨域资源共享CORS\"></a>跨域资源共享CORS</h2><p>需要浏览器和服务器同时支持。<br>原理：使用<code>&quot;Origin:&quot;</code>请求头和<code>&quot;Access-Control-Allow-Origin&quot;</code>响应头来扩展HTTP。其实就是利用新的HTTP头部来进行浏览器与服务器之间的沟通。</p>\n<p>针对前端代码而言，变化的地方在于<strong>相对路径需改为绝对路径</strong>。</p>\n<pre><code>//以前的方式\nvar xhr = new XMLHttpRequest(); \nxhr.open(&quot;GET&quot;, &quot;/test&quot;, true); \nxhr.send(); \n//CORS方式\nvar xhr = new XMLHttpRequest(); \nxhr.open(&quot;GET&quot;, &quot;http://segmentfault.com/test&quot;, true); \nxhr.send(); \n</code></pre><p>针对服务器代码而言，需要设置<code>Access-Control-Allow-Origin</code>，显式地列出源或使用通配符来匹配所有源。</p>\n<p>优点：   </p>\n<ol>\n<li>CORS支持所有类型的HTTP请求。   </li>\n<li>使用CORS，开发者可以使用普通的<code>XMLHttpRequest</code>发起请求和获得数据   </li>\n</ol>\n<p>不足：   </p>\n<ol>\n<li>不能发送和接收<code>cookie</code><br><strong>更新：</strong>服务端可以通过设置<code>Access-Control-Allow-Credentials</code>该字段来表示是否允许发送Cookie。发送ajax请求时，需配置<code>withCredentials</code>属性。(感谢sf小伙伴@lloyd_zhou 指正)<br>具体可查看   <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">阮一峰大大的博客</a>。   </li>\n<li>不能使用<code>setRequestHeader()</code>设置自定义头部   </li>\n<li>兼容IE10+</li>\n</ol>\n<h2 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h2><p><code>postMessge()</code>是HTML5新定义的通信机制。所有主流浏览器都已实现。该API定义在Window对象。</p>\n<pre><code>otherWindow.postMessage(message, targetOrigin);\n</code></pre><p><code>message</code>: 要传递的消息。<br><code>targetOrigin</code>: 指定<strong>目标窗口</strong>的源。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；</p>\n<p>当源匹配时，调用<code>postMessage()</code>方法时，目标窗口的Window对象会触发一个<code>message</code>事件。在进行监听事件时，应先判断<code>origin</code>属性，忽略来自未知源的消息。</p>\n<pre><code>//&lt;http://example.com:8080&gt;上的脚本:\nvar popup = window.open(...popup details...);\npopup.postMessage(&quot;The user is &apos;bob&apos; and the password is &apos;secret&apos;&quot;,\n              &quot;https://secure.example.net&quot;);  \npopup.postMessage(&quot;hello there!&quot;, &quot;http://example.org&quot;);\n\nfunction receiveMessage(event)\n{\n  if (event.origin !== &quot;http://example.org&quot;)\n    return;\n  // event.source is popup\n  // event.data is &quot;hi there yourself!  the secret response is: rheeeeet!&quot;【见下面一段代码可知】\n}\nwindow.addEventListener(&quot;message&quot;, receiveMessage, false);\n</code></pre><p>针对上面的脚本进行接受数据的操作：</p>\n<pre><code>/*\n * popup的脚本，运行在&lt;http://example.org&gt;:\n */\n\n//当postMessage后触发的监听事件\nfunction receiveMessage(event)\n{\n  //先判断源\n  if (event.origin !== &quot;http://example.com:8080&quot;)\n    return;\n\n  // event.source：window.opener\n  // event.data：&quot;hello there!&quot;\n\n  event.source.postMessage(&quot;hi there yourself!  the secret response &quot; +\n                           &quot;is: rheeeeet!&quot;,\n                           event.origin);\n}\n\nwindow.addEventListener(&quot;message&quot;, receiveMessage, false);     \n</code></pre><h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>收到了很多小伙伴的建议和指正，不胜感激，我会慢慢丰富这篇文章的内容的。请多多指教~</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ol>\n<li><a href=\"http://www.tuicool.com/articles/YRFRrmb\" target=\"_blank\" rel=\"external\">前端跨域请求原理及实践</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"external\">Window.postMessage()|MDN</a></li>\n<li><a href=\"http://www.tuicool.com/articles/zEZJzm2\" target=\"_blank\" rel=\"external\">老生常谈的跨域处理</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A7Ff2iV\" target=\"_blank\" rel=\"external\">JavaScript跨域问题总结</a></li>\n<li><a href=\"http://www.tuicool.com/articles/JrMFbiY\" target=\"_blank\" rel=\"external\">实现跨域的几种方式</a></li>\n<li><a href=\"https://www.sitepoint.com/jsonp-examples/\" target=\"_blank\" rel=\"external\">jQuery’s JSONP Explained with Examples</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>转眼就是秋招季啦。经历了几场笔试面试，屡次被问到关于如何实现跨域。老实说，之前都是纸上谈兵，也没有项目需要跨域，甚至觉得这个东西没什么意义。直到今天项目中遇到了跨域问题，看了不少资料才理解跨域的普遍性和意义。特写此篇文章整理自己所得。</p>\n<h1 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h1><p>一般来说，如果你在开发中需要进行跨域操作（从一个非同源网站发送请求获取数据），一般而言，你在浏览器控制台看到的结果为：</p>\n<p><code>XMLHttpRequest cannot load http://external-domain/service. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://my-domain’ is therefore not allowed access.</code></p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>说到跨域就不得不提“同源策略”。<br>同源策略是Web浏览器针对恶意的代码所进行的措施，为了防止世界被破坏，为了保护世界的和平，Web浏览器，采取了同源策略，只允许脚本读取和所属文档来源相同的窗口和文档的属性。<br>那么，怎么判断文档来源是否相同呢？很简单，看三个部分： <strong>协议</strong>、<strong>主机</strong>、<strong>端口号</strong>。只要其中一个部分不同，则不同源。</p>\n<h2 id=\"跨域的应用场景\"><a href=\"#跨域的应用场景\" class=\"headerlink\" title=\"跨域的应用场景\"></a>跨域的应用场景</h2><ol>\n<li>来自 <code>home.example.com</code> 的文档里的脚本读取 <code>developer.example.com</code>载入的文档的属性。</li>\n<li>来自 <code>home.example.com</code> 的文档里的脚本读取 <code>text.segmentfault.com</code>载入的文档的属性</li>\n</ol>\n<h1 id=\"如何跨域\"><a href=\"#如何跨域\" class=\"headerlink\" title=\"如何跨域\"></a>如何跨域</h1><h2 id=\"设置domain属性\"><a href=\"#设置domain属性\" class=\"headerlink\" title=\"设置domain属性\"></a>设置<code>domain</code>属性</h2><p>针对上述应用场景的第一种情况，可以设置<code>Document</code>对象的<code>domain</code>属性。但是设置时使用的字符串必须具有有效的域前缀或者它本身。<br>PS: <code>domain</code>值中必须有一个点号。<br>PS: <code>domain</code>不能由松散的变为紧绷的。</p>\n<pre><code>//初始值 &quot;home.example.com&quot; \ndocument.domain = &quot;example.com&quot;; //OK\ndocument.domain = &quot;home.example.com&quot;; //NO,不能由松散变紧绷\ndocument.domain = &quot;example&quot;; //NO，必须有一个点号\ndocument.domain = &quot;another.com&quot;; //NO， 必须是有效域前缀或其本身\n</code></pre><h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP由两部分组成： 回调函数和数据。<br>原理：通过动态<code>&lt;script&gt;</code>元素来使用，可以通过<code>src</code>属性指定一个跨域URL。</p>\n<pre><code>function handler(data){\n    console.log(data);\n}\n\nvar script = document.createElement(&quot;script&quot;);\nscript.src = &quot;https://segmentfault.com/json/?callback=handler&quot;;\ndocument.body.insertBefore(script, document.body.firstChild);\n</code></pre><p>除此之外，还可以利用<code>jQuery</code>来实现。</p>\n<pre><code>function jsonCallback(json){\n  console.log(json);\n}\n\n$.ajax({\n  url: &quot;http://run.plnkr.co/plunks/v8xyYN64V4nqCshgjKms/data-2.json&quot;,\n  dataType: &quot;jsonp&quot;\n});\n</code></pre><p>运行结果如下：<br><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0918_1.png\" alt=\"结果\"></p>\n<p>某些API(例如<a href=\"https://developer.github.com/v3/#json-p-callbacks\" title=\"Github API\">Github API</a>)允许你定义一个回调函数，当请求返回时执行该函数。</p>\n<pre><code>function logResults(json){\n  console.log(json);\n}\n\n$.ajax({\n  url: &quot;https://api.github.com/users/jeresig&quot;,\n  dataType: &quot;jsonp&quot;,\n  jsonpCallback: &quot;logResults&quot;\n});\n</code></pre><p>运行结果如下：<br><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0918_2.png\" alt=\"结果\"></p>\n<p>优点:   </p>\n<ol>\n<li>兼容性强。   </li>\n<li>简单易用，能之间访问响应文本，支持浏览器与服务器之间双向通信。</li>\n</ol>\n<p>不足：   </p>\n<ol>\n<li>只能用<code>GET</code>方法，不能使用<code>POST</code>方法   </li>\n<li>无法判断请求是否失败，没有错误处理。</li>\n</ol>\n<h2 id=\"跨域资源共享CORS\"><a href=\"#跨域资源共享CORS\" class=\"headerlink\" title=\"跨域资源共享CORS\"></a>跨域资源共享CORS</h2><p>需要浏览器和服务器同时支持。<br>原理：使用<code>&quot;Origin:&quot;</code>请求头和<code>&quot;Access-Control-Allow-Origin&quot;</code>响应头来扩展HTTP。其实就是利用新的HTTP头部来进行浏览器与服务器之间的沟通。</p>\n<p>针对前端代码而言，变化的地方在于<strong>相对路径需改为绝对路径</strong>。</p>\n<pre><code>//以前的方式\nvar xhr = new XMLHttpRequest(); \nxhr.open(&quot;GET&quot;, &quot;/test&quot;, true); \nxhr.send(); \n//CORS方式\nvar xhr = new XMLHttpRequest(); \nxhr.open(&quot;GET&quot;, &quot;http://segmentfault.com/test&quot;, true); \nxhr.send(); \n</code></pre><p>针对服务器代码而言，需要设置<code>Access-Control-Allow-Origin</code>，显式地列出源或使用通配符来匹配所有源。</p>\n<p>优点：   </p>\n<ol>\n<li>CORS支持所有类型的HTTP请求。   </li>\n<li>使用CORS，开发者可以使用普通的<code>XMLHttpRequest</code>发起请求和获得数据   </li>\n</ol>\n<p>不足：   </p>\n<ol>\n<li>不能发送和接收<code>cookie</code><br><strong>更新：</strong>服务端可以通过设置<code>Access-Control-Allow-Credentials</code>该字段来表示是否允许发送Cookie。发送ajax请求时，需配置<code>withCredentials</code>属性。(感谢sf小伙伴@lloyd_zhou 指正)<br>具体可查看   <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">阮一峰大大的博客</a>。   </li>\n<li>不能使用<code>setRequestHeader()</code>设置自定义头部   </li>\n<li>兼容IE10+</li>\n</ol>\n<h2 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h2><p><code>postMessge()</code>是HTML5新定义的通信机制。所有主流浏览器都已实现。该API定义在Window对象。</p>\n<pre><code>otherWindow.postMessage(message, targetOrigin);\n</code></pre><p><code>message</code>: 要传递的消息。<br><code>targetOrigin</code>: 指定<strong>目标窗口</strong>的源。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；</p>\n<p>当源匹配时，调用<code>postMessage()</code>方法时，目标窗口的Window对象会触发一个<code>message</code>事件。在进行监听事件时，应先判断<code>origin</code>属性，忽略来自未知源的消息。</p>\n<pre><code>//&lt;http://example.com:8080&gt;上的脚本:\nvar popup = window.open(...popup details...);\npopup.postMessage(&quot;The user is &apos;bob&apos; and the password is &apos;secret&apos;&quot;,\n              &quot;https://secure.example.net&quot;);  \npopup.postMessage(&quot;hello there!&quot;, &quot;http://example.org&quot;);\n\nfunction receiveMessage(event)\n{\n  if (event.origin !== &quot;http://example.org&quot;)\n    return;\n  // event.source is popup\n  // event.data is &quot;hi there yourself!  the secret response is: rheeeeet!&quot;【见下面一段代码可知】\n}\nwindow.addEventListener(&quot;message&quot;, receiveMessage, false);\n</code></pre><p>针对上面的脚本进行接受数据的操作：</p>\n<pre><code>/*\n * popup的脚本，运行在&lt;http://example.org&gt;:\n */\n\n//当postMessage后触发的监听事件\nfunction receiveMessage(event)\n{\n  //先判断源\n  if (event.origin !== &quot;http://example.com:8080&quot;)\n    return;\n\n  // event.source：window.opener\n  // event.data：&quot;hello there!&quot;\n\n  event.source.postMessage(&quot;hi there yourself!  the secret response &quot; +\n                           &quot;is: rheeeeet!&quot;,\n                           event.origin);\n}\n\nwindow.addEventListener(&quot;message&quot;, receiveMessage, false);     \n</code></pre><h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>收到了很多小伙伴的建议和指正，不胜感激，我会慢慢丰富这篇文章的内容的。请多多指教~</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ol>\n<li><a href=\"http://www.tuicool.com/articles/YRFRrmb\">前端跨域请求原理及实践</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">Window.postMessage()|MDN</a></li>\n<li><a href=\"http://www.tuicool.com/articles/zEZJzm2\">老生常谈的跨域处理</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A7Ff2iV\">JavaScript跨域问题总结</a></li>\n<li><a href=\"http://www.tuicool.com/articles/JrMFbiY\">实现跨域的几种方式</a></li>\n<li><a href=\"https://www.sitepoint.com/jsonp-examples/\">jQuery’s JSONP Explained with Examples</a></li>\n</ol>\n"},{"title":"JAVA创建和销毁对象--《Effective Java》","date":"2017-02-06T02:17:06.000Z","_content":"## 前言\n本文为阅读《Effective Java》第二章的笔记。\n\n## 用静态工厂方法代替构造器\n### 静态工厂方法优势\n* 有名称-调用更清晰\n* 每次调用时不会创建一个新对象\n* 可以返回原返回类型的任何子类型的对象\n* 创建参数化类型实例的时候，使代码更简洁\n### 静态工厂方法缺点\n* 类如果不含共有的或受保护的构造器，就不能被子类化\n* 与其他静态方法实际上没有任何区别\n\n---\n\n## 遇到多个构造器参数时要考虑用构建器\n### ** 重叠构造器模式** \n但是，在有很多参数时，客户端代码难以编写且难以阅读。\n### ** JavaBeans模式** 。\n调用一个无参构造器来创建对象，调用`setter`方法来设置参数。\n缺点：构造过程被分到了几个调用，导致可能处于不一致状态。\n### Builder模式\n让客户端利用所有必要参数调用构造器/静态工厂，得到builder对象，再调用类似于setter方法，最后调用无参的build方法来生成不可变对象。\n\n    public class NutritionFacts {\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static class Builder {\n            //Required parameters\n            private final int servingSize;\n            private final int servings;\n\n            //Optional parameters - initialized to default values\n            private int calories     = 0;\n            private int fat          = 0;\n            private int carbohydrate = 0;\n            private int sodium       = 0;\n\n\n            public Builder(int servingSize, int servings) {\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n\n            public Builder calories(int val){\n                calories = val; return this;\n            }\n            public Builder fat(int val){\n                fat = val; return this;\n            }\n            public Builder carbohydrate(int val){\n                carbohydrate = val; return this;\n            }\n            public Builder sodium(int val){\n                sodium = val; return this;\n            }\n\n            public NutritionFacts build(){\n                return new NutritionFacts(this);\n            }\n        }\n\n        private NutritionFacts(Builder builder) {\n            servings     = builder.servings;\n            servingSize  = builder.servingSize;\n            calories     = builder.calories;\n            fat          = builder.fat;\n            sodium       = builder.sodium;\n            carbohydrate = builder.carbohydrate;\n        }\n    }\n\n    //Client\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).\n        calories(100).sodium(35).carbohydrate(27).build();\n\nbuilder可以检验约束条件，并且可有多个可变参数。\n但是Builder模式更为冗长，只有在很多参数（>=4）时才使用。\n\n---\n\n## 用私有构造器或枚举类型强化Singleton属性\n单元素的枚举类型已经成为实现Singleton的最佳方法。\n\n    public enum Elvis {\n        INSTANCE;\n\n        public void leaveTheBuilding() {...}\n    }\n这种方式提供了序列化机制，并可防止多次实例化。\n\n---\n\n## 通过私有构造器强化不可实例化的能力\n为了不被实例化，可使用私有构造器来实现。\n\n    //Noninstantiable utility class\n    public class UtilityClass {\n        private UtilityClass() {\n            throw new AssertionError();\n        }\n\n        ... // Remainder omitted\n    }\n\n这种方式使得一个类不能被子类化。\n所有构造器必须显式或隐式调用超类构造器，在这种情形下，子类就没有可访问的超类构造器调用。\n\n---\n\n## 避免创建不必要的对象\n重用不可变对象，重用已知不会被修改的可变对象。\n\n对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法，避免创建不必要的对象。构造器每次被调用时都会创建一个新对象。\n\n自动装箱（autoboxing）-- 创建多余对象的新方法。要优先使用基本类型而不是装箱基本类型。\n\n\n---\n\n## 消除过期的对象调用\n只要类是自己管理内存，就应该警惕内存泄漏问题。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。\n常见的内存泄漏还有： 缓存、监听器和其他回调。\n确保回调立即被当作垃圾回收的最佳方法是只保存它们的弱引用。\n\n---\n\n## 避免使用终结方法\n终结方法的缺点在于不能保证会被及时地执行。\n不应该依赖终结方法来更新重要的持久状态。\n显式的终止方法通常与try-finally结构结合使用，以确保及时终止。\n#### 终止方法的用途\n* 当对象所有者忘记调用显式终止方法时，终结方法可充当“安全网” -- 终结方法发现资源还未被终止，应在日志中记录一条警告。\n* 终止非关键的本地资源。\n\n使用了终结方法就要记住调用`super.finalize`。\n","source":"_posts/effective-java-ch2-object.md","raw":"---\ntitle: JAVA创建和销毁对象--《Effective Java》\ndate: 2017-02-06 10:17:06\ncategories: [后台开发, JAVA开发]\ntags: [JAVA, Effective Java]\n---\n## 前言\n本文为阅读《Effective Java》第二章的笔记。\n\n## 用静态工厂方法代替构造器\n### 静态工厂方法优势\n* 有名称-调用更清晰\n* 每次调用时不会创建一个新对象\n* 可以返回原返回类型的任何子类型的对象\n* 创建参数化类型实例的时候，使代码更简洁\n### 静态工厂方法缺点\n* 类如果不含共有的或受保护的构造器，就不能被子类化\n* 与其他静态方法实际上没有任何区别\n\n---\n\n## 遇到多个构造器参数时要考虑用构建器\n### ** 重叠构造器模式** \n但是，在有很多参数时，客户端代码难以编写且难以阅读。\n### ** JavaBeans模式** 。\n调用一个无参构造器来创建对象，调用`setter`方法来设置参数。\n缺点：构造过程被分到了几个调用，导致可能处于不一致状态。\n### Builder模式\n让客户端利用所有必要参数调用构造器/静态工厂，得到builder对象，再调用类似于setter方法，最后调用无参的build方法来生成不可变对象。\n\n    public class NutritionFacts {\n        private final int servingSize;\n        private final int servings;\n        private final int calories;\n        private final int fat;\n        private final int sodium;\n        private final int carbohydrate;\n\n        public static class Builder {\n            //Required parameters\n            private final int servingSize;\n            private final int servings;\n\n            //Optional parameters - initialized to default values\n            private int calories     = 0;\n            private int fat          = 0;\n            private int carbohydrate = 0;\n            private int sodium       = 0;\n\n\n            public Builder(int servingSize, int servings) {\n                this.servingSize = servingSize;\n                this.servings = servings;\n            }\n\n            public Builder calories(int val){\n                calories = val; return this;\n            }\n            public Builder fat(int val){\n                fat = val; return this;\n            }\n            public Builder carbohydrate(int val){\n                carbohydrate = val; return this;\n            }\n            public Builder sodium(int val){\n                sodium = val; return this;\n            }\n\n            public NutritionFacts build(){\n                return new NutritionFacts(this);\n            }\n        }\n\n        private NutritionFacts(Builder builder) {\n            servings     = builder.servings;\n            servingSize  = builder.servingSize;\n            calories     = builder.calories;\n            fat          = builder.fat;\n            sodium       = builder.sodium;\n            carbohydrate = builder.carbohydrate;\n        }\n    }\n\n    //Client\n    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).\n        calories(100).sodium(35).carbohydrate(27).build();\n\nbuilder可以检验约束条件，并且可有多个可变参数。\n但是Builder模式更为冗长，只有在很多参数（>=4）时才使用。\n\n---\n\n## 用私有构造器或枚举类型强化Singleton属性\n单元素的枚举类型已经成为实现Singleton的最佳方法。\n\n    public enum Elvis {\n        INSTANCE;\n\n        public void leaveTheBuilding() {...}\n    }\n这种方式提供了序列化机制，并可防止多次实例化。\n\n---\n\n## 通过私有构造器强化不可实例化的能力\n为了不被实例化，可使用私有构造器来实现。\n\n    //Noninstantiable utility class\n    public class UtilityClass {\n        private UtilityClass() {\n            throw new AssertionError();\n        }\n\n        ... // Remainder omitted\n    }\n\n这种方式使得一个类不能被子类化。\n所有构造器必须显式或隐式调用超类构造器，在这种情形下，子类就没有可访问的超类构造器调用。\n\n---\n\n## 避免创建不必要的对象\n重用不可变对象，重用已知不会被修改的可变对象。\n\n对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法，避免创建不必要的对象。构造器每次被调用时都会创建一个新对象。\n\n自动装箱（autoboxing）-- 创建多余对象的新方法。要优先使用基本类型而不是装箱基本类型。\n\n\n---\n\n## 消除过期的对象调用\n只要类是自己管理内存，就应该警惕内存泄漏问题。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。\n常见的内存泄漏还有： 缓存、监听器和其他回调。\n确保回调立即被当作垃圾回收的最佳方法是只保存它们的弱引用。\n\n---\n\n## 避免使用终结方法\n终结方法的缺点在于不能保证会被及时地执行。\n不应该依赖终结方法来更新重要的持久状态。\n显式的终止方法通常与try-finally结构结合使用，以确保及时终止。\n#### 终止方法的用途\n* 当对象所有者忘记调用显式终止方法时，终结方法可充当“安全网” -- 终结方法发现资源还未被终止，应在日志中记录一条警告。\n* 终止非关键的本地资源。\n\n使用了终结方法就要记住调用`super.finalize`。\n","slug":"effective-java-ch2-object","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kj60008y3qwq0l9x4v2","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第二章的笔记。</p>\n<h2 id=\"用静态工厂方法代替构造器\"><a href=\"#用静态工厂方法代替构造器\" class=\"headerlink\" title=\"用静态工厂方法代替构造器\"></a>用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法优势\"><a href=\"#静态工厂方法优势\" class=\"headerlink\" title=\"静态工厂方法优势\"></a>静态工厂方法优势</h3><ul>\n<li>有名称-调用更清晰</li>\n<li>每次调用时不会创建一个新对象</li>\n<li>可以返回原返回类型的任何子类型的对象</li>\n<li>创建参数化类型实例的时候，使代码更简洁<h3 id=\"静态工厂方法缺点\"><a href=\"#静态工厂方法缺点\" class=\"headerlink\" title=\"静态工厂方法缺点\"></a>静态工厂方法缺点</h3></li>\n<li>类如果不含共有的或受保护的构造器，就不能被子类化</li>\n<li>与其他静态方法实际上没有任何区别</li>\n</ul>\n<hr>\n<h2 id=\"遇到多个构造器参数时要考虑用构建器\"><a href=\"#遇到多个构造器参数时要考虑用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时要考虑用构建器\"></a>遇到多个构造器参数时要考虑用构建器</h2><h3 id=\"重叠构造器模式\"><a href=\"#重叠构造器模式\" class=\"headerlink\" title=\" 重叠构造器模式\"></a><strong> 重叠构造器模式</strong></h3><p>但是，在有很多参数时，客户端代码难以编写且难以阅读。</p>\n<h3 id=\"JavaBeans模式-。\"><a href=\"#JavaBeans模式-。\" class=\"headerlink\" title=\" JavaBeans模式 。\"></a><strong> JavaBeans模式</strong> 。</h3><p>调用一个无参构造器来创建对象，调用<code>setter</code>方法来设置参数。<br>缺点：构造过程被分到了几个调用，导致可能处于不一致状态。</p>\n<h3 id=\"Builder模式\"><a href=\"#Builder模式\" class=\"headerlink\" title=\"Builder模式\"></a>Builder模式</h3><p>让客户端利用所有必要参数调用构造器/静态工厂，得到builder对象，再调用类似于setter方法，最后调用无参的build方法来生成不可变对象。</p>\n<pre><code>public class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        //Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        //Optional parameters - initialized to default values\n        private int calories     = 0;\n        private int fat          = 0;\n        private int carbohydrate = 0;\n        private int sodium       = 0;\n\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings = servings;\n        }\n\n        public Builder calories(int val){\n            calories = val; return this;\n        }\n        public Builder fat(int val){\n            fat = val; return this;\n        }\n        public Builder carbohydrate(int val){\n            carbohydrate = val; return this;\n        }\n        public Builder sodium(int val){\n            sodium = val; return this;\n        }\n\n        public NutritionFacts build(){\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servings     = builder.servings;\n        servingSize  = builder.servingSize;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n\n//Client\nNutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).\n    calories(100).sodium(35).carbohydrate(27).build();\n</code></pre><p>builder可以检验约束条件，并且可有多个可变参数。<br>但是Builder模式更为冗长，只有在很多参数（&gt;=4）时才使用。</p>\n<hr>\n<h2 id=\"用私有构造器或枚举类型强化Singleton属性\"><a href=\"#用私有构造器或枚举类型强化Singleton属性\" class=\"headerlink\" title=\"用私有构造器或枚举类型强化Singleton属性\"></a>用私有构造器或枚举类型强化Singleton属性</h2><p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n<pre><code>public enum Elvis {\n    INSTANCE;\n\n    public void leaveTheBuilding() {...}\n}\n</code></pre><p>这种方式提供了序列化机制，并可防止多次实例化。</p>\n<hr>\n<h2 id=\"通过私有构造器强化不可实例化的能力\"><a href=\"#通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"通过私有构造器强化不可实例化的能力\"></a>通过私有构造器强化不可实例化的能力</h2><p>为了不被实例化，可使用私有构造器来实现。</p>\n<pre><code>//Noninstantiable utility class\npublic class UtilityClass {\n    private UtilityClass() {\n        throw new AssertionError();\n    }\n\n    ... // Remainder omitted\n}\n</code></pre><p>这种方式使得一个类不能被子类化。<br>所有构造器必须显式或隐式调用超类构造器，在这种情形下，子类就没有可访问的超类构造器调用。</p>\n<hr>\n<h2 id=\"避免创建不必要的对象\"><a href=\"#避免创建不必要的对象\" class=\"headerlink\" title=\"避免创建不必要的对象\"></a>避免创建不必要的对象</h2><p>重用不可变对象，重用已知不会被修改的可变对象。</p>\n<p>对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法，避免创建不必要的对象。构造器每次被调用时都会创建一个新对象。</p>\n<p>自动装箱（autoboxing）– 创建多余对象的新方法。要优先使用基本类型而不是装箱基本类型。</p>\n<hr>\n<h2 id=\"消除过期的对象调用\"><a href=\"#消除过期的对象调用\" class=\"headerlink\" title=\"消除过期的对象调用\"></a>消除过期的对象调用</h2><p>只要类是自己管理内存，就应该警惕内存泄漏问题。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。<br>常见的内存泄漏还有： 缓存、监听器和其他回调。<br>确保回调立即被当作垃圾回收的最佳方法是只保存它们的弱引用。</p>\n<hr>\n<h2 id=\"避免使用终结方法\"><a href=\"#避免使用终结方法\" class=\"headerlink\" title=\"避免使用终结方法\"></a>避免使用终结方法</h2><p>终结方法的缺点在于不能保证会被及时地执行。<br>不应该依赖终结方法来更新重要的持久状态。<br>显式的终止方法通常与try-finally结构结合使用，以确保及时终止。</p>\n<h4 id=\"终止方法的用途\"><a href=\"#终止方法的用途\" class=\"headerlink\" title=\"终止方法的用途\"></a>终止方法的用途</h4><ul>\n<li>当对象所有者忘记调用显式终止方法时，终结方法可充当“安全网” – 终结方法发现资源还未被终止，应在日志中记录一条警告。</li>\n<li>终止非关键的本地资源。</li>\n</ul>\n<p>使用了终结方法就要记住调用<code>super.finalize</code>。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第二章的笔记。</p>\n<h2 id=\"用静态工厂方法代替构造器\"><a href=\"#用静态工厂方法代替构造器\" class=\"headerlink\" title=\"用静态工厂方法代替构造器\"></a>用静态工厂方法代替构造器</h2><h3 id=\"静态工厂方法优势\"><a href=\"#静态工厂方法优势\" class=\"headerlink\" title=\"静态工厂方法优势\"></a>静态工厂方法优势</h3><ul>\n<li>有名称-调用更清晰</li>\n<li>每次调用时不会创建一个新对象</li>\n<li>可以返回原返回类型的任何子类型的对象</li>\n<li>创建参数化类型实例的时候，使代码更简洁<h3 id=\"静态工厂方法缺点\"><a href=\"#静态工厂方法缺点\" class=\"headerlink\" title=\"静态工厂方法缺点\"></a>静态工厂方法缺点</h3></li>\n<li>类如果不含共有的或受保护的构造器，就不能被子类化</li>\n<li>与其他静态方法实际上没有任何区别</li>\n</ul>\n<hr>\n<h2 id=\"遇到多个构造器参数时要考虑用构建器\"><a href=\"#遇到多个构造器参数时要考虑用构建器\" class=\"headerlink\" title=\"遇到多个构造器参数时要考虑用构建器\"></a>遇到多个构造器参数时要考虑用构建器</h2><h3 id=\"重叠构造器模式\"><a href=\"#重叠构造器模式\" class=\"headerlink\" title=\" 重叠构造器模式\"></a><strong> 重叠构造器模式</strong></h3><p>但是，在有很多参数时，客户端代码难以编写且难以阅读。</p>\n<h3 id=\"JavaBeans模式-。\"><a href=\"#JavaBeans模式-。\" class=\"headerlink\" title=\" JavaBeans模式 。\"></a><strong> JavaBeans模式</strong> 。</h3><p>调用一个无参构造器来创建对象，调用<code>setter</code>方法来设置参数。<br>缺点：构造过程被分到了几个调用，导致可能处于不一致状态。</p>\n<h3 id=\"Builder模式\"><a href=\"#Builder模式\" class=\"headerlink\" title=\"Builder模式\"></a>Builder模式</h3><p>让客户端利用所有必要参数调用构造器/静态工厂，得到builder对象，再调用类似于setter方法，最后调用无参的build方法来生成不可变对象。</p>\n<pre><code>public class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        //Required parameters\n        private final int servingSize;\n        private final int servings;\n\n        //Optional parameters - initialized to default values\n        private int calories     = 0;\n        private int fat          = 0;\n        private int carbohydrate = 0;\n        private int sodium       = 0;\n\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings = servings;\n        }\n\n        public Builder calories(int val){\n            calories = val; return this;\n        }\n        public Builder fat(int val){\n            fat = val; return this;\n        }\n        public Builder carbohydrate(int val){\n            carbohydrate = val; return this;\n        }\n        public Builder sodium(int val){\n            sodium = val; return this;\n        }\n\n        public NutritionFacts build(){\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servings     = builder.servings;\n        servingSize  = builder.servingSize;\n        calories     = builder.calories;\n        fat          = builder.fat;\n        sodium       = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n\n//Client\nNutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).\n    calories(100).sodium(35).carbohydrate(27).build();\n</code></pre><p>builder可以检验约束条件，并且可有多个可变参数。<br>但是Builder模式更为冗长，只有在很多参数（&gt;=4）时才使用。</p>\n<hr>\n<h2 id=\"用私有构造器或枚举类型强化Singleton属性\"><a href=\"#用私有构造器或枚举类型强化Singleton属性\" class=\"headerlink\" title=\"用私有构造器或枚举类型强化Singleton属性\"></a>用私有构造器或枚举类型强化Singleton属性</h2><p>单元素的枚举类型已经成为实现Singleton的最佳方法。</p>\n<pre><code>public enum Elvis {\n    INSTANCE;\n\n    public void leaveTheBuilding() {...}\n}\n</code></pre><p>这种方式提供了序列化机制，并可防止多次实例化。</p>\n<hr>\n<h2 id=\"通过私有构造器强化不可实例化的能力\"><a href=\"#通过私有构造器强化不可实例化的能力\" class=\"headerlink\" title=\"通过私有构造器强化不可实例化的能力\"></a>通过私有构造器强化不可实例化的能力</h2><p>为了不被实例化，可使用私有构造器来实现。</p>\n<pre><code>//Noninstantiable utility class\npublic class UtilityClass {\n    private UtilityClass() {\n        throw new AssertionError();\n    }\n\n    ... // Remainder omitted\n}\n</code></pre><p>这种方式使得一个类不能被子类化。<br>所有构造器必须显式或隐式调用超类构造器，在这种情形下，子类就没有可访问的超类构造器调用。</p>\n<hr>\n<h2 id=\"避免创建不必要的对象\"><a href=\"#避免创建不必要的对象\" class=\"headerlink\" title=\"避免创建不必要的对象\"></a>避免创建不必要的对象</h2><p>重用不可变对象，重用已知不会被修改的可变对象。</p>\n<p>对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法，避免创建不必要的对象。构造器每次被调用时都会创建一个新对象。</p>\n<p>自动装箱（autoboxing）– 创建多余对象的新方法。要优先使用基本类型而不是装箱基本类型。</p>\n<hr>\n<h2 id=\"消除过期的对象调用\"><a href=\"#消除过期的对象调用\" class=\"headerlink\" title=\"消除过期的对象调用\"></a>消除过期的对象调用</h2><p>只要类是自己管理内存，就应该警惕内存泄漏问题。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。<br>常见的内存泄漏还有： 缓存、监听器和其他回调。<br>确保回调立即被当作垃圾回收的最佳方法是只保存它们的弱引用。</p>\n<hr>\n<h2 id=\"避免使用终结方法\"><a href=\"#避免使用终结方法\" class=\"headerlink\" title=\"避免使用终结方法\"></a>避免使用终结方法</h2><p>终结方法的缺点在于不能保证会被及时地执行。<br>不应该依赖终结方法来更新重要的持久状态。<br>显式的终止方法通常与try-finally结构结合使用，以确保及时终止。</p>\n<h4 id=\"终止方法的用途\"><a href=\"#终止方法的用途\" class=\"headerlink\" title=\"终止方法的用途\"></a>终止方法的用途</h4><ul>\n<li>当对象所有者忘记调用显式终止方法时，终结方法可充当“安全网” – 终结方法发现资源还未被终止，应在日志中记录一条警告。</li>\n<li>终止非关键的本地资源。</li>\n</ul>\n<p>使用了终结方法就要记住调用<code>super.finalize</code>。</p>\n"},{"title":"对于所有对象都通用的方法--《Effective Java》","date":"2017-02-07T12:01:53.000Z","_content":"## 前言\n本文为阅读《Effective Java》第三章阅读笔记。\n\n---\n\n## 覆盖equals时请遵守通用约定\n### 什么时候应该覆盖`Object.equals`？\n-如果类具有自己的“逻辑相等”，且超类没有覆盖equals来实现我们想要的功能。\n\n### 覆盖equals方法的约定\n* 自反性  \n对于任何非null的引用值x， `x.equals(x)`必须返回true\n* 对称性  \n对于任何非null的引用值x和y，当且仅当`y.equals(x)`返回true时，`x.equals(y)`必须返回true。\n* 传递性  \n对于任何非null的引用值x、y和z，如果`x.equals(y)`返回true，并且`y.equals(z)`也true，则`x.equals(z)`必须true。\n* 一致性  \n对于任何非null的引用值x和y，只要比较操作在对象中所用的信息没有被修改，多次调用`x.equals(y)`结果都会一致。\n* 对于任何非null的引用值x，`x.equals(null) = false`\n\n### 实现高质量equals方法诀窍\n1. 使用 == 操作符检查“参数是否为这个对象的引用”。如果是则返回true。\n2. 使用 instanceof 操作符检查“参数是否为正确类型”。如果不是则返回false。\n3. 把参数转换为正确类型\n4. 对于该类中每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。\n5. 编写完成后见检查是否对称、传递、一致\n6. 覆盖equals时总要覆盖hashCode\n7. 不啊哟将equals声明中的Object对象替换为其他类型\n\n---\n\n## 覆盖equals时总要覆盖hashCode\nObject规范中： \n* 在应用程序执行期间，只要对象的equals方法的比较操作所用到信息没有被修改，这同一个对象调用多次，hashCode方法必须返回一致的答案。在同一个应用程序的多次执行过程中，每次执行返回的整数可以不一致。\n* 如果两个对象根据equals方法比较是相等的，那么调用两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。\n* 如果两个对象根据equals方法比较是不等，那么调用两个对象中任意一个对象的hashCode方法不一定要产生不同的整数结果。但是给不相等的对象产生截然不同的整数结果，有可能提高散列表性能。\n\n---\n\n## 始终要覆盖toString\n`java.lang.Object`的toString实现返回的字符串是 类名称+ @ + 散列码的无符号十六机制表示法。\n当调用`println`、`printf`、`+`以及`assert`或被调试器打印出来，toString方法会被自动调用。\n \n\n---\n\n## 谨慎地覆盖clone\n实现对象拷贝的方法有以下：\n* 一个实现了`Cloneable`接口的类，用一个公有方法覆盖`lone。先调用`super.clone`然后修正任何需要修正的域。\n* 提供一个拷贝构造器或拷贝工厂。\n\n第二种方法更具优势。\n拷贝构造器:\n\n    public Yum(Yum yum);\n\n拷贝工厂是类似于拷贝构造器的静态工厂：\n\n    public static Yum newInstance(Yum yum);\n\n---\n\n## 考虑实现Comparable接口\n`compareTo`方法是`Comparable`接口中唯一的方法。不但允许进行简单的等同性比较，而且允许执行顺序比较。\n一旦类实现Comparable接口，就可以和许多泛型算法和依赖于该接口的集合实现进行协作。","source":"_posts/effective-java-ch3-function.md","raw":"---\ntitle: 对于所有对象都通用的方法--《Effective Java》\ndate: 2017-02-07 20:01:53\ncategories: [后台开发, JAVA开发]\ntags: [JAVA, Effective Java]\n---\n## 前言\n本文为阅读《Effective Java》第三章阅读笔记。\n\n---\n\n## 覆盖equals时请遵守通用约定\n### 什么时候应该覆盖`Object.equals`？\n-如果类具有自己的“逻辑相等”，且超类没有覆盖equals来实现我们想要的功能。\n\n### 覆盖equals方法的约定\n* 自反性  \n对于任何非null的引用值x， `x.equals(x)`必须返回true\n* 对称性  \n对于任何非null的引用值x和y，当且仅当`y.equals(x)`返回true时，`x.equals(y)`必须返回true。\n* 传递性  \n对于任何非null的引用值x、y和z，如果`x.equals(y)`返回true，并且`y.equals(z)`也true，则`x.equals(z)`必须true。\n* 一致性  \n对于任何非null的引用值x和y，只要比较操作在对象中所用的信息没有被修改，多次调用`x.equals(y)`结果都会一致。\n* 对于任何非null的引用值x，`x.equals(null) = false`\n\n### 实现高质量equals方法诀窍\n1. 使用 == 操作符检查“参数是否为这个对象的引用”。如果是则返回true。\n2. 使用 instanceof 操作符检查“参数是否为正确类型”。如果不是则返回false。\n3. 把参数转换为正确类型\n4. 对于该类中每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。\n5. 编写完成后见检查是否对称、传递、一致\n6. 覆盖equals时总要覆盖hashCode\n7. 不啊哟将equals声明中的Object对象替换为其他类型\n\n---\n\n## 覆盖equals时总要覆盖hashCode\nObject规范中： \n* 在应用程序执行期间，只要对象的equals方法的比较操作所用到信息没有被修改，这同一个对象调用多次，hashCode方法必须返回一致的答案。在同一个应用程序的多次执行过程中，每次执行返回的整数可以不一致。\n* 如果两个对象根据equals方法比较是相等的，那么调用两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。\n* 如果两个对象根据equals方法比较是不等，那么调用两个对象中任意一个对象的hashCode方法不一定要产生不同的整数结果。但是给不相等的对象产生截然不同的整数结果，有可能提高散列表性能。\n\n---\n\n## 始终要覆盖toString\n`java.lang.Object`的toString实现返回的字符串是 类名称+ @ + 散列码的无符号十六机制表示法。\n当调用`println`、`printf`、`+`以及`assert`或被调试器打印出来，toString方法会被自动调用。\n \n\n---\n\n## 谨慎地覆盖clone\n实现对象拷贝的方法有以下：\n* 一个实现了`Cloneable`接口的类，用一个公有方法覆盖`lone。先调用`super.clone`然后修正任何需要修正的域。\n* 提供一个拷贝构造器或拷贝工厂。\n\n第二种方法更具优势。\n拷贝构造器:\n\n    public Yum(Yum yum);\n\n拷贝工厂是类似于拷贝构造器的静态工厂：\n\n    public static Yum newInstance(Yum yum);\n\n---\n\n## 考虑实现Comparable接口\n`compareTo`方法是`Comparable`接口中唯一的方法。不但允许进行简单的等同性比较，而且允许执行顺序比较。\n一旦类实现Comparable接口，就可以和许多泛型算法和依赖于该接口的集合实现进行协作。","slug":"effective-java-ch3-function","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kj9000by3qwov23f0rf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第三章阅读笔记。</p>\n<hr>\n<h2 id=\"覆盖equals时请遵守通用约定\"><a href=\"#覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"覆盖equals时请遵守通用约定\"></a>覆盖equals时请遵守通用约定</h2><h3 id=\"什么时候应该覆盖Object-equals？\"><a href=\"#什么时候应该覆盖Object-equals？\" class=\"headerlink\" title=\"什么时候应该覆盖Object.equals？\"></a>什么时候应该覆盖<code>Object.equals</code>？</h3><p>-如果类具有自己的“逻辑相等”，且超类没有覆盖equals来实现我们想要的功能。</p>\n<h3 id=\"覆盖equals方法的约定\"><a href=\"#覆盖equals方法的约定\" class=\"headerlink\" title=\"覆盖equals方法的约定\"></a>覆盖equals方法的约定</h3><ul>\n<li>自反性<br>对于任何非null的引用值x， <code>x.equals(x)</code>必须返回true</li>\n<li>对称性<br>对于任何非null的引用值x和y，当且仅当<code>y.equals(x)</code>返回true时，<code>x.equals(y)</code>必须返回true。</li>\n<li>传递性<br>对于任何非null的引用值x、y和z，如果<code>x.equals(y)</code>返回true，并且<code>y.equals(z)</code>也true，则<code>x.equals(z)</code>必须true。</li>\n<li>一致性<br>对于任何非null的引用值x和y，只要比较操作在对象中所用的信息没有被修改，多次调用<code>x.equals(y)</code>结果都会一致。</li>\n<li>对于任何非null的引用值x，<code>x.equals(null) = false</code></li>\n</ul>\n<h3 id=\"实现高质量equals方法诀窍\"><a href=\"#实现高质量equals方法诀窍\" class=\"headerlink\" title=\"实现高质量equals方法诀窍\"></a>实现高质量equals方法诀窍</h3><ol>\n<li>使用 == 操作符检查“参数是否为这个对象的引用”。如果是则返回true。</li>\n<li>使用 instanceof 操作符检查“参数是否为正确类型”。如果不是则返回false。</li>\n<li>把参数转换为正确类型</li>\n<li>对于该类中每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。</li>\n<li>编写完成后见检查是否对称、传递、一致</li>\n<li>覆盖equals时总要覆盖hashCode</li>\n<li>不啊哟将equals声明中的Object对象替换为其他类型</li>\n</ol>\n<hr>\n<h2 id=\"覆盖equals时总要覆盖hashCode\"><a href=\"#覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"覆盖equals时总要覆盖hashCode\"></a>覆盖equals时总要覆盖hashCode</h2><p>Object规范中： </p>\n<ul>\n<li>在应用程序执行期间，只要对象的equals方法的比较操作所用到信息没有被修改，这同一个对象调用多次，hashCode方法必须返回一致的答案。在同一个应用程序的多次执行过程中，每次执行返回的整数可以不一致。</li>\n<li>如果两个对象根据equals方法比较是相等的，那么调用两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</li>\n<li>如果两个对象根据equals方法比较是不等，那么调用两个对象中任意一个对象的hashCode方法不一定要产生不同的整数结果。但是给不相等的对象产生截然不同的整数结果，有可能提高散列表性能。</li>\n</ul>\n<hr>\n<h2 id=\"始终要覆盖toString\"><a href=\"#始终要覆盖toString\" class=\"headerlink\" title=\"始终要覆盖toString\"></a>始终要覆盖toString</h2><p><code>java.lang.Object</code>的toString实现返回的字符串是 类名称+ @ + 散列码的无符号十六机制表示法。<br>当调用<code>println</code>、<code>printf</code>、<code>+</code>以及<code>assert</code>或被调试器打印出来，toString方法会被自动调用。</p>\n<hr>\n<h2 id=\"谨慎地覆盖clone\"><a href=\"#谨慎地覆盖clone\" class=\"headerlink\" title=\"谨慎地覆盖clone\"></a>谨慎地覆盖clone</h2><p>实现对象拷贝的方法有以下：</p>\n<ul>\n<li>一个实现了<code>Cloneable</code>接口的类，用一个公有方法覆盖<code>lone。先调用</code>super.clone`然后修正任何需要修正的域。</li>\n<li>提供一个拷贝构造器或拷贝工厂。</li>\n</ul>\n<p>第二种方法更具优势。<br>拷贝构造器:</p>\n<pre><code>public Yum(Yum yum);\n</code></pre><p>拷贝工厂是类似于拷贝构造器的静态工厂：</p>\n<pre><code>public static Yum newInstance(Yum yum);\n</code></pre><hr>\n<h2 id=\"考虑实现Comparable接口\"><a href=\"#考虑实现Comparable接口\" class=\"headerlink\" title=\"考虑实现Comparable接口\"></a>考虑实现Comparable接口</h2><p><code>compareTo</code>方法是<code>Comparable</code>接口中唯一的方法。不但允许进行简单的等同性比较，而且允许执行顺序比较。<br>一旦类实现Comparable接口，就可以和许多泛型算法和依赖于该接口的集合实现进行协作。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第三章阅读笔记。</p>\n<hr>\n<h2 id=\"覆盖equals时请遵守通用约定\"><a href=\"#覆盖equals时请遵守通用约定\" class=\"headerlink\" title=\"覆盖equals时请遵守通用约定\"></a>覆盖equals时请遵守通用约定</h2><h3 id=\"什么时候应该覆盖Object-equals？\"><a href=\"#什么时候应该覆盖Object-equals？\" class=\"headerlink\" title=\"什么时候应该覆盖Object.equals？\"></a>什么时候应该覆盖<code>Object.equals</code>？</h3><p>-如果类具有自己的“逻辑相等”，且超类没有覆盖equals来实现我们想要的功能。</p>\n<h3 id=\"覆盖equals方法的约定\"><a href=\"#覆盖equals方法的约定\" class=\"headerlink\" title=\"覆盖equals方法的约定\"></a>覆盖equals方法的约定</h3><ul>\n<li>自反性<br>对于任何非null的引用值x， <code>x.equals(x)</code>必须返回true</li>\n<li>对称性<br>对于任何非null的引用值x和y，当且仅当<code>y.equals(x)</code>返回true时，<code>x.equals(y)</code>必须返回true。</li>\n<li>传递性<br>对于任何非null的引用值x、y和z，如果<code>x.equals(y)</code>返回true，并且<code>y.equals(z)</code>也true，则<code>x.equals(z)</code>必须true。</li>\n<li>一致性<br>对于任何非null的引用值x和y，只要比较操作在对象中所用的信息没有被修改，多次调用<code>x.equals(y)</code>结果都会一致。</li>\n<li>对于任何非null的引用值x，<code>x.equals(null) = false</code></li>\n</ul>\n<h3 id=\"实现高质量equals方法诀窍\"><a href=\"#实现高质量equals方法诀窍\" class=\"headerlink\" title=\"实现高质量equals方法诀窍\"></a>实现高质量equals方法诀窍</h3><ol>\n<li>使用 == 操作符检查“参数是否为这个对象的引用”。如果是则返回true。</li>\n<li>使用 instanceof 操作符检查“参数是否为正确类型”。如果不是则返回false。</li>\n<li>把参数转换为正确类型</li>\n<li>对于该类中每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。</li>\n<li>编写完成后见检查是否对称、传递、一致</li>\n<li>覆盖equals时总要覆盖hashCode</li>\n<li>不啊哟将equals声明中的Object对象替换为其他类型</li>\n</ol>\n<hr>\n<h2 id=\"覆盖equals时总要覆盖hashCode\"><a href=\"#覆盖equals时总要覆盖hashCode\" class=\"headerlink\" title=\"覆盖equals时总要覆盖hashCode\"></a>覆盖equals时总要覆盖hashCode</h2><p>Object规范中： </p>\n<ul>\n<li>在应用程序执行期间，只要对象的equals方法的比较操作所用到信息没有被修改，这同一个对象调用多次，hashCode方法必须返回一致的答案。在同一个应用程序的多次执行过程中，每次执行返回的整数可以不一致。</li>\n<li>如果两个对象根据equals方法比较是相等的，那么调用两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</li>\n<li>如果两个对象根据equals方法比较是不等，那么调用两个对象中任意一个对象的hashCode方法不一定要产生不同的整数结果。但是给不相等的对象产生截然不同的整数结果，有可能提高散列表性能。</li>\n</ul>\n<hr>\n<h2 id=\"始终要覆盖toString\"><a href=\"#始终要覆盖toString\" class=\"headerlink\" title=\"始终要覆盖toString\"></a>始终要覆盖toString</h2><p><code>java.lang.Object</code>的toString实现返回的字符串是 类名称+ @ + 散列码的无符号十六机制表示法。<br>当调用<code>println</code>、<code>printf</code>、<code>+</code>以及<code>assert</code>或被调试器打印出来，toString方法会被自动调用。</p>\n<hr>\n<h2 id=\"谨慎地覆盖clone\"><a href=\"#谨慎地覆盖clone\" class=\"headerlink\" title=\"谨慎地覆盖clone\"></a>谨慎地覆盖clone</h2><p>实现对象拷贝的方法有以下：</p>\n<ul>\n<li>一个实现了<code>Cloneable</code>接口的类，用一个公有方法覆盖<code>lone。先调用</code>super.clone`然后修正任何需要修正的域。</li>\n<li>提供一个拷贝构造器或拷贝工厂。</li>\n</ul>\n<p>第二种方法更具优势。<br>拷贝构造器:</p>\n<pre><code>public Yum(Yum yum);\n</code></pre><p>拷贝工厂是类似于拷贝构造器的静态工厂：</p>\n<pre><code>public static Yum newInstance(Yum yum);\n</code></pre><hr>\n<h2 id=\"考虑实现Comparable接口\"><a href=\"#考虑实现Comparable接口\" class=\"headerlink\" title=\"考虑实现Comparable接口\"></a>考虑实现Comparable接口</h2><p><code>compareTo</code>方法是<code>Comparable</code>接口中唯一的方法。不但允许进行简单的等同性比较，而且允许执行顺序比较。<br>一旦类实现Comparable接口，就可以和许多泛型算法和依赖于该接口的集合实现进行协作。</p>\n"},{"title":"类与接口--《Effective Java》","date":"2017-02-08T03:09:43.000Z","_content":"## 前言\n本文为阅读《Effective Java》第四章阅读笔记。\n\n---\n\n## 最小化类和成员的可访问性\n### 信息隐藏 information hiding/封装 encapsulation：  \n良好的模块隐藏所有的实现细节，把API与实现清晰地隔离开。模块之间只通过API进行通信，并不需要知道其他模块内部工作情况。\n\n### 信息隐藏的好处  \n有效解除各模块之间的耦合关系，使其可以独立开发、测试、优化、使用、理解和修改，从而加快系统开发速度，也减轻了维护的负担，可以有效地调节性能。  \n信息隐藏提高了软件的可重用性。降低了构建大型系统的风险。\n\n### 规则\n尽可能使每个类或成员不被外界访问。  \n访问级别如下：\n* private -- 只有在声明该成员的顶层类内部才可访问\n* package-private -- 默认访问级别。声明该成员的包内部的任何类都可以访问该成员。\n* protected -- 声明该成员的类的子类可访问，声明该成员的包内部的任何类也可访问该成员。\n* public -- 任何地方都可访问。\n\n实例域绝不能是公有的。除了公有静态final域的特殊情形之外，公有域都不应该包含公有域，并要确保公有静态final域引用的对象都是不可变的。\n\n---\n\n## 在公有类中使用访问方法而不是公有域\n如果类可以在它所在的包的外部进行访问，就提供访问方法。\n公有类永远不应该暴露可变的域。\n\n---\n\n## 使可变性最小化\n为了使类成为不可变，要遵循以下规则：\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 使所有的域都是final的\n4. 使所有的域都成为私有的。\n5. 确保对于任何可变组件的互斥访问。\n\n不可变对象本质上是线程安全的，不要求同步。  \n不可变对象可以被自由地共享。\n\n不可变类的缺点： 对于每个不同的值都需要一个单独的对象。\n\n---\n\n## 复合优先于继承（不包括接口继承）\n继承的问题在于超类改变后，子类会出现相应的错误。  \n只有当子类是超类的子类型(\"is-a\"关系)时，才适合用继承。\n\n### 复合 composition\n在新的类中增加一个私有域，引用现有类的一个实例。\n转发 forwarding -- 新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法并返回其结果。  \n转发方法 forwarding method -- 新类中的方法\n\n优势： 不依赖于现有类的实现细节。即使现有类增加了新方法也不会影响新的类。\n\n---\n\n## 要么为继承而设计，并提供文档说明，要么就禁止继承\n\n为了允许继承，类的构造器绝不能调用可被覆盖的方法。因为超类的构造器在子类的构造器之前运行，所以子类中覆盖版本的方法会在子类构造器之前就先被调用。\n\n对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化。\n要么把这个类声明为final，要么把所有构造器变为私有或包级私有，并增加一些公有的静态工厂来替代构造器。\n\n--- \n\n## 接口优于抽象类\n抽象类允许包含某些方法的实现，但接口不行。  \n为了实现由抽象类定义的类型，类必须成为抽象类的一个子类。Java只允许单继承。\n\n接口允许构造非层次结构的类型框架。\n\n---\n\n## 接口只用于定义类型\n常量接口模式是对接口的不良使用，将实现细节泄漏到该类的导出API中。\n\n如果大量利用工具类导出的常量，可以利用静态导入机制，避免用类名来修饰常量名。\n\n接口应该只被用来定义类型，不应该被用来导出常量。\n\n---\n\n## 类层次优于标签类\n标签类 tagged class 过于冗长，容易出错，效率底下。  \n举例： Figure 类同时包含 CIRCLE,RECTANGLE 的各种属性和方法。  \n解决方案：  \n将标签类转换为类层次。例如 Figure类只需要`area`的方法，而其他的东西类似radius针对于圆形、length和width针对于矩形的放在各自子类中。\n\n类层次的好处：  \n反映类型之间本质上的层次关系，有助于增强灵活性，并进行更好的编译时类型检查。\n\n---\n\n## 用函数对象表示策略\n函数指针的主要用途就是实现策略模式。在JAVA中，要声明一个接口来表示该策略，并为每个具体策略声明一个实现了该接口的类。当一个具体策略只被使用一次时，通常使用匿名类来声明和实例化这个具体策略类。 当一个具体策略是设计用来重复使用的时候，它的类通常就要被实现为私有的静态成员类，并通过公有的静态final域被导出，其类型为该策略接口。\n\n---\n\n## 优先考虑静态成员类\n嵌套类 -- 被定义在另一个类的内部的类。\n嵌套类有四种：\n1. 静态成员类 static member class  \n可以访问外围类的所有成员，包括声明为私有的成员。  \n静态成员类的声明中包含`static`  \n如果声明成员类不要求访问外围实例，就要使用静态成员。\n\n2. 非静态成员类 nonstatic member class  \n在其内部，可以调用外围实例的方法，或利用修饰过的this构造获得外围实例的引用。  \n如果嵌套类的实例可以在它外围类的实例之外独立存在，这个嵌套类必须是静态成员类。  \n在没有外围实例的情况下，要想创建非静态成员类的实例是不可能的。  \n常见用法： 定义一个Adapter\n3. 匿名类 anouymous class  \n常见用法： 动态地创建函数对象； 创建过程对象； 在静态工厂方法内部。\n4. 局部类 local class\n\n如果嵌套类需要在单个方法之外仍可见或者太长了不适合放在方法内部，就应该使用成员类。如果成员类的每个实例都需要一个指向其外围实例的引用，就做成非静态；否则就做成静态的。  \n假设这个嵌套类属于一个方法的内部，如果只需要在一个地方创建实例，并且已经有了一个预置的类型可以说明这个类的特征，就做成匿名类，否则就做成局部类。","source":"_posts/effective-java-ch4-Classes-Interfaces.md","raw":"---\ntitle: 类与接口--《Effective Java》\ndate: 2017-02-08 11:09:43\ncategories: [后台开发, JAVA开发]\ntags: [JAVA, Effective Java]\n---\n## 前言\n本文为阅读《Effective Java》第四章阅读笔记。\n\n---\n\n## 最小化类和成员的可访问性\n### 信息隐藏 information hiding/封装 encapsulation：  \n良好的模块隐藏所有的实现细节，把API与实现清晰地隔离开。模块之间只通过API进行通信，并不需要知道其他模块内部工作情况。\n\n### 信息隐藏的好处  \n有效解除各模块之间的耦合关系，使其可以独立开发、测试、优化、使用、理解和修改，从而加快系统开发速度，也减轻了维护的负担，可以有效地调节性能。  \n信息隐藏提高了软件的可重用性。降低了构建大型系统的风险。\n\n### 规则\n尽可能使每个类或成员不被外界访问。  \n访问级别如下：\n* private -- 只有在声明该成员的顶层类内部才可访问\n* package-private -- 默认访问级别。声明该成员的包内部的任何类都可以访问该成员。\n* protected -- 声明该成员的类的子类可访问，声明该成员的包内部的任何类也可访问该成员。\n* public -- 任何地方都可访问。\n\n实例域绝不能是公有的。除了公有静态final域的特殊情形之外，公有域都不应该包含公有域，并要确保公有静态final域引用的对象都是不可变的。\n\n---\n\n## 在公有类中使用访问方法而不是公有域\n如果类可以在它所在的包的外部进行访问，就提供访问方法。\n公有类永远不应该暴露可变的域。\n\n---\n\n## 使可变性最小化\n为了使类成为不可变，要遵循以下规则：\n1. 不要提供任何会修改对象状态的方法\n2. 保证类不会被扩展\n3. 使所有的域都是final的\n4. 使所有的域都成为私有的。\n5. 确保对于任何可变组件的互斥访问。\n\n不可变对象本质上是线程安全的，不要求同步。  \n不可变对象可以被自由地共享。\n\n不可变类的缺点： 对于每个不同的值都需要一个单独的对象。\n\n---\n\n## 复合优先于继承（不包括接口继承）\n继承的问题在于超类改变后，子类会出现相应的错误。  \n只有当子类是超类的子类型(\"is-a\"关系)时，才适合用继承。\n\n### 复合 composition\n在新的类中增加一个私有域，引用现有类的一个实例。\n转发 forwarding -- 新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法并返回其结果。  \n转发方法 forwarding method -- 新类中的方法\n\n优势： 不依赖于现有类的实现细节。即使现有类增加了新方法也不会影响新的类。\n\n---\n\n## 要么为继承而设计，并提供文档说明，要么就禁止继承\n\n为了允许继承，类的构造器绝不能调用可被覆盖的方法。因为超类的构造器在子类的构造器之前运行，所以子类中覆盖版本的方法会在子类构造器之前就先被调用。\n\n对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化。\n要么把这个类声明为final，要么把所有构造器变为私有或包级私有，并增加一些公有的静态工厂来替代构造器。\n\n--- \n\n## 接口优于抽象类\n抽象类允许包含某些方法的实现，但接口不行。  \n为了实现由抽象类定义的类型，类必须成为抽象类的一个子类。Java只允许单继承。\n\n接口允许构造非层次结构的类型框架。\n\n---\n\n## 接口只用于定义类型\n常量接口模式是对接口的不良使用，将实现细节泄漏到该类的导出API中。\n\n如果大量利用工具类导出的常量，可以利用静态导入机制，避免用类名来修饰常量名。\n\n接口应该只被用来定义类型，不应该被用来导出常量。\n\n---\n\n## 类层次优于标签类\n标签类 tagged class 过于冗长，容易出错，效率底下。  \n举例： Figure 类同时包含 CIRCLE,RECTANGLE 的各种属性和方法。  \n解决方案：  \n将标签类转换为类层次。例如 Figure类只需要`area`的方法，而其他的东西类似radius针对于圆形、length和width针对于矩形的放在各自子类中。\n\n类层次的好处：  \n反映类型之间本质上的层次关系，有助于增强灵活性，并进行更好的编译时类型检查。\n\n---\n\n## 用函数对象表示策略\n函数指针的主要用途就是实现策略模式。在JAVA中，要声明一个接口来表示该策略，并为每个具体策略声明一个实现了该接口的类。当一个具体策略只被使用一次时，通常使用匿名类来声明和实例化这个具体策略类。 当一个具体策略是设计用来重复使用的时候，它的类通常就要被实现为私有的静态成员类，并通过公有的静态final域被导出，其类型为该策略接口。\n\n---\n\n## 优先考虑静态成员类\n嵌套类 -- 被定义在另一个类的内部的类。\n嵌套类有四种：\n1. 静态成员类 static member class  \n可以访问外围类的所有成员，包括声明为私有的成员。  \n静态成员类的声明中包含`static`  \n如果声明成员类不要求访问外围实例，就要使用静态成员。\n\n2. 非静态成员类 nonstatic member class  \n在其内部，可以调用外围实例的方法，或利用修饰过的this构造获得外围实例的引用。  \n如果嵌套类的实例可以在它外围类的实例之外独立存在，这个嵌套类必须是静态成员类。  \n在没有外围实例的情况下，要想创建非静态成员类的实例是不可能的。  \n常见用法： 定义一个Adapter\n3. 匿名类 anouymous class  \n常见用法： 动态地创建函数对象； 创建过程对象； 在静态工厂方法内部。\n4. 局部类 local class\n\n如果嵌套类需要在单个方法之外仍可见或者太长了不适合放在方法内部，就应该使用成员类。如果成员类的每个实例都需要一个指向其外围实例的引用，就做成非静态；否则就做成静态的。  \n假设这个嵌套类属于一个方法的内部，如果只需要在一个地方创建实例，并且已经有了一个预置的类型可以说明这个类的特征，就做成匿名类，否则就做成局部类。","slug":"effective-java-ch4-Classes-Interfaces","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kje000ey3qw9dlecta7","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第四章阅读笔记。</p>\n<hr>\n<h2 id=\"最小化类和成员的可访问性\"><a href=\"#最小化类和成员的可访问性\" class=\"headerlink\" title=\"最小化类和成员的可访问性\"></a>最小化类和成员的可访问性</h2><h3 id=\"信息隐藏-information-hiding-封装-encapsulation：\"><a href=\"#信息隐藏-information-hiding-封装-encapsulation：\" class=\"headerlink\" title=\"信息隐藏 information hiding/封装 encapsulation：\"></a>信息隐藏 information hiding/封装 encapsulation：</h3><p>良好的模块隐藏所有的实现细节，把API与实现清晰地隔离开。模块之间只通过API进行通信，并不需要知道其他模块内部工作情况。</p>\n<h3 id=\"信息隐藏的好处\"><a href=\"#信息隐藏的好处\" class=\"headerlink\" title=\"信息隐藏的好处\"></a>信息隐藏的好处</h3><p>有效解除各模块之间的耦合关系，使其可以独立开发、测试、优化、使用、理解和修改，从而加快系统开发速度，也减轻了维护的负担，可以有效地调节性能。<br>信息隐藏提高了软件的可重用性。降低了构建大型系统的风险。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>尽可能使每个类或成员不被外界访问。<br>访问级别如下：</p>\n<ul>\n<li>private – 只有在声明该成员的顶层类内部才可访问</li>\n<li>package-private – 默认访问级别。声明该成员的包内部的任何类都可以访问该成员。</li>\n<li>protected – 声明该成员的类的子类可访问，声明该成员的包内部的任何类也可访问该成员。</li>\n<li>public – 任何地方都可访问。</li>\n</ul>\n<p>实例域绝不能是公有的。除了公有静态final域的特殊情形之外，公有域都不应该包含公有域，并要确保公有静态final域引用的对象都是不可变的。</p>\n<hr>\n<h2 id=\"在公有类中使用访问方法而不是公有域\"><a href=\"#在公有类中使用访问方法而不是公有域\" class=\"headerlink\" title=\"在公有类中使用访问方法而不是公有域\"></a>在公有类中使用访问方法而不是公有域</h2><p>如果类可以在它所在的包的外部进行访问，就提供访问方法。<br>公有类永远不应该暴露可变的域。</p>\n<hr>\n<h2 id=\"使可变性最小化\"><a href=\"#使可变性最小化\" class=\"headerlink\" title=\"使可变性最小化\"></a>使可变性最小化</h2><p>为了使类成为不可变，要遵循以下规则：</p>\n<ol>\n<li>不要提供任何会修改对象状态的方法</li>\n<li>保证类不会被扩展</li>\n<li>使所有的域都是final的</li>\n<li>使所有的域都成为私有的。</li>\n<li>确保对于任何可变组件的互斥访问。</li>\n</ol>\n<p>不可变对象本质上是线程安全的，不要求同步。<br>不可变对象可以被自由地共享。</p>\n<p>不可变类的缺点： 对于每个不同的值都需要一个单独的对象。</p>\n<hr>\n<h2 id=\"复合优先于继承（不包括接口继承）\"><a href=\"#复合优先于继承（不包括接口继承）\" class=\"headerlink\" title=\"复合优先于继承（不包括接口继承）\"></a>复合优先于继承（不包括接口继承）</h2><p>继承的问题在于超类改变后，子类会出现相应的错误。<br>只有当子类是超类的子类型(“is-a”关系)时，才适合用继承。</p>\n<h3 id=\"复合-composition\"><a href=\"#复合-composition\" class=\"headerlink\" title=\"复合 composition\"></a>复合 composition</h3><p>在新的类中增加一个私有域，引用现有类的一个实例。<br>转发 forwarding – 新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法并返回其结果。<br>转发方法 forwarding method – 新类中的方法</p>\n<p>优势： 不依赖于现有类的实现细节。即使现有类增加了新方法也不会影响新的类。</p>\n<hr>\n<h2 id=\"要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>要么为继承而设计，并提供文档说明，要么就禁止继承</h2><p>为了允许继承，类的构造器绝不能调用可被覆盖的方法。因为超类的构造器在子类的构造器之前运行，所以子类中覆盖版本的方法会在子类构造器之前就先被调用。</p>\n<p>对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化。<br>要么把这个类声明为final，要么把所有构造器变为私有或包级私有，并增加一些公有的静态工厂来替代构造器。</p>\n<hr>\n<h2 id=\"接口优于抽象类\"><a href=\"#接口优于抽象类\" class=\"headerlink\" title=\"接口优于抽象类\"></a>接口优于抽象类</h2><p>抽象类允许包含某些方法的实现，但接口不行。<br>为了实现由抽象类定义的类型，类必须成为抽象类的一个子类。Java只允许单继承。</p>\n<p>接口允许构造非层次结构的类型框架。</p>\n<hr>\n<h2 id=\"接口只用于定义类型\"><a href=\"#接口只用于定义类型\" class=\"headerlink\" title=\"接口只用于定义类型\"></a>接口只用于定义类型</h2><p>常量接口模式是对接口的不良使用，将实现细节泄漏到该类的导出API中。</p>\n<p>如果大量利用工具类导出的常量，可以利用静态导入机制，避免用类名来修饰常量名。</p>\n<p>接口应该只被用来定义类型，不应该被用来导出常量。</p>\n<hr>\n<h2 id=\"类层次优于标签类\"><a href=\"#类层次优于标签类\" class=\"headerlink\" title=\"类层次优于标签类\"></a>类层次优于标签类</h2><p>标签类 tagged class 过于冗长，容易出错，效率底下。<br>举例： Figure 类同时包含 CIRCLE,RECTANGLE 的各种属性和方法。<br>解决方案：<br>将标签类转换为类层次。例如 Figure类只需要<code>area</code>的方法，而其他的东西类似radius针对于圆形、length和width针对于矩形的放在各自子类中。</p>\n<p>类层次的好处：<br>反映类型之间本质上的层次关系，有助于增强灵活性，并进行更好的编译时类型检查。</p>\n<hr>\n<h2 id=\"用函数对象表示策略\"><a href=\"#用函数对象表示策略\" class=\"headerlink\" title=\"用函数对象表示策略\"></a>用函数对象表示策略</h2><p>函数指针的主要用途就是实现策略模式。在JAVA中，要声明一个接口来表示该策略，并为每个具体策略声明一个实现了该接口的类。当一个具体策略只被使用一次时，通常使用匿名类来声明和实例化这个具体策略类。 当一个具体策略是设计用来重复使用的时候，它的类通常就要被实现为私有的静态成员类，并通过公有的静态final域被导出，其类型为该策略接口。</p>\n<hr>\n<h2 id=\"优先考虑静态成员类\"><a href=\"#优先考虑静态成员类\" class=\"headerlink\" title=\"优先考虑静态成员类\"></a>优先考虑静态成员类</h2><p>嵌套类 – 被定义在另一个类的内部的类。<br>嵌套类有四种：</p>\n<ol>\n<li><p>静态成员类 static member class<br>可以访问外围类的所有成员，包括声明为私有的成员。<br>静态成员类的声明中包含<code>static</code><br>如果声明成员类不要求访问外围实例，就要使用静态成员。</p>\n</li>\n<li><p>非静态成员类 nonstatic member class<br>在其内部，可以调用外围实例的方法，或利用修饰过的this构造获得外围实例的引用。<br>如果嵌套类的实例可以在它外围类的实例之外独立存在，这个嵌套类必须是静态成员类。<br>在没有外围实例的情况下，要想创建非静态成员类的实例是不可能的。<br>常见用法： 定义一个Adapter</p>\n</li>\n<li>匿名类 anouymous class<br>常见用法： 动态地创建函数对象； 创建过程对象； 在静态工厂方法内部。</li>\n<li>局部类 local class</li>\n</ol>\n<p>如果嵌套类需要在单个方法之外仍可见或者太长了不适合放在方法内部，就应该使用成员类。如果成员类的每个实例都需要一个指向其外围实例的引用，就做成非静态；否则就做成静态的。<br>假设这个嵌套类属于一个方法的内部，如果只需要在一个地方创建实例，并且已经有了一个预置的类型可以说明这个类的特征，就做成匿名类，否则就做成局部类。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第四章阅读笔记。</p>\n<hr>\n<h2 id=\"最小化类和成员的可访问性\"><a href=\"#最小化类和成员的可访问性\" class=\"headerlink\" title=\"最小化类和成员的可访问性\"></a>最小化类和成员的可访问性</h2><h3 id=\"信息隐藏-information-hiding-封装-encapsulation：\"><a href=\"#信息隐藏-information-hiding-封装-encapsulation：\" class=\"headerlink\" title=\"信息隐藏 information hiding/封装 encapsulation：\"></a>信息隐藏 information hiding/封装 encapsulation：</h3><p>良好的模块隐藏所有的实现细节，把API与实现清晰地隔离开。模块之间只通过API进行通信，并不需要知道其他模块内部工作情况。</p>\n<h3 id=\"信息隐藏的好处\"><a href=\"#信息隐藏的好处\" class=\"headerlink\" title=\"信息隐藏的好处\"></a>信息隐藏的好处</h3><p>有效解除各模块之间的耦合关系，使其可以独立开发、测试、优化、使用、理解和修改，从而加快系统开发速度，也减轻了维护的负担，可以有效地调节性能。<br>信息隐藏提高了软件的可重用性。降低了构建大型系统的风险。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>尽可能使每个类或成员不被外界访问。<br>访问级别如下：</p>\n<ul>\n<li>private – 只有在声明该成员的顶层类内部才可访问</li>\n<li>package-private – 默认访问级别。声明该成员的包内部的任何类都可以访问该成员。</li>\n<li>protected – 声明该成员的类的子类可访问，声明该成员的包内部的任何类也可访问该成员。</li>\n<li>public – 任何地方都可访问。</li>\n</ul>\n<p>实例域绝不能是公有的。除了公有静态final域的特殊情形之外，公有域都不应该包含公有域，并要确保公有静态final域引用的对象都是不可变的。</p>\n<hr>\n<h2 id=\"在公有类中使用访问方法而不是公有域\"><a href=\"#在公有类中使用访问方法而不是公有域\" class=\"headerlink\" title=\"在公有类中使用访问方法而不是公有域\"></a>在公有类中使用访问方法而不是公有域</h2><p>如果类可以在它所在的包的外部进行访问，就提供访问方法。<br>公有类永远不应该暴露可变的域。</p>\n<hr>\n<h2 id=\"使可变性最小化\"><a href=\"#使可变性最小化\" class=\"headerlink\" title=\"使可变性最小化\"></a>使可变性最小化</h2><p>为了使类成为不可变，要遵循以下规则：</p>\n<ol>\n<li>不要提供任何会修改对象状态的方法</li>\n<li>保证类不会被扩展</li>\n<li>使所有的域都是final的</li>\n<li>使所有的域都成为私有的。</li>\n<li>确保对于任何可变组件的互斥访问。</li>\n</ol>\n<p>不可变对象本质上是线程安全的，不要求同步。<br>不可变对象可以被自由地共享。</p>\n<p>不可变类的缺点： 对于每个不同的值都需要一个单独的对象。</p>\n<hr>\n<h2 id=\"复合优先于继承（不包括接口继承）\"><a href=\"#复合优先于继承（不包括接口继承）\" class=\"headerlink\" title=\"复合优先于继承（不包括接口继承）\"></a>复合优先于继承（不包括接口继承）</h2><p>继承的问题在于超类改变后，子类会出现相应的错误。<br>只有当子类是超类的子类型(“is-a”关系)时，才适合用继承。</p>\n<h3 id=\"复合-composition\"><a href=\"#复合-composition\" class=\"headerlink\" title=\"复合 composition\"></a>复合 composition</h3><p>在新的类中增加一个私有域，引用现有类的一个实例。<br>转发 forwarding – 新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法并返回其结果。<br>转发方法 forwarding method – 新类中的方法</p>\n<p>优势： 不依赖于现有类的实现细节。即使现有类增加了新方法也不会影响新的类。</p>\n<hr>\n<h2 id=\"要么为继承而设计，并提供文档说明，要么就禁止继承\"><a href=\"#要么为继承而设计，并提供文档说明，要么就禁止继承\" class=\"headerlink\" title=\"要么为继承而设计，并提供文档说明，要么就禁止继承\"></a>要么为继承而设计，并提供文档说明，要么就禁止继承</h2><p>为了允许继承，类的构造器绝不能调用可被覆盖的方法。因为超类的构造器在子类的构造器之前运行，所以子类中覆盖版本的方法会在子类构造器之前就先被调用。</p>\n<p>对于那些并非为了安全地进行子类化而设计和编写文档的类，要禁止子类化。<br>要么把这个类声明为final，要么把所有构造器变为私有或包级私有，并增加一些公有的静态工厂来替代构造器。</p>\n<hr>\n<h2 id=\"接口优于抽象类\"><a href=\"#接口优于抽象类\" class=\"headerlink\" title=\"接口优于抽象类\"></a>接口优于抽象类</h2><p>抽象类允许包含某些方法的实现，但接口不行。<br>为了实现由抽象类定义的类型，类必须成为抽象类的一个子类。Java只允许单继承。</p>\n<p>接口允许构造非层次结构的类型框架。</p>\n<hr>\n<h2 id=\"接口只用于定义类型\"><a href=\"#接口只用于定义类型\" class=\"headerlink\" title=\"接口只用于定义类型\"></a>接口只用于定义类型</h2><p>常量接口模式是对接口的不良使用，将实现细节泄漏到该类的导出API中。</p>\n<p>如果大量利用工具类导出的常量，可以利用静态导入机制，避免用类名来修饰常量名。</p>\n<p>接口应该只被用来定义类型，不应该被用来导出常量。</p>\n<hr>\n<h2 id=\"类层次优于标签类\"><a href=\"#类层次优于标签类\" class=\"headerlink\" title=\"类层次优于标签类\"></a>类层次优于标签类</h2><p>标签类 tagged class 过于冗长，容易出错，效率底下。<br>举例： Figure 类同时包含 CIRCLE,RECTANGLE 的各种属性和方法。<br>解决方案：<br>将标签类转换为类层次。例如 Figure类只需要<code>area</code>的方法，而其他的东西类似radius针对于圆形、length和width针对于矩形的放在各自子类中。</p>\n<p>类层次的好处：<br>反映类型之间本质上的层次关系，有助于增强灵活性，并进行更好的编译时类型检查。</p>\n<hr>\n<h2 id=\"用函数对象表示策略\"><a href=\"#用函数对象表示策略\" class=\"headerlink\" title=\"用函数对象表示策略\"></a>用函数对象表示策略</h2><p>函数指针的主要用途就是实现策略模式。在JAVA中，要声明一个接口来表示该策略，并为每个具体策略声明一个实现了该接口的类。当一个具体策略只被使用一次时，通常使用匿名类来声明和实例化这个具体策略类。 当一个具体策略是设计用来重复使用的时候，它的类通常就要被实现为私有的静态成员类，并通过公有的静态final域被导出，其类型为该策略接口。</p>\n<hr>\n<h2 id=\"优先考虑静态成员类\"><a href=\"#优先考虑静态成员类\" class=\"headerlink\" title=\"优先考虑静态成员类\"></a>优先考虑静态成员类</h2><p>嵌套类 – 被定义在另一个类的内部的类。<br>嵌套类有四种：</p>\n<ol>\n<li><p>静态成员类 static member class<br>可以访问外围类的所有成员，包括声明为私有的成员。<br>静态成员类的声明中包含<code>static</code><br>如果声明成员类不要求访问外围实例，就要使用静态成员。</p>\n</li>\n<li><p>非静态成员类 nonstatic member class<br>在其内部，可以调用外围实例的方法，或利用修饰过的this构造获得外围实例的引用。<br>如果嵌套类的实例可以在它外围类的实例之外独立存在，这个嵌套类必须是静态成员类。<br>在没有外围实例的情况下，要想创建非静态成员类的实例是不可能的。<br>常见用法： 定义一个Adapter</p>\n</li>\n<li>匿名类 anouymous class<br>常见用法： 动态地创建函数对象； 创建过程对象； 在静态工厂方法内部。</li>\n<li>局部类 local class</li>\n</ol>\n<p>如果嵌套类需要在单个方法之外仍可见或者太长了不适合放在方法内部，就应该使用成员类。如果成员类的每个实例都需要一个指向其外围实例的引用，就做成非静态；否则就做成静态的。<br>假设这个嵌套类属于一个方法的内部，如果只需要在一个地方创建实例，并且已经有了一个预置的类型可以说明这个类的特征，就做成匿名类，否则就做成局部类。</p>\n"},{"title":"泛型--《Effective Java》","date":"2017-02-09T05:30:14.000Z","_content":"\n## 前言\n本文为阅读《Effective Java》第五章阅读笔记。\n\n## 不要在新代码中使用原生态类型\n声明中具有一个或多个类型参数的类/接口 -- 泛型类/接口 \n\n使用原生态类型会在运行时导致异常。原生态只是为了与引入泛型之前的遗留代码进行兼容和互用而提供的。\n\n`Set<Object>`是个参数化类型，表示可以包含任何对象类型的一个集合。\n\n`Set<?>`是一个通配符类型，表示只能包含某种未知对象类型的一个集合。\n\n`Set`是个原生态类型，脱离了泛型系统，是不安全的。\n\n| 术语 | 实例 |\n| --- | --- |\n| 参数化的类型 | List<String> |\n| 实际类型参数 | String |\n| 泛型 | List<E> |\n| 形式类型参数 | E |\n| 无限制通配符类型 | List<?> |\n| 原生态类型 | List |\n| 有限制类型参数 | < E extends Number> |\n| 递归类型限制 | < T extends Comparable<T>> |\n| 有限制通配符类型 | List<? extends Number> |\n| 泛型方法 | static <E> List<E> asList(E[] a) |\n| 类型令牌 | String class |\n\n---\n\n##  消除非受检警告\n不要忽略非受检警告。每条警告都表示可能在运行时抛出ClassCastException异常，要尽最大努力消除这些警告。\n\n如果无法消除非受检警告，同时可以证明引起警告的代码是类型安全的，就可以在尽可能小的范围中，用`@SuppressWarnings(\"unchecked\")`注解禁止该警告，要用注释把禁止该警告的原因记录下来。\n\n---\n\n## 列表优先于数组\n数组是具体化的，在运行时才知道并检查它们的元素类型约束。\n\n泛型是通过erasure(使泛型可以与没有使用泛型的代码随意进行互用)来实现的。只在编译时强化它们的类型信息，并在运行时丢弃元素类型信息。\n\n数组提供了运行时的类型安全，但是没有编译时的类型安全。反之泛型。\n\n---\n\n## 优先考虑泛型\n使用泛型比使用需要在客户端代码中进行转换的类型更为安全，也更简单。\n\n---\n\n## 优先考虑泛型方法\n静态工具方法尤其适合于泛型化。\n\n泛型方法 无需明确指定类型参数的值。\n\n泛型静态工厂方法\n\n    //Generic static factory method\n    public static <K, V> HashMap<K, V> newHashMap() {\n        return new HashMap<K,V>();\n    }\n\n    //Parameterized type instance creation with static factory\n    Map<String, List<String>> anagrams = newHashMap();\n\n---\n\n## 利用有限制通配符来提升API的灵活性\n参数化类型是不可变的。\n\nPECS表示producer-extends, consumer-super\n\n如果参数化类型表示一个T生产者，就使用`<? extends T>`; 如果表示一个T消费者，就使用`<? super T>`。 \n\n不要用通配符类型作为返回类型。\n\n如果类型参数旨在方法声明中出现一次，就可以用通配符取代它。\n\n    public static void swap(List<?> list, int i, int j) {\n        swapHelper(list, i, j);\n    }\n\n    //private helper method for wildcard capture\n    private static <E> void swapHelper(List<E> list, int i, int j) {\n        list.set(i, list.set(j, list.get(i)));\n    }\n\n---\n\n## 优先考虑类型安全的异构容器\n\n    //Typesafe heterogeneous container pattern - client\n    public static void main(String[] args){\n        Favorites f = new Favorites();\n\n        f.putFavorite(String.class, \"Java\");\n        f.putFavorite(Integer.class, 0xcafebabe);\n        f.putFavorite(Class.class, Favorites.class);\n\n        String favoriteString = f.getFavorite(String.class);\n        int favoriteInteger = f.getFavorite(Integer.class);\n        Class<?> favoriteClass = f.getFavorite(Class.class);\n        \n        System.out.printf(\"%s %x %s%n, favoriteString,\n            favoriteInteger, favoriteClass.getName());\n        //Java cafebabe Favorites.\n    }\n\n\n    //Typesafe heterogeneous container pattern - implementation\n    public class Favorites {\n        private Map<Class<?>, Object> favorites = \n            new HashMap<Class<?>, Object>();\n\n        public <T> void putFavorite(Class<T> type, T instance) {\n            if(type == null)\n                throw new NullPointerException(\"Type is null\");\n            favorites.put(type, instance);\n        }\n\n        public <T> T getFavorite(Class<T> type) {\n            return type.cast(favorites.get(type));\n        }\n    }\n\n利用asSubclass在编译时读取类型未知的注解。\n\n    //Use of asSubclass to safely cast to a bounded type token\n    static Annotation getAnnotation(AnnotatedElement element,\n                                    String annotationTypeName) {\n        Class<?> annotationType = null; //Unbounded type token\n        try {\n            annotationType = Class.forName(annotationTypeName);\n        } catch(Excetion ex) {\n            throw new IllegalArgumentExcetion(ex);\n        }\n        return element.getAnnotation(\n            annotationType.asSubclass(Annotation.class);\n        )\n    }\n\n集合API说明了泛型的一般用法，限制你每个容器只能有固定数目的类型参数，可以通过将类型参数放在键上而不是容器上来避开这一限制。\n\n对于这种类型安全的异构容器，可以用Class对象作为键。以这种方式使用的Class对象称作类型令牌。","source":"_posts/effective-java-ch5-generics.md","raw":"---\ntitle: 泛型--《Effective Java》\ndate: 2017-02-09 13:30:14\ncategories: [后台开发, JAVA开发]\ntags: [JAVA, Effective Java]\n---\n\n## 前言\n本文为阅读《Effective Java》第五章阅读笔记。\n\n## 不要在新代码中使用原生态类型\n声明中具有一个或多个类型参数的类/接口 -- 泛型类/接口 \n\n使用原生态类型会在运行时导致异常。原生态只是为了与引入泛型之前的遗留代码进行兼容和互用而提供的。\n\n`Set<Object>`是个参数化类型，表示可以包含任何对象类型的一个集合。\n\n`Set<?>`是一个通配符类型，表示只能包含某种未知对象类型的一个集合。\n\n`Set`是个原生态类型，脱离了泛型系统，是不安全的。\n\n| 术语 | 实例 |\n| --- | --- |\n| 参数化的类型 | List<String> |\n| 实际类型参数 | String |\n| 泛型 | List<E> |\n| 形式类型参数 | E |\n| 无限制通配符类型 | List<?> |\n| 原生态类型 | List |\n| 有限制类型参数 | < E extends Number> |\n| 递归类型限制 | < T extends Comparable<T>> |\n| 有限制通配符类型 | List<? extends Number> |\n| 泛型方法 | static <E> List<E> asList(E[] a) |\n| 类型令牌 | String class |\n\n---\n\n##  消除非受检警告\n不要忽略非受检警告。每条警告都表示可能在运行时抛出ClassCastException异常，要尽最大努力消除这些警告。\n\n如果无法消除非受检警告，同时可以证明引起警告的代码是类型安全的，就可以在尽可能小的范围中，用`@SuppressWarnings(\"unchecked\")`注解禁止该警告，要用注释把禁止该警告的原因记录下来。\n\n---\n\n## 列表优先于数组\n数组是具体化的，在运行时才知道并检查它们的元素类型约束。\n\n泛型是通过erasure(使泛型可以与没有使用泛型的代码随意进行互用)来实现的。只在编译时强化它们的类型信息，并在运行时丢弃元素类型信息。\n\n数组提供了运行时的类型安全，但是没有编译时的类型安全。反之泛型。\n\n---\n\n## 优先考虑泛型\n使用泛型比使用需要在客户端代码中进行转换的类型更为安全，也更简单。\n\n---\n\n## 优先考虑泛型方法\n静态工具方法尤其适合于泛型化。\n\n泛型方法 无需明确指定类型参数的值。\n\n泛型静态工厂方法\n\n    //Generic static factory method\n    public static <K, V> HashMap<K, V> newHashMap() {\n        return new HashMap<K,V>();\n    }\n\n    //Parameterized type instance creation with static factory\n    Map<String, List<String>> anagrams = newHashMap();\n\n---\n\n## 利用有限制通配符来提升API的灵活性\n参数化类型是不可变的。\n\nPECS表示producer-extends, consumer-super\n\n如果参数化类型表示一个T生产者，就使用`<? extends T>`; 如果表示一个T消费者，就使用`<? super T>`。 \n\n不要用通配符类型作为返回类型。\n\n如果类型参数旨在方法声明中出现一次，就可以用通配符取代它。\n\n    public static void swap(List<?> list, int i, int j) {\n        swapHelper(list, i, j);\n    }\n\n    //private helper method for wildcard capture\n    private static <E> void swapHelper(List<E> list, int i, int j) {\n        list.set(i, list.set(j, list.get(i)));\n    }\n\n---\n\n## 优先考虑类型安全的异构容器\n\n    //Typesafe heterogeneous container pattern - client\n    public static void main(String[] args){\n        Favorites f = new Favorites();\n\n        f.putFavorite(String.class, \"Java\");\n        f.putFavorite(Integer.class, 0xcafebabe);\n        f.putFavorite(Class.class, Favorites.class);\n\n        String favoriteString = f.getFavorite(String.class);\n        int favoriteInteger = f.getFavorite(Integer.class);\n        Class<?> favoriteClass = f.getFavorite(Class.class);\n        \n        System.out.printf(\"%s %x %s%n, favoriteString,\n            favoriteInteger, favoriteClass.getName());\n        //Java cafebabe Favorites.\n    }\n\n\n    //Typesafe heterogeneous container pattern - implementation\n    public class Favorites {\n        private Map<Class<?>, Object> favorites = \n            new HashMap<Class<?>, Object>();\n\n        public <T> void putFavorite(Class<T> type, T instance) {\n            if(type == null)\n                throw new NullPointerException(\"Type is null\");\n            favorites.put(type, instance);\n        }\n\n        public <T> T getFavorite(Class<T> type) {\n            return type.cast(favorites.get(type));\n        }\n    }\n\n利用asSubclass在编译时读取类型未知的注解。\n\n    //Use of asSubclass to safely cast to a bounded type token\n    static Annotation getAnnotation(AnnotatedElement element,\n                                    String annotationTypeName) {\n        Class<?> annotationType = null; //Unbounded type token\n        try {\n            annotationType = Class.forName(annotationTypeName);\n        } catch(Excetion ex) {\n            throw new IllegalArgumentExcetion(ex);\n        }\n        return element.getAnnotation(\n            annotationType.asSubclass(Annotation.class);\n        )\n    }\n\n集合API说明了泛型的一般用法，限制你每个容器只能有固定数目的类型参数，可以通过将类型参数放在键上而不是容器上来避开这一限制。\n\n对于这种类型安全的异构容器，可以用Class对象作为键。以这种方式使用的Class对象称作类型令牌。","slug":"effective-java-ch5-generics","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjg000gy3qwztmccmy8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第五章阅读笔记。</p>\n<h2 id=\"不要在新代码中使用原生态类型\"><a href=\"#不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"不要在新代码中使用原生态类型\"></a>不要在新代码中使用原生态类型</h2><p>声明中具有一个或多个类型参数的类/接口 – 泛型类/接口 </p>\n<p>使用原生态类型会在运行时导致异常。原生态只是为了与引入泛型之前的遗留代码进行兼容和互用而提供的。</p>\n<p><code>Set&lt;Object&gt;</code>是个参数化类型，表示可以包含任何对象类型的一个集合。</p>\n<p><code>Set&lt;?&gt;</code>是一个通配符类型，表示只能包含某种未知对象类型的一个集合。</p>\n<p><code>Set</code>是个原生态类型，脱离了泛型系统，是不安全的。</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数化的类型</td>\n<td>List<string></string></td>\n</tr>\n<tr>\n<td>实际类型参数</td>\n<td>String</td>\n</tr>\n<tr>\n<td>泛型</td>\n<td>List<e></e></td>\n</tr>\n<tr>\n<td>形式类型参数</td>\n<td>E</td>\n</tr>\n<tr>\n<td>无限制通配符类型</td>\n<td>List&lt;?&gt;</td>\n</tr>\n<tr>\n<td>原生态类型</td>\n<td>List</td>\n</tr>\n<tr>\n<td>有限制类型参数</td>\n<td>&lt; E extends Number&gt;</td>\n</tr>\n<tr>\n<td>递归类型限制</td>\n<td>&lt; T extends Comparable<t>&gt;</t></td>\n</tr>\n<tr>\n<td>有限制通配符类型</td>\n<td>List&lt;? extends Number&gt;</td>\n</tr>\n<tr>\n<td>泛型方法</td>\n<td>static <e> List<e> asList(E[] a)</e></e></td>\n</tr>\n<tr>\n<td>类型令牌</td>\n<td>String class</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"消除非受检警告\"><a href=\"#消除非受检警告\" class=\"headerlink\" title=\"消除非受检警告\"></a>消除非受检警告</h2><p>不要忽略非受检警告。每条警告都表示可能在运行时抛出ClassCastException异常，要尽最大努力消除这些警告。</p>\n<p>如果无法消除非受检警告，同时可以证明引起警告的代码是类型安全的，就可以在尽可能小的范围中，用<code>@SuppressWarnings(&quot;unchecked&quot;)</code>注解禁止该警告，要用注释把禁止该警告的原因记录下来。</p>\n<hr>\n<h2 id=\"列表优先于数组\"><a href=\"#列表优先于数组\" class=\"headerlink\" title=\"列表优先于数组\"></a>列表优先于数组</h2><p>数组是具体化的，在运行时才知道并检查它们的元素类型约束。</p>\n<p>泛型是通过erasure(使泛型可以与没有使用泛型的代码随意进行互用)来实现的。只在编译时强化它们的类型信息，并在运行时丢弃元素类型信息。</p>\n<p>数组提供了运行时的类型安全，但是没有编译时的类型安全。反之泛型。</p>\n<hr>\n<h2 id=\"优先考虑泛型\"><a href=\"#优先考虑泛型\" class=\"headerlink\" title=\"优先考虑泛型\"></a>优先考虑泛型</h2><p>使用泛型比使用需要在客户端代码中进行转换的类型更为安全，也更简单。</p>\n<hr>\n<h2 id=\"优先考虑泛型方法\"><a href=\"#优先考虑泛型方法\" class=\"headerlink\" title=\"优先考虑泛型方法\"></a>优先考虑泛型方法</h2><p>静态工具方法尤其适合于泛型化。</p>\n<p>泛型方法 无需明确指定类型参数的值。</p>\n<p>泛型静态工厂方法</p>\n<pre><code>//Generic static factory method\npublic static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() {\n    return new HashMap&lt;K,V&gt;();\n}\n\n//Parameterized type instance creation with static factory\nMap&lt;String, List&lt;String&gt;&gt; anagrams = newHashMap();\n</code></pre><hr>\n<h2 id=\"利用有限制通配符来提升API的灵活性\"><a href=\"#利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"利用有限制通配符来提升API的灵活性\"></a>利用有限制通配符来提升API的灵活性</h2><p>参数化类型是不可变的。</p>\n<p>PECS表示producer-extends, consumer-super</p>\n<p>如果参数化类型表示一个T生产者，就使用<code>&lt;? extends T&gt;</code>; 如果表示一个T消费者，就使用<code>&lt;? super T&gt;</code>。 </p>\n<p>不要用通配符类型作为返回类型。</p>\n<p>如果类型参数旨在方法声明中出现一次，就可以用通配符取代它。</p>\n<pre><code>public static void swap(List&lt;?&gt; list, int i, int j) {\n    swapHelper(list, i, j);\n}\n\n//private helper method for wildcard capture\nprivate static &lt;E&gt; void swapHelper(List&lt;E&gt; list, int i, int j) {\n    list.set(i, list.set(j, list.get(i)));\n}\n</code></pre><hr>\n<h2 id=\"优先考虑类型安全的异构容器\"><a href=\"#优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"优先考虑类型安全的异构容器\"></a>优先考虑类型安全的异构容器</h2><pre><code>//Typesafe heterogeneous container pattern - client\npublic static void main(String[] args){\n    Favorites f = new Favorites();\n\n    f.putFavorite(String.class, &quot;Java&quot;);\n    f.putFavorite(Integer.class, 0xcafebabe);\n    f.putFavorite(Class.class, Favorites.class);\n\n    String favoriteString = f.getFavorite(String.class);\n    int favoriteInteger = f.getFavorite(Integer.class);\n    Class&lt;?&gt; favoriteClass = f.getFavorite(Class.class);\n\n    System.out.printf(&quot;%s %x %s%n, favoriteString,\n        favoriteInteger, favoriteClass.getName());\n    //Java cafebabe Favorites.\n}\n\n\n//Typesafe heterogeneous container pattern - implementation\npublic class Favorites {\n    private Map&lt;Class&lt;?&gt;, Object&gt; favorites = \n        new HashMap&lt;Class&lt;?&gt;, Object&gt;();\n\n    public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance) {\n        if(type == null)\n            throw new NullPointerException(&quot;Type is null&quot;);\n        favorites.put(type, instance);\n    }\n\n    public &lt;T&gt; T getFavorite(Class&lt;T&gt; type) {\n        return type.cast(favorites.get(type));\n    }\n}\n</code></pre><p>利用asSubclass在编译时读取类型未知的注解。</p>\n<pre><code>//Use of asSubclass to safely cast to a bounded type token\nstatic Annotation getAnnotation(AnnotatedElement element,\n                                String annotationTypeName) {\n    Class&lt;?&gt; annotationType = null; //Unbounded type token\n    try {\n        annotationType = Class.forName(annotationTypeName);\n    } catch(Excetion ex) {\n        throw new IllegalArgumentExcetion(ex);\n    }\n    return element.getAnnotation(\n        annotationType.asSubclass(Annotation.class);\n    )\n}\n</code></pre><p>集合API说明了泛型的一般用法，限制你每个容器只能有固定数目的类型参数，可以通过将类型参数放在键上而不是容器上来避开这一限制。</p>\n<p>对于这种类型安全的异构容器，可以用Class对象作为键。以这种方式使用的Class对象称作类型令牌。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第五章阅读笔记。</p>\n<h2 id=\"不要在新代码中使用原生态类型\"><a href=\"#不要在新代码中使用原生态类型\" class=\"headerlink\" title=\"不要在新代码中使用原生态类型\"></a>不要在新代码中使用原生态类型</h2><p>声明中具有一个或多个类型参数的类/接口 – 泛型类/接口 </p>\n<p>使用原生态类型会在运行时导致异常。原生态只是为了与引入泛型之前的遗留代码进行兼容和互用而提供的。</p>\n<p><code>Set&lt;Object&gt;</code>是个参数化类型，表示可以包含任何对象类型的一个集合。</p>\n<p><code>Set&lt;?&gt;</code>是一个通配符类型，表示只能包含某种未知对象类型的一个集合。</p>\n<p><code>Set</code>是个原生态类型，脱离了泛型系统，是不安全的。</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数化的类型</td>\n<td>List<String></td>\n</tr>\n<tr>\n<td>实际类型参数</td>\n<td>String</td>\n</tr>\n<tr>\n<td>泛型</td>\n<td>List<E></td>\n</tr>\n<tr>\n<td>形式类型参数</td>\n<td>E</td>\n</tr>\n<tr>\n<td>无限制通配符类型</td>\n<td>List&lt;?&gt;</td>\n</tr>\n<tr>\n<td>原生态类型</td>\n<td>List</td>\n</tr>\n<tr>\n<td>有限制类型参数</td>\n<td>&lt; E extends Number&gt;</td>\n</tr>\n<tr>\n<td>递归类型限制</td>\n<td>&lt; T extends Comparable<T>&gt;</td>\n</tr>\n<tr>\n<td>有限制通配符类型</td>\n<td>List&lt;? extends Number&gt;</td>\n</tr>\n<tr>\n<td>泛型方法</td>\n<td>static <E> List<E> asList(E[] a)</td>\n</tr>\n<tr>\n<td>类型令牌</td>\n<td>String class</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"消除非受检警告\"><a href=\"#消除非受检警告\" class=\"headerlink\" title=\"消除非受检警告\"></a>消除非受检警告</h2><p>不要忽略非受检警告。每条警告都表示可能在运行时抛出ClassCastException异常，要尽最大努力消除这些警告。</p>\n<p>如果无法消除非受检警告，同时可以证明引起警告的代码是类型安全的，就可以在尽可能小的范围中，用<code>@SuppressWarnings(&quot;unchecked&quot;)</code>注解禁止该警告，要用注释把禁止该警告的原因记录下来。</p>\n<hr>\n<h2 id=\"列表优先于数组\"><a href=\"#列表优先于数组\" class=\"headerlink\" title=\"列表优先于数组\"></a>列表优先于数组</h2><p>数组是具体化的，在运行时才知道并检查它们的元素类型约束。</p>\n<p>泛型是通过erasure(使泛型可以与没有使用泛型的代码随意进行互用)来实现的。只在编译时强化它们的类型信息，并在运行时丢弃元素类型信息。</p>\n<p>数组提供了运行时的类型安全，但是没有编译时的类型安全。反之泛型。</p>\n<hr>\n<h2 id=\"优先考虑泛型\"><a href=\"#优先考虑泛型\" class=\"headerlink\" title=\"优先考虑泛型\"></a>优先考虑泛型</h2><p>使用泛型比使用需要在客户端代码中进行转换的类型更为安全，也更简单。</p>\n<hr>\n<h2 id=\"优先考虑泛型方法\"><a href=\"#优先考虑泛型方法\" class=\"headerlink\" title=\"优先考虑泛型方法\"></a>优先考虑泛型方法</h2><p>静态工具方法尤其适合于泛型化。</p>\n<p>泛型方法 无需明确指定类型参数的值。</p>\n<p>泛型静态工厂方法</p>\n<pre><code>//Generic static factory method\npublic static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() {\n    return new HashMap&lt;K,V&gt;();\n}\n\n//Parameterized type instance creation with static factory\nMap&lt;String, List&lt;String&gt;&gt; anagrams = newHashMap();\n</code></pre><hr>\n<h2 id=\"利用有限制通配符来提升API的灵活性\"><a href=\"#利用有限制通配符来提升API的灵活性\" class=\"headerlink\" title=\"利用有限制通配符来提升API的灵活性\"></a>利用有限制通配符来提升API的灵活性</h2><p>参数化类型是不可变的。</p>\n<p>PECS表示producer-extends, consumer-super</p>\n<p>如果参数化类型表示一个T生产者，就使用<code>&lt;? extends T&gt;</code>; 如果表示一个T消费者，就使用<code>&lt;? super T&gt;</code>。 </p>\n<p>不要用通配符类型作为返回类型。</p>\n<p>如果类型参数旨在方法声明中出现一次，就可以用通配符取代它。</p>\n<pre><code>public static void swap(List&lt;?&gt; list, int i, int j) {\n    swapHelper(list, i, j);\n}\n\n//private helper method for wildcard capture\nprivate static &lt;E&gt; void swapHelper(List&lt;E&gt; list, int i, int j) {\n    list.set(i, list.set(j, list.get(i)));\n}\n</code></pre><hr>\n<h2 id=\"优先考虑类型安全的异构容器\"><a href=\"#优先考虑类型安全的异构容器\" class=\"headerlink\" title=\"优先考虑类型安全的异构容器\"></a>优先考虑类型安全的异构容器</h2><pre><code>//Typesafe heterogeneous container pattern - client\npublic static void main(String[] args){\n    Favorites f = new Favorites();\n\n    f.putFavorite(String.class, &quot;Java&quot;);\n    f.putFavorite(Integer.class, 0xcafebabe);\n    f.putFavorite(Class.class, Favorites.class);\n\n    String favoriteString = f.getFavorite(String.class);\n    int favoriteInteger = f.getFavorite(Integer.class);\n    Class&lt;?&gt; favoriteClass = f.getFavorite(Class.class);\n\n    System.out.printf(&quot;%s %x %s%n, favoriteString,\n        favoriteInteger, favoriteClass.getName());\n    //Java cafebabe Favorites.\n}\n\n\n//Typesafe heterogeneous container pattern - implementation\npublic class Favorites {\n    private Map&lt;Class&lt;?&gt;, Object&gt; favorites = \n        new HashMap&lt;Class&lt;?&gt;, Object&gt;();\n\n    public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance) {\n        if(type == null)\n            throw new NullPointerException(&quot;Type is null&quot;);\n        favorites.put(type, instance);\n    }\n\n    public &lt;T&gt; T getFavorite(Class&lt;T&gt; type) {\n        return type.cast(favorites.get(type));\n    }\n}\n</code></pre><p>利用asSubclass在编译时读取类型未知的注解。</p>\n<pre><code>//Use of asSubclass to safely cast to a bounded type token\nstatic Annotation getAnnotation(AnnotatedElement element,\n                                String annotationTypeName) {\n    Class&lt;?&gt; annotationType = null; //Unbounded type token\n    try {\n        annotationType = Class.forName(annotationTypeName);\n    } catch(Excetion ex) {\n        throw new IllegalArgumentExcetion(ex);\n    }\n    return element.getAnnotation(\n        annotationType.asSubclass(Annotation.class);\n    )\n}\n</code></pre><p>集合API说明了泛型的一般用法，限制你每个容器只能有固定数目的类型参数，可以通过将类型参数放在键上而不是容器上来避开这一限制。</p>\n<p>对于这种类型安全的异构容器，可以用Class对象作为键。以这种方式使用的Class对象称作类型令牌。</p>\n"},{"title":"枚举与注解--《Effective Java》","date":"2017-02-10T12:26:11.000Z","_content":"## 前言\n本文为阅读《Effective Java》第六章笔记。\n\n---\n\n## 用enum代替int常量\n枚举类型（enum type）是值由一组固定的常量组成合法值的类型。\n\n    public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\n    public enum Orange { NAVEL, TEMPLE, BLOOD }\n\nJava的枚举本质上是int值。通过公有的静态final域为每个枚举常量导出实例的类。\n\n枚举类型是实例操控的，是单例的泛型化，本质上是单元素的枚举。\n\n枚举类型还允许添加任意的方法和域，并实现任意的接口。\n\n    //Enum type with data and behavior\n    public enum Planet {\n        MERCURY(3.302e+23, 2.439e6),\n        VENUS(4.869E+24, 6.052E6),\n        EARTH(5.975E+24, 6.378E6),\n        MARS(6.419E+23, 3.393E6);\n        ...\n\n        private final double mass;\n        private final double radius;\n        private final double surfaceGravity;\n\n        private static final double G = 6.67300E-11;\n\n        //Constructor\n        Planet(double mass, double radius) {\n            this.mass = mass;\n            this.radius = radius;\n            surfaceGravity = G * mass / (radius * radius);\n        }\n\n        public double mass() { return mass; }\n        public double radius() { return radius; }\n        public double surfaceGravity() { return surfaceGravity; }\n\n        public double surfaceWeighty(double mass) {\n            return mass * surfaceGravity;\n        }\n\n    }\n\n为了将数据与枚举常量关联起来，得声明实例域，并编写一个带有数据并将数据保存在域中的构造器。\n\n    public class WeightTable {\n        public static void main(String[] args) {\n            double earthWeight = Double.parseDouble(args[0]);\n            double mass = earthWeight / Planet.EARTH.surfaceGravity();\n            for(Planet p : Planet.values()){\n                System.out.printf(\"Weight on %s is %f%n\",\n                    p, p.surfaceWeighty(mass));\n            }\n        }\n    }\n\n    //Result\n    //Weight on MERCURY is 66.133672\n    //Weight on VENUS is 158.383926\n    //Weight on EARTH is 175.000000\n    //Weight on MARS is 66.430699\n\n策略枚举来实现工资枚举。\n\n    enum PayrollDay {\n        MONDAY(PayType.WEEKDAY), TUEDAY(PayType.WEEKDAY),\n        WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n        FRIDAY(PayType.WEEKDAY),\n        SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);\n\n        private final PayType payType;\n        PayrollDay(PayType payType) {\n            this.payType = payType;\n        }\n\n        double pay(double hoursWorked, double payRate) {\n            return payType.pay(hoursWorked, payRate);\n        }\n\n        //The strategy enum type\n        private enum PayType {\n            WEEKDAY {\n                double overtimePay(double hours, double payRate) {\n                    return hours <= HOURS_PER_SHIFT ? 0 :\n                        (hours - HOURS_PER_SHIFT) * payRate / 2; \n                }\n            },\n            WEEKEND {\n                double overtimePay(double hours, double payRate) {\n                    return hours * payRate / 2;\n                }\n            };\n            \n            private static final int HOURS_PER_SHIFT = 8;\n\n            abstract double overtimePay(double hrs, double payRate);\n\n            double pay(double hoursWorked, double payRate) {\n                double basePay = hoursWorked * payRate;\n                return basePay + overtimePay(hoursWorked, payRate);\n            }\n        }\n    }\n\n枚举要更加易读，也更加安全，功能更为强大。许多枚举都不需要显式的构造器或成员，但许多其他枚举则受益于“每个常量与属性的关联”以及“提供行为受这个属性影响的方法”。如果多个枚举常量同时共享相同的行为，则考虑策略枚举。\n\n---\n\n## 用实例域代替序数\n永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。\n\n    public enum Ensemble {\n        SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),\n        SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),\n        NONET(9), DECTET(10), TRIPLE_QUARTET(12);\n\n        private final int numberOfMusicians;\n        Ensemble(int size) { this.numberOfMusicians = size; }\n        public int numberOfMusicians() { return numberOfMusicians; }\n\n    }\n\n---\n\n## 用EnumSet代替位域\n待续……","source":"_posts/effective-java-ch6-Enums-and-Annotations.md","raw":"---\ntitle: 枚举与注解--《Effective Java》\ndate: 2017-02-10 20:26:11\ncategories: [后台开发, JAVA开发]\ntags: [JAVA, Effective Java]\n---\n## 前言\n本文为阅读《Effective Java》第六章笔记。\n\n---\n\n## 用enum代替int常量\n枚举类型（enum type）是值由一组固定的常量组成合法值的类型。\n\n    public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\n    public enum Orange { NAVEL, TEMPLE, BLOOD }\n\nJava的枚举本质上是int值。通过公有的静态final域为每个枚举常量导出实例的类。\n\n枚举类型是实例操控的，是单例的泛型化，本质上是单元素的枚举。\n\n枚举类型还允许添加任意的方法和域，并实现任意的接口。\n\n    //Enum type with data and behavior\n    public enum Planet {\n        MERCURY(3.302e+23, 2.439e6),\n        VENUS(4.869E+24, 6.052E6),\n        EARTH(5.975E+24, 6.378E6),\n        MARS(6.419E+23, 3.393E6);\n        ...\n\n        private final double mass;\n        private final double radius;\n        private final double surfaceGravity;\n\n        private static final double G = 6.67300E-11;\n\n        //Constructor\n        Planet(double mass, double radius) {\n            this.mass = mass;\n            this.radius = radius;\n            surfaceGravity = G * mass / (radius * radius);\n        }\n\n        public double mass() { return mass; }\n        public double radius() { return radius; }\n        public double surfaceGravity() { return surfaceGravity; }\n\n        public double surfaceWeighty(double mass) {\n            return mass * surfaceGravity;\n        }\n\n    }\n\n为了将数据与枚举常量关联起来，得声明实例域，并编写一个带有数据并将数据保存在域中的构造器。\n\n    public class WeightTable {\n        public static void main(String[] args) {\n            double earthWeight = Double.parseDouble(args[0]);\n            double mass = earthWeight / Planet.EARTH.surfaceGravity();\n            for(Planet p : Planet.values()){\n                System.out.printf(\"Weight on %s is %f%n\",\n                    p, p.surfaceWeighty(mass));\n            }\n        }\n    }\n\n    //Result\n    //Weight on MERCURY is 66.133672\n    //Weight on VENUS is 158.383926\n    //Weight on EARTH is 175.000000\n    //Weight on MARS is 66.430699\n\n策略枚举来实现工资枚举。\n\n    enum PayrollDay {\n        MONDAY(PayType.WEEKDAY), TUEDAY(PayType.WEEKDAY),\n        WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n        FRIDAY(PayType.WEEKDAY),\n        SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);\n\n        private final PayType payType;\n        PayrollDay(PayType payType) {\n            this.payType = payType;\n        }\n\n        double pay(double hoursWorked, double payRate) {\n            return payType.pay(hoursWorked, payRate);\n        }\n\n        //The strategy enum type\n        private enum PayType {\n            WEEKDAY {\n                double overtimePay(double hours, double payRate) {\n                    return hours <= HOURS_PER_SHIFT ? 0 :\n                        (hours - HOURS_PER_SHIFT) * payRate / 2; \n                }\n            },\n            WEEKEND {\n                double overtimePay(double hours, double payRate) {\n                    return hours * payRate / 2;\n                }\n            };\n            \n            private static final int HOURS_PER_SHIFT = 8;\n\n            abstract double overtimePay(double hrs, double payRate);\n\n            double pay(double hoursWorked, double payRate) {\n                double basePay = hoursWorked * payRate;\n                return basePay + overtimePay(hoursWorked, payRate);\n            }\n        }\n    }\n\n枚举要更加易读，也更加安全，功能更为强大。许多枚举都不需要显式的构造器或成员，但许多其他枚举则受益于“每个常量与属性的关联”以及“提供行为受这个属性影响的方法”。如果多个枚举常量同时共享相同的行为，则考虑策略枚举。\n\n---\n\n## 用实例域代替序数\n永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。\n\n    public enum Ensemble {\n        SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),\n        SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),\n        NONET(9), DECTET(10), TRIPLE_QUARTET(12);\n\n        private final int numberOfMusicians;\n        Ensemble(int size) { this.numberOfMusicians = size; }\n        public int numberOfMusicians() { return numberOfMusicians; }\n\n    }\n\n---\n\n## 用EnumSet代替位域\n待续……","slug":"effective-java-ch6-Enums-and-Annotations","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjl000ky3qwlsgyou15","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第六章笔记。</p>\n<hr>\n<h2 id=\"用enum代替int常量\"><a href=\"#用enum代替int常量\" class=\"headerlink\" title=\"用enum代替int常量\"></a>用enum代替int常量</h2><p>枚举类型（enum type）是值由一组固定的常量组成合法值的类型。</p>\n<pre><code>public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\npublic enum Orange { NAVEL, TEMPLE, BLOOD }\n</code></pre><p>Java的枚举本质上是int值。通过公有的静态final域为每个枚举常量导出实例的类。</p>\n<p>枚举类型是实例操控的，是单例的泛型化，本质上是单元素的枚举。</p>\n<p>枚举类型还允许添加任意的方法和域，并实现任意的接口。</p>\n<pre><code>//Enum type with data and behavior\npublic enum Planet {\n    MERCURY(3.302e+23, 2.439e6),\n    VENUS(4.869E+24, 6.052E6),\n    EARTH(5.975E+24, 6.378E6),\n    MARS(6.419E+23, 3.393E6);\n    ...\n\n    private final double mass;\n    private final double radius;\n    private final double surfaceGravity;\n\n    private static final double G = 6.67300E-11;\n\n    //Constructor\n    Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n        surfaceGravity = G * mass / (radius * radius);\n    }\n\n    public double mass() { return mass; }\n    public double radius() { return radius; }\n    public double surfaceGravity() { return surfaceGravity; }\n\n    public double surfaceWeighty(double mass) {\n        return mass * surfaceGravity;\n    }\n\n}\n</code></pre><p>为了将数据与枚举常量关联起来，得声明实例域，并编写一个带有数据并将数据保存在域中的构造器。</p>\n<pre><code>public class WeightTable {\n    public static void main(String[] args) {\n        double earthWeight = Double.parseDouble(args[0]);\n        double mass = earthWeight / Planet.EARTH.surfaceGravity();\n        for(Planet p : Planet.values()){\n            System.out.printf(&quot;Weight on %s is %f%n&quot;,\n                p, p.surfaceWeighty(mass));\n        }\n    }\n}\n\n//Result\n//Weight on MERCURY is 66.133672\n//Weight on VENUS is 158.383926\n//Weight on EARTH is 175.000000\n//Weight on MARS is 66.430699\n</code></pre><p>策略枚举来实现工资枚举。</p>\n<pre><code>enum PayrollDay {\n    MONDAY(PayType.WEEKDAY), TUEDAY(PayType.WEEKDAY),\n    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n    FRIDAY(PayType.WEEKDAY),\n    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);\n\n    private final PayType payType;\n    PayrollDay(PayType payType) {\n        this.payType = payType;\n    }\n\n    double pay(double hoursWorked, double payRate) {\n        return payType.pay(hoursWorked, payRate);\n    }\n\n    //The strategy enum type\n    private enum PayType {\n        WEEKDAY {\n            double overtimePay(double hours, double payRate) {\n                return hours &lt;= HOURS_PER_SHIFT ? 0 :\n                    (hours - HOURS_PER_SHIFT) * payRate / 2; \n            }\n        },\n        WEEKEND {\n            double overtimePay(double hours, double payRate) {\n                return hours * payRate / 2;\n            }\n        };\n\n        private static final int HOURS_PER_SHIFT = 8;\n\n        abstract double overtimePay(double hrs, double payRate);\n\n        double pay(double hoursWorked, double payRate) {\n            double basePay = hoursWorked * payRate;\n            return basePay + overtimePay(hoursWorked, payRate);\n        }\n    }\n}\n</code></pre><p>枚举要更加易读，也更加安全，功能更为强大。许多枚举都不需要显式的构造器或成员，但许多其他枚举则受益于“每个常量与属性的关联”以及“提供行为受这个属性影响的方法”。如果多个枚举常量同时共享相同的行为，则考虑策略枚举。</p>\n<hr>\n<h2 id=\"用实例域代替序数\"><a href=\"#用实例域代替序数\" class=\"headerlink\" title=\"用实例域代替序数\"></a>用实例域代替序数</h2><p>永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。</p>\n<pre><code>public enum Ensemble {\n    SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),\n    SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),\n    NONET(9), DECTET(10), TRIPLE_QUARTET(12);\n\n    private final int numberOfMusicians;\n    Ensemble(int size) { this.numberOfMusicians = size; }\n    public int numberOfMusicians() { return numberOfMusicians; }\n\n}\n</code></pre><hr>\n<h2 id=\"用EnumSet代替位域\"><a href=\"#用EnumSet代替位域\" class=\"headerlink\" title=\"用EnumSet代替位域\"></a>用EnumSet代替位域</h2><p>待续……</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文为阅读《Effective Java》第六章笔记。</p>\n<hr>\n<h2 id=\"用enum代替int常量\"><a href=\"#用enum代替int常量\" class=\"headerlink\" title=\"用enum代替int常量\"></a>用enum代替int常量</h2><p>枚举类型（enum type）是值由一组固定的常量组成合法值的类型。</p>\n<pre><code>public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\npublic enum Orange { NAVEL, TEMPLE, BLOOD }\n</code></pre><p>Java的枚举本质上是int值。通过公有的静态final域为每个枚举常量导出实例的类。</p>\n<p>枚举类型是实例操控的，是单例的泛型化，本质上是单元素的枚举。</p>\n<p>枚举类型还允许添加任意的方法和域，并实现任意的接口。</p>\n<pre><code>//Enum type with data and behavior\npublic enum Planet {\n    MERCURY(3.302e+23, 2.439e6),\n    VENUS(4.869E+24, 6.052E6),\n    EARTH(5.975E+24, 6.378E6),\n    MARS(6.419E+23, 3.393E6);\n    ...\n\n    private final double mass;\n    private final double radius;\n    private final double surfaceGravity;\n\n    private static final double G = 6.67300E-11;\n\n    //Constructor\n    Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n        surfaceGravity = G * mass / (radius * radius);\n    }\n\n    public double mass() { return mass; }\n    public double radius() { return radius; }\n    public double surfaceGravity() { return surfaceGravity; }\n\n    public double surfaceWeighty(double mass) {\n        return mass * surfaceGravity;\n    }\n\n}\n</code></pre><p>为了将数据与枚举常量关联起来，得声明实例域，并编写一个带有数据并将数据保存在域中的构造器。</p>\n<pre><code>public class WeightTable {\n    public static void main(String[] args) {\n        double earthWeight = Double.parseDouble(args[0]);\n        double mass = earthWeight / Planet.EARTH.surfaceGravity();\n        for(Planet p : Planet.values()){\n            System.out.printf(&quot;Weight on %s is %f%n&quot;,\n                p, p.surfaceWeighty(mass));\n        }\n    }\n}\n\n//Result\n//Weight on MERCURY is 66.133672\n//Weight on VENUS is 158.383926\n//Weight on EARTH is 175.000000\n//Weight on MARS is 66.430699\n</code></pre><p>策略枚举来实现工资枚举。</p>\n<pre><code>enum PayrollDay {\n    MONDAY(PayType.WEEKDAY), TUEDAY(PayType.WEEKDAY),\n    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n    FRIDAY(PayType.WEEKDAY),\n    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);\n\n    private final PayType payType;\n    PayrollDay(PayType payType) {\n        this.payType = payType;\n    }\n\n    double pay(double hoursWorked, double payRate) {\n        return payType.pay(hoursWorked, payRate);\n    }\n\n    //The strategy enum type\n    private enum PayType {\n        WEEKDAY {\n            double overtimePay(double hours, double payRate) {\n                return hours &lt;= HOURS_PER_SHIFT ? 0 :\n                    (hours - HOURS_PER_SHIFT) * payRate / 2; \n            }\n        },\n        WEEKEND {\n            double overtimePay(double hours, double payRate) {\n                return hours * payRate / 2;\n            }\n        };\n\n        private static final int HOURS_PER_SHIFT = 8;\n\n        abstract double overtimePay(double hrs, double payRate);\n\n        double pay(double hoursWorked, double payRate) {\n            double basePay = hoursWorked * payRate;\n            return basePay + overtimePay(hoursWorked, payRate);\n        }\n    }\n}\n</code></pre><p>枚举要更加易读，也更加安全，功能更为强大。许多枚举都不需要显式的构造器或成员，但许多其他枚举则受益于“每个常量与属性的关联”以及“提供行为受这个属性影响的方法”。如果多个枚举常量同时共享相同的行为，则考虑策略枚举。</p>\n<hr>\n<h2 id=\"用实例域代替序数\"><a href=\"#用实例域代替序数\" class=\"headerlink\" title=\"用实例域代替序数\"></a>用实例域代替序数</h2><p>永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中。</p>\n<pre><code>public enum Ensemble {\n    SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),\n    SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),\n    NONET(9), DECTET(10), TRIPLE_QUARTET(12);\n\n    private final int numberOfMusicians;\n    Ensemble(int size) { this.numberOfMusicians = size; }\n    public int numberOfMusicians() { return numberOfMusicians; }\n\n}\n</code></pre><hr>\n<h2 id=\"用EnumSet代替位域\"><a href=\"#用EnumSet代替位域\" class=\"headerlink\" title=\"用EnumSet代替位域\"></a>用EnumSet代替位域</h2><p>待续……</p>\n"},{"title":"linux-commands","date":"2017-07-18T13:33:50.000Z","_content":"# Concepts\nUnix is multi-user, multi-process, mutli-access operating system.\n\nEach command is executed as a new process, and is the child of the process which invoked it.\n\n## Kernel Responsibilities\n* Process Management\n* Memory Management\n* File System Management\n* Device Management\n\n# Basic Commands\n## `who` vs `whoami`\n`who` it gives the list of all users currently logged in to the machine\n`whoami` let you know the current user who is in the shell.\n## Keyboard Control\n\n| options | meaning |\n| ------------- |-----:|\n| ^C | interrupt command |\n| ^Z | suspend command |\n| ^D | end of file |\n| ^S | suspend output |\n| ^Q | continue output |\n| ^H (^?) | delete last character |\n| ^W | delete last word |\n| ^U | delete line |\n\n# File System\n## commands\n`ls` - list directory contents\n`ls -F` - append indicator (one of */=>@|) to entries ('/' means directory)\n`ls -l` - use a long listing format\n`ls -i` - print the index number of each file\n`wc` - print newline, word, and byte counts for each file\n`cat` - concatenate files and print on the standard output\n`mkdir` - creates directories\n`rmdir` - removes directories\n`cp` - copies files and directories around the file system\n(P.S. wildcards cannot be used for names which don't exist)\n`mv` - move files and sub-directories\n`rm` - deletes files and direcotry structures\n`rm -i` requests confirmation before deleting files\n`head` - displays the first lines of a file\n`tail` - displays the last lines of a file\n(e.g. head -4 userlist - display the first 4 lines of userlist)\n(e.g. tail -3 userlist - display the last 3 lines of userlist)\n`grep` - searches files for strings\n\n## Hierarchical Structure\nDirectories can be viewed as branches and files as leaves.\n\n## Linking Files\n`ln` - create links\n`ln -s` -  make symbolic links instead of hard links\n(P.S.Symbolic links source can be files or directories.Hard links source only files.类似指针)\n\n## Searching Files\n`grep` options\n\n| option | meaning |\n| ------------- |-----:|\n| -c | display count of matching lines |\n| -i | case insensitive |\n| -l | list names of files containing matching lines |\n| -n | precede each line by its line number |\n| -v | only display lines that do *not match* |\n| -w | search for the expression as a word |\n\ncan use Regex expressions for strings.\n\n## Quoting\nQuoting allows characters to be hidden from the shell.\n\n    e.g. $ echo hello      world\n    hello world\n    $ echo \"hello   world\"\n    hello   world\n\n## Sorting Files\n`sort` - organises files into alpha-numeric order\n`sort -n` - sort on numeric value\n`sort -r` - reverse the sort\n`sort +#` - skip # fields to start of sort key\n(e.g. `sort +3n` means from 3rd fields to start sort on numeric value)\n\n## Comparing Files\n`diff` - displays the differences between two files\n`diff -e` - displays the differences in second files\n\n## Cutting Fields\n`cut` - removes selected fields from each line of the file\n`cut -d` -  use DELIM instead of TAB for field delimiter.自定义分隔符，通常是制表符。\n`cut -f`-  f means fields. select only these fields;  also print anyline that contains  no delimiter character, unless the -s option is specified\n`cut -b` - select bypes\n\n## Duplicate Lines\n`uniq` - removes duplicate adjacent lines from files\n`uniq -c` - count number of duplicate line before files lines\n`uniq -d` - only print repeated lines\n`uniq -u` - only print non-repeated lines\n\n## Transliterating Files\n`tr` - translate characters from input to output.\n(Default input is STDIN. Default output is STDOUT. )\n`tr SET1 [SET2]` - translate SET1 in input to SET2.\n\n## Printing Files\n`lpr` - send files to a printer\n`lpq` - queries the state of the print queue\n`lprm` - dequeues jobs from the print queue.remove the jobs.\n\n## Searching for Files\n`find` - searches any part of the file system.\n\n* it can apply any Unix command to the files found\n* it can print the file name found\n* it can search for files based on several file attributes\n\n| options | meaning |\n| ------------- | -----:|\n| -name | filename pattern |\n| -user | user name |\n| -group | group name |\n| -size | [+/-] size in blocks |\n| -perm | [-] octal number |\n| -atime | [+/-] days |\n| -mtime | [+/-] days |\n| -ctime | [+/-] days |\n| -type | [d/f/l] |\n| -inum | i-node number |\n\n# File Access Control\n## Permissions\n### Access rights for files\n\n| rights | meaning | meaning |\n| ------------- |:-------------:| -----:|\n| r | read | read contens |\n| w | write | update and implies delete |\n| x | execute | attempt to run program |\n| s | set ID | change the UID or GID of process |\n\n### Access rights for directories\n\n| rights | meaning | meaning |\n| ------------- |:-------------:| -----:|\n| r | list | list contens |\n| w | write | create and delete any files |\n| x | search | search directory(cd) |\n| t | sticky | control write access to directories |\n\nuse `ls -l` to display access rights. The order is type, user, group, others.\ne.g. drwxrw-r--\n\n| type | user | group | others |\n| ------------- |:-------------:|:-------------:| -----:|\n| d | rwx | rw- | r-- |\n\n## Setting Permissions\n`chmod` - change permissions\n`chomd -R` -  enables recursion through a directory(递归遍历)\n\nThe permission mode is set using a symbolic notation and a numeric notation.\n\n### Symbolic Notation\ne.g. `chmod go+r aFile` means group and others add r access rights.\n\n### Numeric Notation\ntreats the permissions as a bit pattern.\ne.g. \n\n| r | w | x | total |\n| ------------- |:-------------:| -----:|\n| 4 | 2 | 1 | 7 means rwx |\n| 4 | 0 | 1 | 5 means rx |\n\n## Default Permissions\n`umask` - defines the default permission bits. in numeric notation to show permission.\n\n# Editing Files\n\n| ------------- | -----:|\n| `ed` | interactive, buffered, line oriented |\n| `vi` | interactive, buffered, screen oriented |\n| `sed` | non-interactive, non-buffered, stream oriented |\n\n## ed\n\n`ed [-p prompt] [filename]`\n\n`[addr,[addr]]<character command> [parameters] `\n\n| command | meaning |\n| ------------- | -----:|\n| i | insert |\n| a | append |\n| c | change |\n| d | delete |\n| p | print |\n| w | write to file |\n| r | read from file |\n| s/RE/RS/g | substitute RE for RS |\n| t addr | transfer to addr |\n| q | quit |\n| Q | really quit |\n\n## vi\n`vi [-r] [filename]`\n\n### command mode\n\n| command | meaning |\n| ------------- | -----:|\n| h | cursor left |\n| j | cursor down |\n| k | cursor up |\n| l | cursor right|\n| w | word forward |\n| b | word backward |\n| ^u | page up |\n| ^d | page down |\n| ^ | start of line |\n| $ | end of line |\n| G | go to line |\n| i | insert before cursor |\n| I | insert at start of line |\n| a | insert after cursor |\n| A | insert at the end of line |\n| r | replace character |\n| R | overwrite rest of line |\n| o | open line below |\n| O | open line above |\n| x | delete current character |\n| X | delete character before cursor |\n| d | delete text |\n| D | delete the rest of the line |\n| y | yank text into buffer |\n| p | paste buffer before |\n| P | paste buffer after |\n| / | search forward for RE |\n| ? | search back for RE |\n| n | repeat search |\n| . | repeat last change |\n| u | undo last change |\n| N | reverse search |\n| ZZ | write file then quit |\n\n### ex Mode\nallows you to enter ex(ed) commands\n\n| command | meaning |\n| ------------- | -----:|\n| :wq | write file then quit |\n| :x | write file then quit |\n| :q! | force quit without save |\n| :q | quit |\n\n# Process Commands\n`more` - used to paginate files.\n`more` is invoked as a new process by the shell.\n`cd` and `pwd` are commands to the shell itself and don't give rise to new processes.\n\n# The Shell\nLogin shell is invoked as the user logs in, dies when the user logs out.\nWildcards be used to generate filenames.\n\n| wildcards | meaning |\n| ------------- | -----:|\n| * | any number of characters |\n| ? | any single character |\n| [ab] | a or b or specified range |\n\n## Shell I/O Redirection\nStandard I/O is STDIN, STDOUT, STDERR(producing error messages)\n\n| symbol | meaning |\n| ------------- | -----:|\n| `>` | redirect output |\n| `>>` | append to existing file |\n| `<` | redirect input |\n| `<<` | redirect STDIN from command itself |\n| `|` | pipeline commands |\n\n## Background Jobs\nuse `&` to put jobs into the background.\n`jobs` - list all jobs in the shell\n\n`bg %n` - move a job to the background\n`fg %n` - move a job into the foreground\n`stop %n` - stop a background job - a stopped job can be restarted\n`^Z` - stop a foreground job\n\n%n -- n is the number in the square brackets from the `jobs` command.\n\n## new processes\nThe parent process waits until the child process ends.  \nThe child process inherits the parent attributes.  \nWhen the child process dies, its exit code is sent to its parent, waking the parent process up.\n\n## Shell Variables\n`set` - displays local variables\n`env` - displays environment variables\n`aliases` - create alternative commands\n\n## Shell Program\n\n$0 - Command nae\n$# - Number of arguments\n$*, $@ - All of the arguments\n\"$*\" - one argument of all parameters from $1, like \"$1 $2 … $n\"\n\"$@\" - All aruments from $1, like \"$1\" \"$2\" … \"$n\" \n`shift` - moves arguments down to access others (弹出一个参数)\n`read` - reads from standard input\n\n\tread name address\n\techo goodbye $name of $address\n\n`test` - evaluates general conditions. succeed return 0, otherwise non zero.\n`expr` - evaluate expressions, cuz shell does not understand numbers, each argument must be separated by spaces.\n\n## sed\n* A non-interactive, stream-oriented editor.\n* works on lines of text\n* input flows through the program and is directed to standard output\n\n| option | meaning |\n| -f | allows a sed script file to be specified |\n| -e | Precedes each edit when multiple edits are defined |\n| -n | Suppress the default output |","source":"_posts/linux-commands.md","raw":"---\ntitle: linux-commands\ndate: 2017-07-18 21:33:50\ncategories: [后台开发, Linux]\ntags: [Linux, Unix]\n---\n# Concepts\nUnix is multi-user, multi-process, mutli-access operating system.\n\nEach command is executed as a new process, and is the child of the process which invoked it.\n\n## Kernel Responsibilities\n* Process Management\n* Memory Management\n* File System Management\n* Device Management\n\n# Basic Commands\n## `who` vs `whoami`\n`who` it gives the list of all users currently logged in to the machine\n`whoami` let you know the current user who is in the shell.\n## Keyboard Control\n\n| options | meaning |\n| ------------- |-----:|\n| ^C | interrupt command |\n| ^Z | suspend command |\n| ^D | end of file |\n| ^S | suspend output |\n| ^Q | continue output |\n| ^H (^?) | delete last character |\n| ^W | delete last word |\n| ^U | delete line |\n\n# File System\n## commands\n`ls` - list directory contents\n`ls -F` - append indicator (one of */=>@|) to entries ('/' means directory)\n`ls -l` - use a long listing format\n`ls -i` - print the index number of each file\n`wc` - print newline, word, and byte counts for each file\n`cat` - concatenate files and print on the standard output\n`mkdir` - creates directories\n`rmdir` - removes directories\n`cp` - copies files and directories around the file system\n(P.S. wildcards cannot be used for names which don't exist)\n`mv` - move files and sub-directories\n`rm` - deletes files and direcotry structures\n`rm -i` requests confirmation before deleting files\n`head` - displays the first lines of a file\n`tail` - displays the last lines of a file\n(e.g. head -4 userlist - display the first 4 lines of userlist)\n(e.g. tail -3 userlist - display the last 3 lines of userlist)\n`grep` - searches files for strings\n\n## Hierarchical Structure\nDirectories can be viewed as branches and files as leaves.\n\n## Linking Files\n`ln` - create links\n`ln -s` -  make symbolic links instead of hard links\n(P.S.Symbolic links source can be files or directories.Hard links source only files.类似指针)\n\n## Searching Files\n`grep` options\n\n| option | meaning |\n| ------------- |-----:|\n| -c | display count of matching lines |\n| -i | case insensitive |\n| -l | list names of files containing matching lines |\n| -n | precede each line by its line number |\n| -v | only display lines that do *not match* |\n| -w | search for the expression as a word |\n\ncan use Regex expressions for strings.\n\n## Quoting\nQuoting allows characters to be hidden from the shell.\n\n    e.g. $ echo hello      world\n    hello world\n    $ echo \"hello   world\"\n    hello   world\n\n## Sorting Files\n`sort` - organises files into alpha-numeric order\n`sort -n` - sort on numeric value\n`sort -r` - reverse the sort\n`sort +#` - skip # fields to start of sort key\n(e.g. `sort +3n` means from 3rd fields to start sort on numeric value)\n\n## Comparing Files\n`diff` - displays the differences between two files\n`diff -e` - displays the differences in second files\n\n## Cutting Fields\n`cut` - removes selected fields from each line of the file\n`cut -d` -  use DELIM instead of TAB for field delimiter.自定义分隔符，通常是制表符。\n`cut -f`-  f means fields. select only these fields;  also print anyline that contains  no delimiter character, unless the -s option is specified\n`cut -b` - select bypes\n\n## Duplicate Lines\n`uniq` - removes duplicate adjacent lines from files\n`uniq -c` - count number of duplicate line before files lines\n`uniq -d` - only print repeated lines\n`uniq -u` - only print non-repeated lines\n\n## Transliterating Files\n`tr` - translate characters from input to output.\n(Default input is STDIN. Default output is STDOUT. )\n`tr SET1 [SET2]` - translate SET1 in input to SET2.\n\n## Printing Files\n`lpr` - send files to a printer\n`lpq` - queries the state of the print queue\n`lprm` - dequeues jobs from the print queue.remove the jobs.\n\n## Searching for Files\n`find` - searches any part of the file system.\n\n* it can apply any Unix command to the files found\n* it can print the file name found\n* it can search for files based on several file attributes\n\n| options | meaning |\n| ------------- | -----:|\n| -name | filename pattern |\n| -user | user name |\n| -group | group name |\n| -size | [+/-] size in blocks |\n| -perm | [-] octal number |\n| -atime | [+/-] days |\n| -mtime | [+/-] days |\n| -ctime | [+/-] days |\n| -type | [d/f/l] |\n| -inum | i-node number |\n\n# File Access Control\n## Permissions\n### Access rights for files\n\n| rights | meaning | meaning |\n| ------------- |:-------------:| -----:|\n| r | read | read contens |\n| w | write | update and implies delete |\n| x | execute | attempt to run program |\n| s | set ID | change the UID or GID of process |\n\n### Access rights for directories\n\n| rights | meaning | meaning |\n| ------------- |:-------------:| -----:|\n| r | list | list contens |\n| w | write | create and delete any files |\n| x | search | search directory(cd) |\n| t | sticky | control write access to directories |\n\nuse `ls -l` to display access rights. The order is type, user, group, others.\ne.g. drwxrw-r--\n\n| type | user | group | others |\n| ------------- |:-------------:|:-------------:| -----:|\n| d | rwx | rw- | r-- |\n\n## Setting Permissions\n`chmod` - change permissions\n`chomd -R` -  enables recursion through a directory(递归遍历)\n\nThe permission mode is set using a symbolic notation and a numeric notation.\n\n### Symbolic Notation\ne.g. `chmod go+r aFile` means group and others add r access rights.\n\n### Numeric Notation\ntreats the permissions as a bit pattern.\ne.g. \n\n| r | w | x | total |\n| ------------- |:-------------:| -----:|\n| 4 | 2 | 1 | 7 means rwx |\n| 4 | 0 | 1 | 5 means rx |\n\n## Default Permissions\n`umask` - defines the default permission bits. in numeric notation to show permission.\n\n# Editing Files\n\n| ------------- | -----:|\n| `ed` | interactive, buffered, line oriented |\n| `vi` | interactive, buffered, screen oriented |\n| `sed` | non-interactive, non-buffered, stream oriented |\n\n## ed\n\n`ed [-p prompt] [filename]`\n\n`[addr,[addr]]<character command> [parameters] `\n\n| command | meaning |\n| ------------- | -----:|\n| i | insert |\n| a | append |\n| c | change |\n| d | delete |\n| p | print |\n| w | write to file |\n| r | read from file |\n| s/RE/RS/g | substitute RE for RS |\n| t addr | transfer to addr |\n| q | quit |\n| Q | really quit |\n\n## vi\n`vi [-r] [filename]`\n\n### command mode\n\n| command | meaning |\n| ------------- | -----:|\n| h | cursor left |\n| j | cursor down |\n| k | cursor up |\n| l | cursor right|\n| w | word forward |\n| b | word backward |\n| ^u | page up |\n| ^d | page down |\n| ^ | start of line |\n| $ | end of line |\n| G | go to line |\n| i | insert before cursor |\n| I | insert at start of line |\n| a | insert after cursor |\n| A | insert at the end of line |\n| r | replace character |\n| R | overwrite rest of line |\n| o | open line below |\n| O | open line above |\n| x | delete current character |\n| X | delete character before cursor |\n| d | delete text |\n| D | delete the rest of the line |\n| y | yank text into buffer |\n| p | paste buffer before |\n| P | paste buffer after |\n| / | search forward for RE |\n| ? | search back for RE |\n| n | repeat search |\n| . | repeat last change |\n| u | undo last change |\n| N | reverse search |\n| ZZ | write file then quit |\n\n### ex Mode\nallows you to enter ex(ed) commands\n\n| command | meaning |\n| ------------- | -----:|\n| :wq | write file then quit |\n| :x | write file then quit |\n| :q! | force quit without save |\n| :q | quit |\n\n# Process Commands\n`more` - used to paginate files.\n`more` is invoked as a new process by the shell.\n`cd` and `pwd` are commands to the shell itself and don't give rise to new processes.\n\n# The Shell\nLogin shell is invoked as the user logs in, dies when the user logs out.\nWildcards be used to generate filenames.\n\n| wildcards | meaning |\n| ------------- | -----:|\n| * | any number of characters |\n| ? | any single character |\n| [ab] | a or b or specified range |\n\n## Shell I/O Redirection\nStandard I/O is STDIN, STDOUT, STDERR(producing error messages)\n\n| symbol | meaning |\n| ------------- | -----:|\n| `>` | redirect output |\n| `>>` | append to existing file |\n| `<` | redirect input |\n| `<<` | redirect STDIN from command itself |\n| `|` | pipeline commands |\n\n## Background Jobs\nuse `&` to put jobs into the background.\n`jobs` - list all jobs in the shell\n\n`bg %n` - move a job to the background\n`fg %n` - move a job into the foreground\n`stop %n` - stop a background job - a stopped job can be restarted\n`^Z` - stop a foreground job\n\n%n -- n is the number in the square brackets from the `jobs` command.\n\n## new processes\nThe parent process waits until the child process ends.  \nThe child process inherits the parent attributes.  \nWhen the child process dies, its exit code is sent to its parent, waking the parent process up.\n\n## Shell Variables\n`set` - displays local variables\n`env` - displays environment variables\n`aliases` - create alternative commands\n\n## Shell Program\n\n$0 - Command nae\n$# - Number of arguments\n$*, $@ - All of the arguments\n\"$*\" - one argument of all parameters from $1, like \"$1 $2 … $n\"\n\"$@\" - All aruments from $1, like \"$1\" \"$2\" … \"$n\" \n`shift` - moves arguments down to access others (弹出一个参数)\n`read` - reads from standard input\n\n\tread name address\n\techo goodbye $name of $address\n\n`test` - evaluates general conditions. succeed return 0, otherwise non zero.\n`expr` - evaluate expressions, cuz shell does not understand numbers, each argument must be separated by spaces.\n\n## sed\n* A non-interactive, stream-oriented editor.\n* works on lines of text\n* input flows through the program and is directed to standard output\n\n| option | meaning |\n| -f | allows a sed script file to be specified |\n| -e | Precedes each edit when multiple edits are defined |\n| -n | Suppress the default output |","slug":"linux-commands","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjn000ny3qw1znlt27y","content":"<h1 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h1><p>Unix is multi-user, multi-process, mutli-access operating system.</p>\n<p>Each command is executed as a new process, and is the child of the process which invoked it.</p>\n<h2 id=\"Kernel-Responsibilities\"><a href=\"#Kernel-Responsibilities\" class=\"headerlink\" title=\"Kernel Responsibilities\"></a>Kernel Responsibilities</h2><ul>\n<li>Process Management</li>\n<li>Memory Management</li>\n<li>File System Management</li>\n<li>Device Management</li>\n</ul>\n<h1 id=\"Basic-Commands\"><a href=\"#Basic-Commands\" class=\"headerlink\" title=\"Basic Commands\"></a>Basic Commands</h1><h2 id=\"who-vs-whoami\"><a href=\"#who-vs-whoami\" class=\"headerlink\" title=\"who vs whoami\"></a><code>who</code> vs <code>whoami</code></h2><p><code>who</code> it gives the list of all users currently logged in to the machine<br><code>whoami</code> let you know the current user who is in the shell.</p>\n<h2 id=\"Keyboard-Control\"><a href=\"#Keyboard-Control\" class=\"headerlink\" title=\"Keyboard Control\"></a>Keyboard Control</h2><table>\n<thead>\n<tr>\n<th>options</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^C</td>\n<td style=\"text-align:right\">interrupt command</td>\n</tr>\n<tr>\n<td>^Z</td>\n<td style=\"text-align:right\">suspend command</td>\n</tr>\n<tr>\n<td>^D</td>\n<td style=\"text-align:right\">end of file</td>\n</tr>\n<tr>\n<td>^S</td>\n<td style=\"text-align:right\">suspend output</td>\n</tr>\n<tr>\n<td>^Q</td>\n<td style=\"text-align:right\">continue output</td>\n</tr>\n<tr>\n<td>^H (^?)</td>\n<td style=\"text-align:right\">delete last character</td>\n</tr>\n<tr>\n<td>^W</td>\n<td style=\"text-align:right\">delete last word</td>\n</tr>\n<tr>\n<td>^U</td>\n<td style=\"text-align:right\">delete line</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"File-System\"><a href=\"#File-System\" class=\"headerlink\" title=\"File System\"></a>File System</h1><h2 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h2><p><code>ls</code> - list directory contents<br><code>ls -F</code> - append indicator (one of */=&gt;@|) to entries (‘/‘ means directory)<br><code>ls -l</code> - use a long listing format<br><code>ls -i</code> - print the index number of each file<br><code>wc</code> - print newline, word, and byte counts for each file<br><code>cat</code> - concatenate files and print on the standard output<br><code>mkdir</code> - creates directories<br><code>rmdir</code> - removes directories<br><code>cp</code> - copies files and directories around the file system<br>(P.S. wildcards cannot be used for names which don’t exist)<br><code>mv</code> - move files and sub-directories<br><code>rm</code> - deletes files and direcotry structures<br><code>rm -i</code> requests confirmation before deleting files<br><code>head</code> - displays the first lines of a file<br><code>tail</code> - displays the last lines of a file<br>(e.g. head -4 userlist - display the first 4 lines of userlist)<br>(e.g. tail -3 userlist - display the last 3 lines of userlist)<br><code>grep</code> - searches files for strings</p>\n<h2 id=\"Hierarchical-Structure\"><a href=\"#Hierarchical-Structure\" class=\"headerlink\" title=\"Hierarchical Structure\"></a>Hierarchical Structure</h2><p>Directories can be viewed as branches and files as leaves.</p>\n<h2 id=\"Linking-Files\"><a href=\"#Linking-Files\" class=\"headerlink\" title=\"Linking Files\"></a>Linking Files</h2><p><code>ln</code> - create links<br><code>ln -s</code> -  make symbolic links instead of hard links<br>(P.S.Symbolic links source can be files or directories.Hard links source only files.类似指针)</p>\n<h2 id=\"Searching-Files\"><a href=\"#Searching-Files\" class=\"headerlink\" title=\"Searching Files\"></a>Searching Files</h2><p><code>grep</code> options</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td style=\"text-align:right\">display count of matching lines</td>\n</tr>\n<tr>\n<td>-i</td>\n<td style=\"text-align:right\">case insensitive</td>\n</tr>\n<tr>\n<td>-l</td>\n<td style=\"text-align:right\">list names of files containing matching lines</td>\n</tr>\n<tr>\n<td>-n</td>\n<td style=\"text-align:right\">precede each line by its line number</td>\n</tr>\n<tr>\n<td>-v</td>\n<td style=\"text-align:right\">only display lines that do <em>not match</em></td>\n</tr>\n<tr>\n<td>-w</td>\n<td style=\"text-align:right\">search for the expression as a word</td>\n</tr>\n</tbody>\n</table>\n<p>can use Regex expressions for strings.</p>\n<h2 id=\"Quoting\"><a href=\"#Quoting\" class=\"headerlink\" title=\"Quoting\"></a>Quoting</h2><p>Quoting allows characters to be hidden from the shell.</p>\n<pre><code>e.g. $ echo hello      world\nhello world\n$ echo &quot;hello   world&quot;\nhello   world\n</code></pre><h2 id=\"Sorting-Files\"><a href=\"#Sorting-Files\" class=\"headerlink\" title=\"Sorting Files\"></a>Sorting Files</h2><p><code>sort</code> - organises files into alpha-numeric order<br><code>sort -n</code> - sort on numeric value<br><code>sort -r</code> - reverse the sort<br><code>sort +#</code> - skip # fields to start of sort key<br>(e.g. <code>sort +3n</code> means from 3rd fields to start sort on numeric value)</p>\n<h2 id=\"Comparing-Files\"><a href=\"#Comparing-Files\" class=\"headerlink\" title=\"Comparing Files\"></a>Comparing Files</h2><p><code>diff</code> - displays the differences between two files<br><code>diff -e</code> - displays the differences in second files</p>\n<h2 id=\"Cutting-Fields\"><a href=\"#Cutting-Fields\" class=\"headerlink\" title=\"Cutting Fields\"></a>Cutting Fields</h2><p><code>cut</code> - removes selected fields from each line of the file<br><code>cut -d</code> -  use DELIM instead of TAB for field delimiter.自定义分隔符，通常是制表符。<br><code>cut -f</code>-  f means fields. select only these fields;  also print anyline that contains  no delimiter character, unless the -s option is specified<br><code>cut -b</code> - select bypes</p>\n<h2 id=\"Duplicate-Lines\"><a href=\"#Duplicate-Lines\" class=\"headerlink\" title=\"Duplicate Lines\"></a>Duplicate Lines</h2><p><code>uniq</code> - removes duplicate adjacent lines from files<br><code>uniq -c</code> - count number of duplicate line before files lines<br><code>uniq -d</code> - only print repeated lines<br><code>uniq -u</code> - only print non-repeated lines</p>\n<h2 id=\"Transliterating-Files\"><a href=\"#Transliterating-Files\" class=\"headerlink\" title=\"Transliterating Files\"></a>Transliterating Files</h2><p><code>tr</code> - translate characters from input to output.<br>(Default input is STDIN. Default output is STDOUT. )<br><code>tr SET1 [SET2]</code> - translate SET1 in input to SET2.</p>\n<h2 id=\"Printing-Files\"><a href=\"#Printing-Files\" class=\"headerlink\" title=\"Printing Files\"></a>Printing Files</h2><p><code>lpr</code> - send files to a printer<br><code>lpq</code> - queries the state of the print queue<br><code>lprm</code> - dequeues jobs from the print queue.remove the jobs.</p>\n<h2 id=\"Searching-for-Files\"><a href=\"#Searching-for-Files\" class=\"headerlink\" title=\"Searching for Files\"></a>Searching for Files</h2><p><code>find</code> - searches any part of the file system.</p>\n<ul>\n<li>it can apply any Unix command to the files found</li>\n<li>it can print the file name found</li>\n<li>it can search for files based on several file attributes</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>options</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-name</td>\n<td style=\"text-align:right\">filename pattern</td>\n</tr>\n<tr>\n<td>-user</td>\n<td style=\"text-align:right\">user name</td>\n</tr>\n<tr>\n<td>-group</td>\n<td style=\"text-align:right\">group name</td>\n</tr>\n<tr>\n<td>-size</td>\n<td style=\"text-align:right\">[+/-] size in blocks</td>\n</tr>\n<tr>\n<td>-perm</td>\n<td style=\"text-align:right\">[-] octal number</td>\n</tr>\n<tr>\n<td>-atime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-mtime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-ctime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-type</td>\n<td style=\"text-align:right\">[d/f/l]</td>\n</tr>\n<tr>\n<td>-inum</td>\n<td style=\"text-align:right\">i-node number</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"File-Access-Control\"><a href=\"#File-Access-Control\" class=\"headerlink\" title=\"File Access Control\"></a>File Access Control</h1><h2 id=\"Permissions\"><a href=\"#Permissions\" class=\"headerlink\" title=\"Permissions\"></a>Permissions</h2><h3 id=\"Access-rights-for-files\"><a href=\"#Access-rights-for-files\" class=\"headerlink\" title=\"Access rights for files\"></a>Access rights for files</h3><table>\n<thead>\n<tr>\n<th>rights</th>\n<th style=\"text-align:center\">meaning</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td style=\"text-align:center\">read</td>\n<td style=\"text-align:right\">read contens</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:center\">write</td>\n<td style=\"text-align:right\">update and implies delete</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:center\">execute</td>\n<td style=\"text-align:right\">attempt to run program</td>\n</tr>\n<tr>\n<td>s</td>\n<td style=\"text-align:center\">set ID</td>\n<td style=\"text-align:right\">change the UID or GID of process</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Access-rights-for-directories\"><a href=\"#Access-rights-for-directories\" class=\"headerlink\" title=\"Access rights for directories\"></a>Access rights for directories</h3><table>\n<thead>\n<tr>\n<th>rights</th>\n<th style=\"text-align:center\">meaning</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:right\">list contens</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:center\">write</td>\n<td style=\"text-align:right\">create and delete any files</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:center\">search</td>\n<td style=\"text-align:right\">search directory(cd)</td>\n</tr>\n<tr>\n<td>t</td>\n<td style=\"text-align:center\">sticky</td>\n<td style=\"text-align:right\">control write access to directories</td>\n</tr>\n</tbody>\n</table>\n<p>use <code>ls -l</code> to display access rights. The order is type, user, group, others.<br>e.g. drwxrw-r–</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th style=\"text-align:center\">user</th>\n<th style=\"text-align:center\">group</th>\n<th style=\"text-align:right\">others</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td style=\"text-align:center\">rwx</td>\n<td style=\"text-align:center\">rw-</td>\n<td style=\"text-align:right\">r–</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Setting-Permissions\"><a href=\"#Setting-Permissions\" class=\"headerlink\" title=\"Setting Permissions\"></a>Setting Permissions</h2><p><code>chmod</code> - change permissions<br><code>chomd -R</code> -  enables recursion through a directory(递归遍历)</p>\n<p>The permission mode is set using a symbolic notation and a numeric notation.</p>\n<h3 id=\"Symbolic-Notation\"><a href=\"#Symbolic-Notation\" class=\"headerlink\" title=\"Symbolic Notation\"></a>Symbolic Notation</h3><p>e.g. <code>chmod go+r aFile</code> means group and others add r access rights.</p>\n<h3 id=\"Numeric-Notation\"><a href=\"#Numeric-Notation\" class=\"headerlink\" title=\"Numeric Notation\"></a>Numeric Notation</h3><p>treats the permissions as a bit pattern.<br>e.g. </p>\n<table>\n<thead>\n<tr>\n<th>r</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:right\">x</th>\n<th>total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:right\">1</td>\n<td>7 means rwx</td>\n</tr>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:right\">1</td>\n<td>5 means rx</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Default-Permissions\"><a href=\"#Default-Permissions\" class=\"headerlink\" title=\"Default Permissions\"></a>Default Permissions</h2><p><code>umask</code> - defines the default permission bits. in numeric notation to show permission.</p>\n<h1 id=\"Editing-Files\"><a href=\"#Editing-Files\" class=\"headerlink\" title=\"Editing Files\"></a>Editing Files</h1><p>| ————- | —–:|<br>| <code>ed</code> | interactive, buffered, line oriented |<br>| <code>vi</code> | interactive, buffered, screen oriented |<br>| <code>sed</code> | non-interactive, non-buffered, stream oriented |</p>\n<h2 id=\"ed\"><a href=\"#ed\" class=\"headerlink\" title=\"ed\"></a>ed</h2><p><code>ed [-p prompt] [filename]</code></p>\n<p><code>[addr,[addr]]&lt;character command&gt; [parameters]</code></p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td style=\"text-align:right\">insert</td>\n</tr>\n<tr>\n<td>a</td>\n<td style=\"text-align:right\">append</td>\n</tr>\n<tr>\n<td>c</td>\n<td style=\"text-align:right\">change</td>\n</tr>\n<tr>\n<td>d</td>\n<td style=\"text-align:right\">delete</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:right\">print</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:right\">write to file</td>\n</tr>\n<tr>\n<td>r</td>\n<td style=\"text-align:right\">read from file</td>\n</tr>\n<tr>\n<td>s/RE/RS/g</td>\n<td style=\"text-align:right\">substitute RE for RS</td>\n</tr>\n<tr>\n<td>t addr</td>\n<td style=\"text-align:right\">transfer to addr</td>\n</tr>\n<tr>\n<td>q</td>\n<td style=\"text-align:right\">quit</td>\n</tr>\n<tr>\n<td>Q</td>\n<td style=\"text-align:right\">really quit</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h2><p><code>vi [-r] [filename]</code></p>\n<h3 id=\"command-mode\"><a href=\"#command-mode\" class=\"headerlink\" title=\"command mode\"></a>command mode</h3><table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h</td>\n<td style=\"text-align:right\">cursor left</td>\n</tr>\n<tr>\n<td>j</td>\n<td style=\"text-align:right\">cursor down</td>\n</tr>\n<tr>\n<td>k</td>\n<td style=\"text-align:right\">cursor up</td>\n</tr>\n<tr>\n<td>l</td>\n<td style=\"text-align:right\">cursor right</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:right\">word forward</td>\n</tr>\n<tr>\n<td>b</td>\n<td style=\"text-align:right\">word backward</td>\n</tr>\n<tr>\n<td>^u</td>\n<td style=\"text-align:right\">page up</td>\n</tr>\n<tr>\n<td>^d</td>\n<td style=\"text-align:right\">page down</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:right\">start of line</td>\n</tr>\n<tr>\n<td>$</td>\n<td style=\"text-align:right\">end of line</td>\n</tr>\n<tr>\n<td>G</td>\n<td style=\"text-align:right\">go to line</td>\n</tr>\n<tr>\n<td>i</td>\n<td style=\"text-align:right\">insert before cursor</td>\n</tr>\n<tr>\n<td>I</td>\n<td style=\"text-align:right\">insert at start of line</td>\n</tr>\n<tr>\n<td>a</td>\n<td style=\"text-align:right\">insert after cursor</td>\n</tr>\n<tr>\n<td>A</td>\n<td style=\"text-align:right\">insert at the end of line</td>\n</tr>\n<tr>\n<td>r</td>\n<td style=\"text-align:right\">replace character</td>\n</tr>\n<tr>\n<td>R</td>\n<td style=\"text-align:right\">overwrite rest of line</td>\n</tr>\n<tr>\n<td>o</td>\n<td style=\"text-align:right\">open line below</td>\n</tr>\n<tr>\n<td>O</td>\n<td style=\"text-align:right\">open line above</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:right\">delete current character</td>\n</tr>\n<tr>\n<td>X</td>\n<td style=\"text-align:right\">delete character before cursor</td>\n</tr>\n<tr>\n<td>d</td>\n<td style=\"text-align:right\">delete text</td>\n</tr>\n<tr>\n<td>D</td>\n<td style=\"text-align:right\">delete the rest of the line</td>\n</tr>\n<tr>\n<td>y</td>\n<td style=\"text-align:right\">yank text into buffer</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:right\">paste buffer before</td>\n</tr>\n<tr>\n<td>P</td>\n<td style=\"text-align:right\">paste buffer after</td>\n</tr>\n<tr>\n<td>/</td>\n<td style=\"text-align:right\">search forward for RE</td>\n</tr>\n<tr>\n<td>?</td>\n<td style=\"text-align:right\">search back for RE</td>\n</tr>\n<tr>\n<td>n</td>\n<td style=\"text-align:right\">repeat search</td>\n</tr>\n<tr>\n<td>.</td>\n<td style=\"text-align:right\">repeat last change</td>\n</tr>\n<tr>\n<td>u</td>\n<td style=\"text-align:right\">undo last change</td>\n</tr>\n<tr>\n<td>N</td>\n<td style=\"text-align:right\">reverse search</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ex-Mode\"><a href=\"#ex-Mode\" class=\"headerlink\" title=\"ex Mode\"></a>ex Mode</h3><p>allows you to enter ex(ed) commands</p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:wq</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n<tr>\n<td>:x</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td style=\"text-align:right\">force quit without save</td>\n</tr>\n<tr>\n<td>:q</td>\n<td style=\"text-align:right\">quit</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Process-Commands\"><a href=\"#Process-Commands\" class=\"headerlink\" title=\"Process Commands\"></a>Process Commands</h1><p><code>more</code> - used to paginate files.<br><code>more</code> is invoked as a new process by the shell.<br><code>cd</code> and <code>pwd</code> are commands to the shell itself and don’t give rise to new processes.</p>\n<h1 id=\"The-Shell\"><a href=\"#The-Shell\" class=\"headerlink\" title=\"The Shell\"></a>The Shell</h1><p>Login shell is invoked as the user logs in, dies when the user logs out.<br>Wildcards be used to generate filenames.</p>\n<table>\n<thead>\n<tr>\n<th>wildcards</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td style=\"text-align:right\">any number of characters</td>\n</tr>\n<tr>\n<td>?</td>\n<td style=\"text-align:right\">any single character</td>\n</tr>\n<tr>\n<td>[ab]</td>\n<td style=\"text-align:right\">a or b or specified range</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-I-O-Redirection\"><a href=\"#Shell-I-O-Redirection\" class=\"headerlink\" title=\"Shell I/O Redirection\"></a>Shell I/O Redirection</h2><p>Standard I/O is STDIN, STDOUT, STDERR(producing error messages)</p>\n<table>\n<thead>\n<tr>\n<th>symbol</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td style=\"text-align:right\">redirect output</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td style=\"text-align:right\">append to existing file</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td style=\"text-align:right\">redirect input</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td style=\"text-align:right\">redirect STDIN from command itself</td>\n</tr>\n<tr>\n<td>`</td>\n<td style=\"text-align:right\">`</td>\n<td>pipeline commands</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Background-Jobs\"><a href=\"#Background-Jobs\" class=\"headerlink\" title=\"Background Jobs\"></a>Background Jobs</h2><p>use <code>&amp;</code> to put jobs into the background.<br><code>jobs</code> - list all jobs in the shell</p>\n<p><code>bg %n</code> - move a job to the background<br><code>fg %n</code> - move a job into the foreground<br><code>stop %n</code> - stop a background job - a stopped job can be restarted<br><code>^Z</code> - stop a foreground job</p>\n<p>%n – n is the number in the square brackets from the <code>jobs</code> command.</p>\n<h2 id=\"new-processes\"><a href=\"#new-processes\" class=\"headerlink\" title=\"new processes\"></a>new processes</h2><p>The parent process waits until the child process ends.<br>The child process inherits the parent attributes.<br>When the child process dies, its exit code is sent to its parent, waking the parent process up.</p>\n<h2 id=\"Shell-Variables\"><a href=\"#Shell-Variables\" class=\"headerlink\" title=\"Shell Variables\"></a>Shell Variables</h2><p><code>set</code> - displays local variables<br><code>env</code> - displays environment variables<br><code>aliases</code> - create alternative commands</p>\n<h2 id=\"Shell-Program\"><a href=\"#Shell-Program\" class=\"headerlink\" title=\"Shell Program\"></a>Shell Program</h2><p>$0 - Command nae<br>$# - Number of arguments<br>$<em>, $@ - All of the arguments<br>“$</em>“ - one argument of all parameters from $1, like “$1 $2 … $n”<br>“$@” - All aruments from $1, like “$1” “$2” … “$n”<br><code>shift</code> - moves arguments down to access others (弹出一个参数)<br><code>read</code> - reads from standard input</p>\n<pre><code>read name address\necho goodbye $name of $address\n</code></pre><p><code>test</code> - evaluates general conditions. succeed return 0, otherwise non zero.<br><code>expr</code> - evaluate expressions, cuz shell does not understand numbers, each argument must be separated by spaces.</p>\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><ul>\n<li>A non-interactive, stream-oriented editor.</li>\n<li>works on lines of text</li>\n<li>input flows through the program and is directed to standard output</li>\n</ul>\n<p>| option | meaning |<br>| -f | allows a sed script file to be specified |<br>| -e | Precedes each edit when multiple edits are defined |<br>| -n | Suppress the default output |</p>\n","excerpt":"","more":"<h1 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h1><p>Unix is multi-user, multi-process, mutli-access operating system.</p>\n<p>Each command is executed as a new process, and is the child of the process which invoked it.</p>\n<h2 id=\"Kernel-Responsibilities\"><a href=\"#Kernel-Responsibilities\" class=\"headerlink\" title=\"Kernel Responsibilities\"></a>Kernel Responsibilities</h2><ul>\n<li>Process Management</li>\n<li>Memory Management</li>\n<li>File System Management</li>\n<li>Device Management</li>\n</ul>\n<h1 id=\"Basic-Commands\"><a href=\"#Basic-Commands\" class=\"headerlink\" title=\"Basic Commands\"></a>Basic Commands</h1><h2 id=\"who-vs-whoami\"><a href=\"#who-vs-whoami\" class=\"headerlink\" title=\"who vs whoami\"></a><code>who</code> vs <code>whoami</code></h2><p><code>who</code> it gives the list of all users currently logged in to the machine<br><code>whoami</code> let you know the current user who is in the shell.</p>\n<h2 id=\"Keyboard-Control\"><a href=\"#Keyboard-Control\" class=\"headerlink\" title=\"Keyboard Control\"></a>Keyboard Control</h2><table>\n<thead>\n<tr>\n<th>options</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^C</td>\n<td style=\"text-align:right\">interrupt command</td>\n</tr>\n<tr>\n<td>^Z</td>\n<td style=\"text-align:right\">suspend command</td>\n</tr>\n<tr>\n<td>^D</td>\n<td style=\"text-align:right\">end of file</td>\n</tr>\n<tr>\n<td>^S</td>\n<td style=\"text-align:right\">suspend output</td>\n</tr>\n<tr>\n<td>^Q</td>\n<td style=\"text-align:right\">continue output</td>\n</tr>\n<tr>\n<td>^H (^?)</td>\n<td style=\"text-align:right\">delete last character</td>\n</tr>\n<tr>\n<td>^W</td>\n<td style=\"text-align:right\">delete last word</td>\n</tr>\n<tr>\n<td>^U</td>\n<td style=\"text-align:right\">delete line</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"File-System\"><a href=\"#File-System\" class=\"headerlink\" title=\"File System\"></a>File System</h1><h2 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h2><p><code>ls</code> - list directory contents<br><code>ls -F</code> - append indicator (one of */=&gt;@|) to entries (‘/‘ means directory)<br><code>ls -l</code> - use a long listing format<br><code>ls -i</code> - print the index number of each file<br><code>wc</code> - print newline, word, and byte counts for each file<br><code>cat</code> - concatenate files and print on the standard output<br><code>mkdir</code> - creates directories<br><code>rmdir</code> - removes directories<br><code>cp</code> - copies files and directories around the file system<br>(P.S. wildcards cannot be used for names which don’t exist)<br><code>mv</code> - move files and sub-directories<br><code>rm</code> - deletes files and direcotry structures<br><code>rm -i</code> requests confirmation before deleting files<br><code>head</code> - displays the first lines of a file<br><code>tail</code> - displays the last lines of a file<br>(e.g. head -4 userlist - display the first 4 lines of userlist)<br>(e.g. tail -3 userlist - display the last 3 lines of userlist)<br><code>grep</code> - searches files for strings</p>\n<h2 id=\"Hierarchical-Structure\"><a href=\"#Hierarchical-Structure\" class=\"headerlink\" title=\"Hierarchical Structure\"></a>Hierarchical Structure</h2><p>Directories can be viewed as branches and files as leaves.</p>\n<h2 id=\"Linking-Files\"><a href=\"#Linking-Files\" class=\"headerlink\" title=\"Linking Files\"></a>Linking Files</h2><p><code>ln</code> - create links<br><code>ln -s</code> -  make symbolic links instead of hard links<br>(P.S.Symbolic links source can be files or directories.Hard links source only files.类似指针)</p>\n<h2 id=\"Searching-Files\"><a href=\"#Searching-Files\" class=\"headerlink\" title=\"Searching Files\"></a>Searching Files</h2><p><code>grep</code> options</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td style=\"text-align:right\">display count of matching lines</td>\n</tr>\n<tr>\n<td>-i</td>\n<td style=\"text-align:right\">case insensitive</td>\n</tr>\n<tr>\n<td>-l</td>\n<td style=\"text-align:right\">list names of files containing matching lines</td>\n</tr>\n<tr>\n<td>-n</td>\n<td style=\"text-align:right\">precede each line by its line number</td>\n</tr>\n<tr>\n<td>-v</td>\n<td style=\"text-align:right\">only display lines that do <em>not match</em></td>\n</tr>\n<tr>\n<td>-w</td>\n<td style=\"text-align:right\">search for the expression as a word</td>\n</tr>\n</tbody>\n</table>\n<p>can use Regex expressions for strings.</p>\n<h2 id=\"Quoting\"><a href=\"#Quoting\" class=\"headerlink\" title=\"Quoting\"></a>Quoting</h2><p>Quoting allows characters to be hidden from the shell.</p>\n<pre><code>e.g. $ echo hello      world\nhello world\n$ echo &quot;hello   world&quot;\nhello   world\n</code></pre><h2 id=\"Sorting-Files\"><a href=\"#Sorting-Files\" class=\"headerlink\" title=\"Sorting Files\"></a>Sorting Files</h2><p><code>sort</code> - organises files into alpha-numeric order<br><code>sort -n</code> - sort on numeric value<br><code>sort -r</code> - reverse the sort<br><code>sort +#</code> - skip # fields to start of sort key<br>(e.g. <code>sort +3n</code> means from 3rd fields to start sort on numeric value)</p>\n<h2 id=\"Comparing-Files\"><a href=\"#Comparing-Files\" class=\"headerlink\" title=\"Comparing Files\"></a>Comparing Files</h2><p><code>diff</code> - displays the differences between two files<br><code>diff -e</code> - displays the differences in second files</p>\n<h2 id=\"Cutting-Fields\"><a href=\"#Cutting-Fields\" class=\"headerlink\" title=\"Cutting Fields\"></a>Cutting Fields</h2><p><code>cut</code> - removes selected fields from each line of the file<br><code>cut -d</code> -  use DELIM instead of TAB for field delimiter.自定义分隔符，通常是制表符。<br><code>cut -f</code>-  f means fields. select only these fields;  also print anyline that contains  no delimiter character, unless the -s option is specified<br><code>cut -b</code> - select bypes</p>\n<h2 id=\"Duplicate-Lines\"><a href=\"#Duplicate-Lines\" class=\"headerlink\" title=\"Duplicate Lines\"></a>Duplicate Lines</h2><p><code>uniq</code> - removes duplicate adjacent lines from files<br><code>uniq -c</code> - count number of duplicate line before files lines<br><code>uniq -d</code> - only print repeated lines<br><code>uniq -u</code> - only print non-repeated lines</p>\n<h2 id=\"Transliterating-Files\"><a href=\"#Transliterating-Files\" class=\"headerlink\" title=\"Transliterating Files\"></a>Transliterating Files</h2><p><code>tr</code> - translate characters from input to output.<br>(Default input is STDIN. Default output is STDOUT. )<br><code>tr SET1 [SET2]</code> - translate SET1 in input to SET2.</p>\n<h2 id=\"Printing-Files\"><a href=\"#Printing-Files\" class=\"headerlink\" title=\"Printing Files\"></a>Printing Files</h2><p><code>lpr</code> - send files to a printer<br><code>lpq</code> - queries the state of the print queue<br><code>lprm</code> - dequeues jobs from the print queue.remove the jobs.</p>\n<h2 id=\"Searching-for-Files\"><a href=\"#Searching-for-Files\" class=\"headerlink\" title=\"Searching for Files\"></a>Searching for Files</h2><p><code>find</code> - searches any part of the file system.</p>\n<ul>\n<li>it can apply any Unix command to the files found</li>\n<li>it can print the file name found</li>\n<li>it can search for files based on several file attributes</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>options</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-name</td>\n<td style=\"text-align:right\">filename pattern</td>\n</tr>\n<tr>\n<td>-user</td>\n<td style=\"text-align:right\">user name</td>\n</tr>\n<tr>\n<td>-group</td>\n<td style=\"text-align:right\">group name</td>\n</tr>\n<tr>\n<td>-size</td>\n<td style=\"text-align:right\">[+/-] size in blocks</td>\n</tr>\n<tr>\n<td>-perm</td>\n<td style=\"text-align:right\">[-] octal number</td>\n</tr>\n<tr>\n<td>-atime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-mtime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-ctime</td>\n<td style=\"text-align:right\">[+/-] days</td>\n</tr>\n<tr>\n<td>-type</td>\n<td style=\"text-align:right\">[d/f/l]</td>\n</tr>\n<tr>\n<td>-inum</td>\n<td style=\"text-align:right\">i-node number</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"File-Access-Control\"><a href=\"#File-Access-Control\" class=\"headerlink\" title=\"File Access Control\"></a>File Access Control</h1><h2 id=\"Permissions\"><a href=\"#Permissions\" class=\"headerlink\" title=\"Permissions\"></a>Permissions</h2><h3 id=\"Access-rights-for-files\"><a href=\"#Access-rights-for-files\" class=\"headerlink\" title=\"Access rights for files\"></a>Access rights for files</h3><table>\n<thead>\n<tr>\n<th>rights</th>\n<th style=\"text-align:center\">meaning</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td style=\"text-align:center\">read</td>\n<td style=\"text-align:right\">read contens</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:center\">write</td>\n<td style=\"text-align:right\">update and implies delete</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:center\">execute</td>\n<td style=\"text-align:right\">attempt to run program</td>\n</tr>\n<tr>\n<td>s</td>\n<td style=\"text-align:center\">set ID</td>\n<td style=\"text-align:right\">change the UID or GID of process</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Access-rights-for-directories\"><a href=\"#Access-rights-for-directories\" class=\"headerlink\" title=\"Access rights for directories\"></a>Access rights for directories</h3><table>\n<thead>\n<tr>\n<th>rights</th>\n<th style=\"text-align:center\">meaning</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td style=\"text-align:center\">list</td>\n<td style=\"text-align:right\">list contens</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:center\">write</td>\n<td style=\"text-align:right\">create and delete any files</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:center\">search</td>\n<td style=\"text-align:right\">search directory(cd)</td>\n</tr>\n<tr>\n<td>t</td>\n<td style=\"text-align:center\">sticky</td>\n<td style=\"text-align:right\">control write access to directories</td>\n</tr>\n</tbody>\n</table>\n<p>use <code>ls -l</code> to display access rights. The order is type, user, group, others.<br>e.g. drwxrw-r–</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th style=\"text-align:center\">user</th>\n<th style=\"text-align:center\">group</th>\n<th style=\"text-align:right\">others</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d</td>\n<td style=\"text-align:center\">rwx</td>\n<td style=\"text-align:center\">rw-</td>\n<td style=\"text-align:right\">r–</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Setting-Permissions\"><a href=\"#Setting-Permissions\" class=\"headerlink\" title=\"Setting Permissions\"></a>Setting Permissions</h2><p><code>chmod</code> - change permissions<br><code>chomd -R</code> -  enables recursion through a directory(递归遍历)</p>\n<p>The permission mode is set using a symbolic notation and a numeric notation.</p>\n<h3 id=\"Symbolic-Notation\"><a href=\"#Symbolic-Notation\" class=\"headerlink\" title=\"Symbolic Notation\"></a>Symbolic Notation</h3><p>e.g. <code>chmod go+r aFile</code> means group and others add r access rights.</p>\n<h3 id=\"Numeric-Notation\"><a href=\"#Numeric-Notation\" class=\"headerlink\" title=\"Numeric Notation\"></a>Numeric Notation</h3><p>treats the permissions as a bit pattern.<br>e.g. </p>\n<table>\n<thead>\n<tr>\n<th>r</th>\n<th style=\"text-align:center\">w</th>\n<th style=\"text-align:right\">x</th>\n<th>total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:right\">1</td>\n<td>7 means rwx</td>\n</tr>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:right\">1</td>\n<td>5 means rx</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Default-Permissions\"><a href=\"#Default-Permissions\" class=\"headerlink\" title=\"Default Permissions\"></a>Default Permissions</h2><p><code>umask</code> - defines the default permission bits. in numeric notation to show permission.</p>\n<h1 id=\"Editing-Files\"><a href=\"#Editing-Files\" class=\"headerlink\" title=\"Editing Files\"></a>Editing Files</h1><p>| ————- | —–:|<br>| <code>ed</code> | interactive, buffered, line oriented |<br>| <code>vi</code> | interactive, buffered, screen oriented |<br>| <code>sed</code> | non-interactive, non-buffered, stream oriented |</p>\n<h2 id=\"ed\"><a href=\"#ed\" class=\"headerlink\" title=\"ed\"></a>ed</h2><p><code>ed [-p prompt] [filename]</code></p>\n<p><code>[addr,[addr]]&lt;character command&gt; [parameters]</code></p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td style=\"text-align:right\">insert</td>\n</tr>\n<tr>\n<td>a</td>\n<td style=\"text-align:right\">append</td>\n</tr>\n<tr>\n<td>c</td>\n<td style=\"text-align:right\">change</td>\n</tr>\n<tr>\n<td>d</td>\n<td style=\"text-align:right\">delete</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:right\">print</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:right\">write to file</td>\n</tr>\n<tr>\n<td>r</td>\n<td style=\"text-align:right\">read from file</td>\n</tr>\n<tr>\n<td>s/RE/RS/g</td>\n<td style=\"text-align:right\">substitute RE for RS</td>\n</tr>\n<tr>\n<td>t addr</td>\n<td style=\"text-align:right\">transfer to addr</td>\n</tr>\n<tr>\n<td>q</td>\n<td style=\"text-align:right\">quit</td>\n</tr>\n<tr>\n<td>Q</td>\n<td style=\"text-align:right\">really quit</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h2><p><code>vi [-r] [filename]</code></p>\n<h3 id=\"command-mode\"><a href=\"#command-mode\" class=\"headerlink\" title=\"command mode\"></a>command mode</h3><table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h</td>\n<td style=\"text-align:right\">cursor left</td>\n</tr>\n<tr>\n<td>j</td>\n<td style=\"text-align:right\">cursor down</td>\n</tr>\n<tr>\n<td>k</td>\n<td style=\"text-align:right\">cursor up</td>\n</tr>\n<tr>\n<td>l</td>\n<td style=\"text-align:right\">cursor right</td>\n</tr>\n<tr>\n<td>w</td>\n<td style=\"text-align:right\">word forward</td>\n</tr>\n<tr>\n<td>b</td>\n<td style=\"text-align:right\">word backward</td>\n</tr>\n<tr>\n<td>^u</td>\n<td style=\"text-align:right\">page up</td>\n</tr>\n<tr>\n<td>^d</td>\n<td style=\"text-align:right\">page down</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:right\">start of line</td>\n</tr>\n<tr>\n<td>$</td>\n<td style=\"text-align:right\">end of line</td>\n</tr>\n<tr>\n<td>G</td>\n<td style=\"text-align:right\">go to line</td>\n</tr>\n<tr>\n<td>i</td>\n<td style=\"text-align:right\">insert before cursor</td>\n</tr>\n<tr>\n<td>I</td>\n<td style=\"text-align:right\">insert at start of line</td>\n</tr>\n<tr>\n<td>a</td>\n<td style=\"text-align:right\">insert after cursor</td>\n</tr>\n<tr>\n<td>A</td>\n<td style=\"text-align:right\">insert at the end of line</td>\n</tr>\n<tr>\n<td>r</td>\n<td style=\"text-align:right\">replace character</td>\n</tr>\n<tr>\n<td>R</td>\n<td style=\"text-align:right\">overwrite rest of line</td>\n</tr>\n<tr>\n<td>o</td>\n<td style=\"text-align:right\">open line below</td>\n</tr>\n<tr>\n<td>O</td>\n<td style=\"text-align:right\">open line above</td>\n</tr>\n<tr>\n<td>x</td>\n<td style=\"text-align:right\">delete current character</td>\n</tr>\n<tr>\n<td>X</td>\n<td style=\"text-align:right\">delete character before cursor</td>\n</tr>\n<tr>\n<td>d</td>\n<td style=\"text-align:right\">delete text</td>\n</tr>\n<tr>\n<td>D</td>\n<td style=\"text-align:right\">delete the rest of the line</td>\n</tr>\n<tr>\n<td>y</td>\n<td style=\"text-align:right\">yank text into buffer</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:right\">paste buffer before</td>\n</tr>\n<tr>\n<td>P</td>\n<td style=\"text-align:right\">paste buffer after</td>\n</tr>\n<tr>\n<td>/</td>\n<td style=\"text-align:right\">search forward for RE</td>\n</tr>\n<tr>\n<td>?</td>\n<td style=\"text-align:right\">search back for RE</td>\n</tr>\n<tr>\n<td>n</td>\n<td style=\"text-align:right\">repeat search</td>\n</tr>\n<tr>\n<td>.</td>\n<td style=\"text-align:right\">repeat last change</td>\n</tr>\n<tr>\n<td>u</td>\n<td style=\"text-align:right\">undo last change</td>\n</tr>\n<tr>\n<td>N</td>\n<td style=\"text-align:right\">reverse search</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"ex-Mode\"><a href=\"#ex-Mode\" class=\"headerlink\" title=\"ex Mode\"></a>ex Mode</h3><p>allows you to enter ex(ed) commands</p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:wq</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n<tr>\n<td>:x</td>\n<td style=\"text-align:right\">write file then quit</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td style=\"text-align:right\">force quit without save</td>\n</tr>\n<tr>\n<td>:q</td>\n<td style=\"text-align:right\">quit</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Process-Commands\"><a href=\"#Process-Commands\" class=\"headerlink\" title=\"Process Commands\"></a>Process Commands</h1><p><code>more</code> - used to paginate files.<br><code>more</code> is invoked as a new process by the shell.<br><code>cd</code> and <code>pwd</code> are commands to the shell itself and don’t give rise to new processes.</p>\n<h1 id=\"The-Shell\"><a href=\"#The-Shell\" class=\"headerlink\" title=\"The Shell\"></a>The Shell</h1><p>Login shell is invoked as the user logs in, dies when the user logs out.<br>Wildcards be used to generate filenames.</p>\n<table>\n<thead>\n<tr>\n<th>wildcards</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td style=\"text-align:right\">any number of characters</td>\n</tr>\n<tr>\n<td>?</td>\n<td style=\"text-align:right\">any single character</td>\n</tr>\n<tr>\n<td>[ab]</td>\n<td style=\"text-align:right\">a or b or specified range</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-I-O-Redirection\"><a href=\"#Shell-I-O-Redirection\" class=\"headerlink\" title=\"Shell I/O Redirection\"></a>Shell I/O Redirection</h2><p>Standard I/O is STDIN, STDOUT, STDERR(producing error messages)</p>\n<table>\n<thead>\n<tr>\n<th>symbol</th>\n<th style=\"text-align:right\">meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td style=\"text-align:right\">redirect output</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td style=\"text-align:right\">append to existing file</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td style=\"text-align:right\">redirect input</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td style=\"text-align:right\">redirect STDIN from command itself</td>\n</tr>\n<tr>\n<td>`</td>\n<td style=\"text-align:right\">`</td>\n<td>pipeline commands</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Background-Jobs\"><a href=\"#Background-Jobs\" class=\"headerlink\" title=\"Background Jobs\"></a>Background Jobs</h2><p>use <code>&amp;</code> to put jobs into the background.<br><code>jobs</code> - list all jobs in the shell</p>\n<p><code>bg %n</code> - move a job to the background<br><code>fg %n</code> - move a job into the foreground<br><code>stop %n</code> - stop a background job - a stopped job can be restarted<br><code>^Z</code> - stop a foreground job</p>\n<p>%n – n is the number in the square brackets from the <code>jobs</code> command.</p>\n<h2 id=\"new-processes\"><a href=\"#new-processes\" class=\"headerlink\" title=\"new processes\"></a>new processes</h2><p>The parent process waits until the child process ends.<br>The child process inherits the parent attributes.<br>When the child process dies, its exit code is sent to its parent, waking the parent process up.</p>\n<h2 id=\"Shell-Variables\"><a href=\"#Shell-Variables\" class=\"headerlink\" title=\"Shell Variables\"></a>Shell Variables</h2><p><code>set</code> - displays local variables<br><code>env</code> - displays environment variables<br><code>aliases</code> - create alternative commands</p>\n<h2 id=\"Shell-Program\"><a href=\"#Shell-Program\" class=\"headerlink\" title=\"Shell Program\"></a>Shell Program</h2><p>$0 - Command nae<br>$# - Number of arguments<br>$<em>, $@ - All of the arguments<br>“$</em>“ - one argument of all parameters from $1, like “$1 $2 … $n”<br>“$@” - All aruments from $1, like “$1” “$2” … “$n”<br><code>shift</code> - moves arguments down to access others (弹出一个参数)<br><code>read</code> - reads from standard input</p>\n<pre><code>read name address\necho goodbye $name of $address\n</code></pre><p><code>test</code> - evaluates general conditions. succeed return 0, otherwise non zero.<br><code>expr</code> - evaluate expressions, cuz shell does not understand numbers, each argument must be separated by spaces.</p>\n<h2 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h2><ul>\n<li>A non-interactive, stream-oriented editor.</li>\n<li>works on lines of text</li>\n<li>input flows through the program and is directed to standard output</li>\n</ul>\n<p>| option | meaning |<br>| -f | allows a sed script file to be specified |<br>| -e | Precedes each edit when multiple edits are defined |<br>| -n | Suppress the default output |</p>\n"},{"title":"移动端上下滑动切换屏幕的实现","date":"2016-07-21T13:42:01.000Z","_content":"### 前言\n看过了不少移动端上下滑动切换屏幕的效果，于是自己拿简历试着实现了一下。效果可看:[滑动切换屏幕效果][1]或者扫描二维码\n![lsxj615.com/cv](http://oao50r2ex.bkt.clouddn.com/imagcv.png)\n\n\n## 实现过程\n\n* ### 大体思路\n\n页面的切换主要是采用`css3`动画效果`transform:translateY()`来实现。事件监听主要以`touchstart`,`touchmove`,`touchend`。\n\n* ### HTML结构\n\n\t\t<div class=\"container\"> \n\t\t    <section id = \"intro\">...</section>   \n\t\t    <section id = \"project\">...</section> \n\t\t    <section id = \"profession\">...</section>\n\t\t    <section id = \"education\">...</section>\n\t\t    <section id = \"contact\">...</section>  \n\t\t</div>\n\n* ### CSS样式如下：\n\n\t\t//css样式\n\t    html,body {\n\t        width: 100%;\n\t        height: 100%;\n\t        padding: 0;\n\t        margin: 0;\n\t        overflow: hidden; \n\t    }\n\n\t    .container {\n\t        position: absolute; \n\t        width: 100%;\n\t        height: 100%;\n\t        -webkit-transform: translate3d(0, 0, 0);\n\t        -moz-transform: translate3d(0, 0, 0);\n\t        -o-transform: translate3d(0, 0, 0);\n\t        -ms-transform: translate3d(0, 0, 0);\n\t        transform: translate3d(0, 0, 0);\n\t        -webkit-backface-visibility: hidden;\n\t        -webkit-transition: all 0.5s ease;\n\t        -moz-transition: all 0.5s ease;\n\t        -o-transition: all 0.5s ease;\n\t        -ms-transition: all 0.5s ease;\n\t        transition: all 0.5s ease; \n\t    }\n\t    \n\t    .container > section {\n\t        position: relative;\n\t        width: 100%;\n\t        height: 100%; \n\t    }\n    \n   其中`-webkit-backface-visibility:hidden`是为了隐藏被旋转的元素的背面。关于动画效果，由于我采用的`SCSS`，在更改时只需要更改$n即container内section的个数，较为便捷。\n\n\t    //以下为SCSS部分：\n\t    $n:5;\n\t    @function getContentTopOffset($i) {\n\t        @return -100%*$i+100%;\n\t    }\n\t    @for $i from 1 through $n {\n\t        .slide_to_#{$i} {\n\t            transform: translateY(getContentTopOffset($i));\n\t        }\n\t    }\n\t    //CSS的效果如下：\n\t    .slide_to_1 {\n\t\t\ttransform: translateY(0%); }\n\t    \n\t    .slide_to_2 {\n\t\t\ttransform: translateY(-100%); }\n\t    \n\t    .slide_to_3 {\n\t\t\ttransform: translateY(-200%); }\n\t    \n\t    .slide_to_4 {\n\t\t\ttransform: translateY(-300%); }\n\t    \n\t    .slide_to_5 {\n\t\t\ttransform: translateY(-400%); }\n    \n    \n   切换的效果示意图如下：container相当于红色边框矩形，内容部分就相当于白色部分。下图为最初效果，红色矩形内为可见的。如图1.当container执行translateY(-100%)时，就相当于内容部分向上移动了100%，即显示了下一部分的页面。如图2所示。   \n图1：最初效果 ![](http://oao50r2ex.bkt.clouddn.com/image/blog0721_1.png)   \n图2：移动后的效果![](http://oao50r2ex.bkt.clouddn.com/image/blog0721_2.png)\n    \n* ### js实现\n知道如何切换页面之后就好办了。\n\n\t    var cur_page = 1, //当前页数\n\t        slide_range = 30, \n\t        page_count = 5,//共有5页\n\t        obj_container = '.container';//需要切换页面的元素\n\n\t    $(document).on(\"touchstart\",obj_container, function(e){\n\t        touchFirst_obj = {\n\t            startY: e.touches[0].clientY\n\t        };\n\t    });//记录起始触屏位置\n\t    \n\t    $(document).on(\"touchmove\",obj_container, function(e){\n\t        e.preventDefault();//阻止浏览器默认事件\n\t        touchLast_obj = e.touches[0];\n\t\t\tmoveY = touchLast_obj.clientY - touchFirst_obj.startY;\n\t    });\n\t    \n\t    $(document).on(\"touchstart\",obj_container, function(e){\n\t        if(moveY > 0) { //向上滑\n\t\t\t\tmoveUp();\n\t\t\t} else if(moveY < 0) { //向下滑\n\t\t\t\tmoveDown();\n\t\t\t}\n\t\t\tif(moveY != 0) {//如果有滑动，则需要切换页面\n\t\t\t\tswitching();\n\t\t\t}\n\t    });\n\t    \n\t    function moveDown() { //向下滑\n\t\t\tif(cur_page == +page_count) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcur_page++;\n\t\t}\n\t\n\t    function moveUp() { //向上滑\n\t\t\tif(cur_page == 1) return;\n\t\t\tcur_page--;\n\t\t}\n\t\n\t    function switching() {//切换页面\n\t\t\t$(obj_selector).attr('class', obj_container + ' slide_to_' + cur_page);\n\t\t}\n\n\n   技术不精，若有Bug欢迎指正！原创作品，若有转载请告知。谢谢！\n    \n  [1]: http://lsxj615.com/cv\n","source":"_posts/mobile-touch-switch.md","raw":"---\ntitle: 移动端上下滑动切换屏幕的实现\ndate: 2016-07-21 21:42:01\ncategories: 前端开发\ntags: [html5, css, javascript]\n---\n### 前言\n看过了不少移动端上下滑动切换屏幕的效果，于是自己拿简历试着实现了一下。效果可看:[滑动切换屏幕效果][1]或者扫描二维码\n![lsxj615.com/cv](http://oao50r2ex.bkt.clouddn.com/imagcv.png)\n\n\n## 实现过程\n\n* ### 大体思路\n\n页面的切换主要是采用`css3`动画效果`transform:translateY()`来实现。事件监听主要以`touchstart`,`touchmove`,`touchend`。\n\n* ### HTML结构\n\n\t\t<div class=\"container\"> \n\t\t    <section id = \"intro\">...</section>   \n\t\t    <section id = \"project\">...</section> \n\t\t    <section id = \"profession\">...</section>\n\t\t    <section id = \"education\">...</section>\n\t\t    <section id = \"contact\">...</section>  \n\t\t</div>\n\n* ### CSS样式如下：\n\n\t\t//css样式\n\t    html,body {\n\t        width: 100%;\n\t        height: 100%;\n\t        padding: 0;\n\t        margin: 0;\n\t        overflow: hidden; \n\t    }\n\n\t    .container {\n\t        position: absolute; \n\t        width: 100%;\n\t        height: 100%;\n\t        -webkit-transform: translate3d(0, 0, 0);\n\t        -moz-transform: translate3d(0, 0, 0);\n\t        -o-transform: translate3d(0, 0, 0);\n\t        -ms-transform: translate3d(0, 0, 0);\n\t        transform: translate3d(0, 0, 0);\n\t        -webkit-backface-visibility: hidden;\n\t        -webkit-transition: all 0.5s ease;\n\t        -moz-transition: all 0.5s ease;\n\t        -o-transition: all 0.5s ease;\n\t        -ms-transition: all 0.5s ease;\n\t        transition: all 0.5s ease; \n\t    }\n\t    \n\t    .container > section {\n\t        position: relative;\n\t        width: 100%;\n\t        height: 100%; \n\t    }\n    \n   其中`-webkit-backface-visibility:hidden`是为了隐藏被旋转的元素的背面。关于动画效果，由于我采用的`SCSS`，在更改时只需要更改$n即container内section的个数，较为便捷。\n\n\t    //以下为SCSS部分：\n\t    $n:5;\n\t    @function getContentTopOffset($i) {\n\t        @return -100%*$i+100%;\n\t    }\n\t    @for $i from 1 through $n {\n\t        .slide_to_#{$i} {\n\t            transform: translateY(getContentTopOffset($i));\n\t        }\n\t    }\n\t    //CSS的效果如下：\n\t    .slide_to_1 {\n\t\t\ttransform: translateY(0%); }\n\t    \n\t    .slide_to_2 {\n\t\t\ttransform: translateY(-100%); }\n\t    \n\t    .slide_to_3 {\n\t\t\ttransform: translateY(-200%); }\n\t    \n\t    .slide_to_4 {\n\t\t\ttransform: translateY(-300%); }\n\t    \n\t    .slide_to_5 {\n\t\t\ttransform: translateY(-400%); }\n    \n    \n   切换的效果示意图如下：container相当于红色边框矩形，内容部分就相当于白色部分。下图为最初效果，红色矩形内为可见的。如图1.当container执行translateY(-100%)时，就相当于内容部分向上移动了100%，即显示了下一部分的页面。如图2所示。   \n图1：最初效果 ![](http://oao50r2ex.bkt.clouddn.com/image/blog0721_1.png)   \n图2：移动后的效果![](http://oao50r2ex.bkt.clouddn.com/image/blog0721_2.png)\n    \n* ### js实现\n知道如何切换页面之后就好办了。\n\n\t    var cur_page = 1, //当前页数\n\t        slide_range = 30, \n\t        page_count = 5,//共有5页\n\t        obj_container = '.container';//需要切换页面的元素\n\n\t    $(document).on(\"touchstart\",obj_container, function(e){\n\t        touchFirst_obj = {\n\t            startY: e.touches[0].clientY\n\t        };\n\t    });//记录起始触屏位置\n\t    \n\t    $(document).on(\"touchmove\",obj_container, function(e){\n\t        e.preventDefault();//阻止浏览器默认事件\n\t        touchLast_obj = e.touches[0];\n\t\t\tmoveY = touchLast_obj.clientY - touchFirst_obj.startY;\n\t    });\n\t    \n\t    $(document).on(\"touchstart\",obj_container, function(e){\n\t        if(moveY > 0) { //向上滑\n\t\t\t\tmoveUp();\n\t\t\t} else if(moveY < 0) { //向下滑\n\t\t\t\tmoveDown();\n\t\t\t}\n\t\t\tif(moveY != 0) {//如果有滑动，则需要切换页面\n\t\t\t\tswitching();\n\t\t\t}\n\t    });\n\t    \n\t    function moveDown() { //向下滑\n\t\t\tif(cur_page == +page_count) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcur_page++;\n\t\t}\n\t\n\t    function moveUp() { //向上滑\n\t\t\tif(cur_page == 1) return;\n\t\t\tcur_page--;\n\t\t}\n\t\n\t    function switching() {//切换页面\n\t\t\t$(obj_selector).attr('class', obj_container + ' slide_to_' + cur_page);\n\t\t}\n\n\n   技术不精，若有Bug欢迎指正！原创作品，若有转载请告知。谢谢！\n    \n  [1]: http://lsxj615.com/cv\n","slug":"mobile-touch-switch","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjq000qy3qwl7j34pkj","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>看过了不少移动端上下滑动切换屏幕的效果，于是自己拿简历试着实现了一下。效果可看:<a href=\"http://lsxj615.com/cv\" target=\"_blank\" rel=\"external\">滑动切换屏幕效果</a>或者扫描二维码<br><img src=\"http://oao50r2ex.bkt.clouddn.com/imagcv.png\" alt=\"lsxj615.com/cv\"></p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ul>\n<li><h3 id=\"大体思路\"><a href=\"#大体思路\" class=\"headerlink\" title=\"大体思路\"></a>大体思路</h3></li>\n</ul>\n<p>页面的切换主要是采用<code>css3</code>动画效果<code>transform:translateY()</code>来实现。事件监听主要以<code>touchstart</code>,<code>touchmove</code>,<code>touchend</code>。</p>\n<ul>\n<li><h3 id=\"HTML结构\"><a href=\"#HTML结构\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h3><pre><code>&lt;div class=&quot;container&quot;&gt; \n    &lt;section id = &quot;intro&quot;&gt;...&lt;/section&gt;   \n    &lt;section id = &quot;project&quot;&gt;...&lt;/section&gt; \n    &lt;section id = &quot;profession&quot;&gt;...&lt;/section&gt;\n    &lt;section id = &quot;education&quot;&gt;...&lt;/section&gt;\n    &lt;section id = &quot;contact&quot;&gt;...&lt;/section&gt;  \n&lt;/div&gt;\n</code></pre></li>\n<li><h3 id=\"CSS样式如下：\"><a href=\"#CSS样式如下：\" class=\"headerlink\" title=\"CSS样式如下：\"></a>CSS样式如下：</h3><pre><code>//css样式\nhtml,body {\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    overflow: hidden; \n}\n\n.container {\n    position: absolute; \n    width: 100%;\n    height: 100%;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    -webkit-backface-visibility: hidden;\n    -webkit-transition: all 0.5s ease;\n    -moz-transition: all 0.5s ease;\n    -o-transition: all 0.5s ease;\n    -ms-transition: all 0.5s ease;\n    transition: all 0.5s ease; \n}\n\n.container &gt; section {\n    position: relative;\n    width: 100%;\n    height: 100%; \n}\n</code></pre><p> 其中<code>-webkit-backface-visibility:hidden</code>是为了隐藏被旋转的元素的背面。关于动画效果，由于我采用的<code>SCSS</code>，在更改时只需要更改$n即container内section的个数，较为便捷。</p>\n<pre><code>//以下为SCSS部分：\n$n:5;\n@function getContentTopOffset($i) {\n    @return -100%*$i+100%;\n}\n@for $i from 1 through $n {\n    .slide_to_#{$i} {\n        transform: translateY(getContentTopOffset($i));\n    }\n}\n//CSS的效果如下：\n.slide_to_1 {\n    transform: translateY(0%); }\n\n.slide_to_2 {\n    transform: translateY(-100%); }\n\n.slide_to_3 {\n    transform: translateY(-200%); }\n\n.slide_to_4 {\n    transform: translateY(-300%); }\n\n.slide_to_5 {\n    transform: translateY(-400%); }\n</code></pre></li>\n</ul>\n<p>   切换的效果示意图如下：container相当于红色边框矩形，内容部分就相当于白色部分。下图为最初效果，红色矩形内为可见的。如图1.当container执行translateY(-100%)时，就相当于内容部分向上移动了100%，即显示了下一部分的页面。如图2所示。<br>图1：最初效果 <img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0721_1.png\" alt=\"\"><br>图2：移动后的效果<img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0721_2.png\" alt=\"\"></p>\n<ul>\n<li><h3 id=\"js实现\"><a href=\"#js实现\" class=\"headerlink\" title=\"js实现\"></a>js实现</h3><p>知道如何切换页面之后就好办了。</p>\n<pre><code>var cur_page = 1, //当前页数\n    slide_range = 30, \n    page_count = 5,//共有5页\n    obj_container = &apos;.container&apos;;//需要切换页面的元素\n\n$(document).on(&quot;touchstart&quot;,obj_container, function(e){\n    touchFirst_obj = {\n        startY: e.touches[0].clientY\n    };\n});//记录起始触屏位置\n\n$(document).on(&quot;touchmove&quot;,obj_container, function(e){\n    e.preventDefault();//阻止浏览器默认事件\n    touchLast_obj = e.touches[0];\n    moveY = touchLast_obj.clientY - touchFirst_obj.startY;\n});\n\n$(document).on(&quot;touchstart&quot;,obj_container, function(e){\n    if(moveY &gt; 0) { //向上滑\n        moveUp();\n    } else if(moveY &lt; 0) { //向下滑\n        moveDown();\n    }\n    if(moveY != 0) {//如果有滑动，则需要切换页面\n        switching();\n    }\n});\n\nfunction moveDown() { //向下滑\n    if(cur_page == +page_count) {\n        return;\n    }\n    cur_page++;\n}\n\nfunction moveUp() { //向上滑\n    if(cur_page == 1) return;\n    cur_page--;\n}\n\nfunction switching() {//切换页面\n    $(obj_selector).attr(&apos;class&apos;, obj_container + &apos; slide_to_&apos; + cur_page);\n}\n</code></pre></li>\n</ul>\n<p>   技术不精，若有Bug欢迎指正！原创作品，若有转载请告知。谢谢！</p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>看过了不少移动端上下滑动切换屏幕的效果，于是自己拿简历试着实现了一下。效果可看:<a href=\"http://lsxj615.com/cv\">滑动切换屏幕效果</a>或者扫描二维码<br><img src=\"http://oao50r2ex.bkt.clouddn.com/imagcv.png\" alt=\"lsxj615.com/cv\"></p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ul>\n<li><h3 id=\"大体思路\"><a href=\"#大体思路\" class=\"headerlink\" title=\"大体思路\"></a>大体思路</h3></li>\n</ul>\n<p>页面的切换主要是采用<code>css3</code>动画效果<code>transform:translateY()</code>来实现。事件监听主要以<code>touchstart</code>,<code>touchmove</code>,<code>touchend</code>。</p>\n<ul>\n<li><h3 id=\"HTML结构\"><a href=\"#HTML结构\" class=\"headerlink\" title=\"HTML结构\"></a>HTML结构</h3><pre><code>&lt;div class=&quot;container&quot;&gt; \n    &lt;section id = &quot;intro&quot;&gt;...&lt;/section&gt;   \n    &lt;section id = &quot;project&quot;&gt;...&lt;/section&gt; \n    &lt;section id = &quot;profession&quot;&gt;...&lt;/section&gt;\n    &lt;section id = &quot;education&quot;&gt;...&lt;/section&gt;\n    &lt;section id = &quot;contact&quot;&gt;...&lt;/section&gt;  \n&lt;/div&gt;\n</code></pre></li>\n<li><h3 id=\"CSS样式如下：\"><a href=\"#CSS样式如下：\" class=\"headerlink\" title=\"CSS样式如下：\"></a>CSS样式如下：</h3><pre><code>//css样式\nhtml,body {\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    overflow: hidden; \n}\n\n.container {\n    position: absolute; \n    width: 100%;\n    height: 100%;\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    -webkit-backface-visibility: hidden;\n    -webkit-transition: all 0.5s ease;\n    -moz-transition: all 0.5s ease;\n    -o-transition: all 0.5s ease;\n    -ms-transition: all 0.5s ease;\n    transition: all 0.5s ease; \n}\n\n.container &gt; section {\n    position: relative;\n    width: 100%;\n    height: 100%; \n}\n</code></pre><p> 其中<code>-webkit-backface-visibility:hidden</code>是为了隐藏被旋转的元素的背面。关于动画效果，由于我采用的<code>SCSS</code>，在更改时只需要更改$n即container内section的个数，较为便捷。</p>\n<pre><code>//以下为SCSS部分：\n$n:5;\n@function getContentTopOffset($i) {\n    @return -100%*$i+100%;\n}\n@for $i from 1 through $n {\n    .slide_to_#{$i} {\n        transform: translateY(getContentTopOffset($i));\n    }\n}\n//CSS的效果如下：\n.slide_to_1 {\n    transform: translateY(0%); }\n\n.slide_to_2 {\n    transform: translateY(-100%); }\n\n.slide_to_3 {\n    transform: translateY(-200%); }\n\n.slide_to_4 {\n    transform: translateY(-300%); }\n\n.slide_to_5 {\n    transform: translateY(-400%); }\n</code></pre></li>\n</ul>\n<p>   切换的效果示意图如下：container相当于红色边框矩形，内容部分就相当于白色部分。下图为最初效果，红色矩形内为可见的。如图1.当container执行translateY(-100%)时，就相当于内容部分向上移动了100%，即显示了下一部分的页面。如图2所示。<br>图1：最初效果 <img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0721_1.png\" alt=\"\"><br>图2：移动后的效果<img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0721_2.png\" alt=\"\"></p>\n<ul>\n<li><h3 id=\"js实现\"><a href=\"#js实现\" class=\"headerlink\" title=\"js实现\"></a>js实现</h3><p>知道如何切换页面之后就好办了。</p>\n<pre><code>var cur_page = 1, //当前页数\n    slide_range = 30, \n    page_count = 5,//共有5页\n    obj_container = &apos;.container&apos;;//需要切换页面的元素\n\n$(document).on(&quot;touchstart&quot;,obj_container, function(e){\n    touchFirst_obj = {\n        startY: e.touches[0].clientY\n    };\n});//记录起始触屏位置\n\n$(document).on(&quot;touchmove&quot;,obj_container, function(e){\n    e.preventDefault();//阻止浏览器默认事件\n    touchLast_obj = e.touches[0];\n    moveY = touchLast_obj.clientY - touchFirst_obj.startY;\n});\n\n$(document).on(&quot;touchstart&quot;,obj_container, function(e){\n    if(moveY &gt; 0) { //向上滑\n        moveUp();\n    } else if(moveY &lt; 0) { //向下滑\n        moveDown();\n    }\n    if(moveY != 0) {//如果有滑动，则需要切换页面\n        switching();\n    }\n});\n\nfunction moveDown() { //向下滑\n    if(cur_page == +page_count) {\n        return;\n    }\n    cur_page++;\n}\n\nfunction moveUp() { //向上滑\n    if(cur_page == 1) return;\n    cur_page--;\n}\n\nfunction switching() {//切换页面\n    $(obj_selector).attr(&apos;class&apos;, obj_container + &apos; slide_to_&apos; + cur_page);\n}\n</code></pre></li>\n</ul>\n<p>   技术不精，若有Bug欢迎指正！原创作品，若有转载请告知。谢谢！</p>\n"},{"title":"一道笔试题引发的promise笔记","date":"2016-08-04T09:54:01.000Z","_content":"### 前言\n近来参加校招笔试，发现有好几道关于Promise的题目。然而我都没有了解过。所以，这篇文章以网易笔试的一道题开始，记录关于Promise的那些事。\n\n### 笔试题\n\n\tconsole.log(1);\n\tnew Promise(function (resolve, reject){\n\t    reject(true);\n\t    window.setTimeout(function (){\n\t        resolve(false);\n\t    }, 0);\n\t}).then(function(){\n\t    console.log(2);\n\t}, function(){\n\t    console.log(3);\n\t});\n\tconsole.log(4);\n\n\n请问输出结果是什么？在揭晓答案之前，我们还是先来了解一下Promise吧。\n\n### Promise是什么\n> Promise 对象用于异步(asynchronous)计算.。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。\n> Promise 对象是一个返回值的代理，这个返回值在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。 这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回值的 promise 对象来替代原返回值。\n\n### Promise的API\n#### Constructor\n使用`new`来调用`Promise`的构造器进行实例化\n\n\tvar promise = new Promise(function(resolve, reject){\n\t    //异步处理\n\t    //处理结束后，调用resolve或reject\n\t});\n\n\n#### Instance Method\n对通过new生成的promise对象为了设置其在resolve(成功)/reject(失败)时调用的回调函数可以使用`promise.then()`实例方法\n\n\n\tpromise.then(onFulfilled, onRejected);\n\t//以防误解，上述的即为以下这种形式\n\tpromise.then(function(){...}, function(){...});\n\n\n当resolve(成功)时，会调用`onFulfilled`函数；\nreject(失败)时，会调用`onRejected`函数。\n这也对应了前面笔试题中,`onFulfilled`其实就是`console.log(2)`，也就是说成功时会调用`console.log(2)`，而失败时，`onRejected`就是调用`console.log(3)`。\n\n若只想处理异常情况的函数，可`promise.then(undefined, onRejected)`，当然更好的选择是用`promise.catch()`来处理。二者效果相同。\n\n\n\tpromise.then(function (value) {\n\t    console.log(value); \n\t}).catch(function (error) {\n\t    console.log(error);\n\t});\n\t\n\t//等同于以下形式\n\tpromise.then(function (value) {\n\t    console.log(value);\n\t}, function (error) {\n\t    console.log(error);\n\t});\n\n\n#### 其他方法\n* `Promise.all()`\n* `Promise.race()`\n* `Promise.resolve()`\n* `Promise.reject()`\n\n### Promise的状态\nPromise对象有三种状态\n* pending 初始状态，既不是fulfilled也不是rejected\n* fulfilled 成功。此时调用`onFulfilled`\n* rejected 失败。此时调用`onRejected`\n\nFulfilled和Rejected都可以表示为`Settled`。\n由下图可以了解，最初Promise为`pending`状态，在执行后转为`settled`状态，而`settled`状态分为两种：在成功后转为`fulfilled`，执行`.then(onFulfilled)`方法；在失败后转为`reject`，执行`.then(onRejecttion)`或`.catch(onRejecttion)`，进行异步操作，再返回Promise对象，转为`pending`状态。\n\n![Promise状态图](http://oao50r2ex.bkt.clouddn.com/image/blog0804_1.png)\n\n### `Promise.resolve` & `Promise.reject`\n#### Promise.resolve\n`Promise.resolve(value)`可认为是`new Promise()`方法的快捷方式\n\n\tPromise.value(value);\n\t\n\t//等同于以下代码\n\t\n\tnew Promise(function(resolve){\n\t    resolve(value);\n\t});\n\n\n此时这个promise对象会进入`fulfilled`状态。而`resolve(value)`中的`value`会传递给后面`then`中指定的`onFulfilled`函数。\n\n`Promise.resolve(value)`返回值也是一个promise对象，所以可以进行链式调用.\n\n#### Promise.reject\n`Promise.reject(error)`与上述静态方法类似，也是`new Promise()`方法的快捷方式\n\n\n\tPromise.reject(new Error(\"出错了\"));\n\t//等同于以下代码\n\tnew Promise(function(resolve, reject){\n\t    reject(new Error(\"出错了\"));\n\t});\n\n这段代码则是调用该promise对象通过`then`指定的`onRejected`函数，并将错误对象(Error)传递给`onRejected`函数。\n\n### 笔试题解答\n话不多说，贴图就是。\n\n![答案截图](http://oao50r2ex.bkt.clouddn.com/image.blog0804_2.png)\n\n可以知道，当promise调用了`reject(true)`方法，则传递`true`这个参数给'then'指定的`onRejected`函数，即题目中的`function(){console.log(3);}`。但由于'.then'中指定的方法调用是**异步执行**的，所以会先执行console.log(4);\n\n本篇文章仅是简单介绍promise。欲了解更多内容，可查看以下资料。谢谢~\n\n资料来源：\n* [Promise- Javascipt | MDN][1]\n* [JavaScript Promise迷你书（中文版)][2]\n\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n  [2]: http://liubin.org/promises-book/","source":"_posts/promise-notes.md","raw":"---\ntitle: 一道笔试题引发的promise笔记   \ndate: 2016-08-04 17:54:01\ncategories: 前端开发\ntags: [es6, promise, javascript]\n---\n### 前言\n近来参加校招笔试，发现有好几道关于Promise的题目。然而我都没有了解过。所以，这篇文章以网易笔试的一道题开始，记录关于Promise的那些事。\n\n### 笔试题\n\n\tconsole.log(1);\n\tnew Promise(function (resolve, reject){\n\t    reject(true);\n\t    window.setTimeout(function (){\n\t        resolve(false);\n\t    }, 0);\n\t}).then(function(){\n\t    console.log(2);\n\t}, function(){\n\t    console.log(3);\n\t});\n\tconsole.log(4);\n\n\n请问输出结果是什么？在揭晓答案之前，我们还是先来了解一下Promise吧。\n\n### Promise是什么\n> Promise 对象用于异步(asynchronous)计算.。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。\n> Promise 对象是一个返回值的代理，这个返回值在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。 这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回值的 promise 对象来替代原返回值。\n\n### Promise的API\n#### Constructor\n使用`new`来调用`Promise`的构造器进行实例化\n\n\tvar promise = new Promise(function(resolve, reject){\n\t    //异步处理\n\t    //处理结束后，调用resolve或reject\n\t});\n\n\n#### Instance Method\n对通过new生成的promise对象为了设置其在resolve(成功)/reject(失败)时调用的回调函数可以使用`promise.then()`实例方法\n\n\n\tpromise.then(onFulfilled, onRejected);\n\t//以防误解，上述的即为以下这种形式\n\tpromise.then(function(){...}, function(){...});\n\n\n当resolve(成功)时，会调用`onFulfilled`函数；\nreject(失败)时，会调用`onRejected`函数。\n这也对应了前面笔试题中,`onFulfilled`其实就是`console.log(2)`，也就是说成功时会调用`console.log(2)`，而失败时，`onRejected`就是调用`console.log(3)`。\n\n若只想处理异常情况的函数，可`promise.then(undefined, onRejected)`，当然更好的选择是用`promise.catch()`来处理。二者效果相同。\n\n\n\tpromise.then(function (value) {\n\t    console.log(value); \n\t}).catch(function (error) {\n\t    console.log(error);\n\t});\n\t\n\t//等同于以下形式\n\tpromise.then(function (value) {\n\t    console.log(value);\n\t}, function (error) {\n\t    console.log(error);\n\t});\n\n\n#### 其他方法\n* `Promise.all()`\n* `Promise.race()`\n* `Promise.resolve()`\n* `Promise.reject()`\n\n### Promise的状态\nPromise对象有三种状态\n* pending 初始状态，既不是fulfilled也不是rejected\n* fulfilled 成功。此时调用`onFulfilled`\n* rejected 失败。此时调用`onRejected`\n\nFulfilled和Rejected都可以表示为`Settled`。\n由下图可以了解，最初Promise为`pending`状态，在执行后转为`settled`状态，而`settled`状态分为两种：在成功后转为`fulfilled`，执行`.then(onFulfilled)`方法；在失败后转为`reject`，执行`.then(onRejecttion)`或`.catch(onRejecttion)`，进行异步操作，再返回Promise对象，转为`pending`状态。\n\n![Promise状态图](http://oao50r2ex.bkt.clouddn.com/image/blog0804_1.png)\n\n### `Promise.resolve` & `Promise.reject`\n#### Promise.resolve\n`Promise.resolve(value)`可认为是`new Promise()`方法的快捷方式\n\n\tPromise.value(value);\n\t\n\t//等同于以下代码\n\t\n\tnew Promise(function(resolve){\n\t    resolve(value);\n\t});\n\n\n此时这个promise对象会进入`fulfilled`状态。而`resolve(value)`中的`value`会传递给后面`then`中指定的`onFulfilled`函数。\n\n`Promise.resolve(value)`返回值也是一个promise对象，所以可以进行链式调用.\n\n#### Promise.reject\n`Promise.reject(error)`与上述静态方法类似，也是`new Promise()`方法的快捷方式\n\n\n\tPromise.reject(new Error(\"出错了\"));\n\t//等同于以下代码\n\tnew Promise(function(resolve, reject){\n\t    reject(new Error(\"出错了\"));\n\t});\n\n这段代码则是调用该promise对象通过`then`指定的`onRejected`函数，并将错误对象(Error)传递给`onRejected`函数。\n\n### 笔试题解答\n话不多说，贴图就是。\n\n![答案截图](http://oao50r2ex.bkt.clouddn.com/image.blog0804_2.png)\n\n可以知道，当promise调用了`reject(true)`方法，则传递`true`这个参数给'then'指定的`onRejected`函数，即题目中的`function(){console.log(3);}`。但由于'.then'中指定的方法调用是**异步执行**的，所以会先执行console.log(4);\n\n本篇文章仅是简单介绍promise。欲了解更多内容，可查看以下资料。谢谢~\n\n资料来源：\n* [Promise- Javascipt | MDN][1]\n* [JavaScript Promise迷你书（中文版)][2]\n\n\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n  [2]: http://liubin.org/promises-book/","slug":"promise-notes","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjs000sy3qw2tuwadel","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>近来参加校招笔试，发现有好几道关于Promise的题目。然而我都没有了解过。所以，这篇文章以网易笔试的一道题开始，记录关于Promise的那些事。</p>\n<h3 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h3><pre><code>console.log(1);\nnew Promise(function (resolve, reject){\n    reject(true);\n    window.setTimeout(function (){\n        resolve(false);\n    }, 0);\n}).then(function(){\n    console.log(2);\n}, function(){\n    console.log(3);\n});\nconsole.log(4);\n</code></pre><p>请问输出结果是什么？在揭晓答案之前，我们还是先来了解一下Promise吧。</p>\n<h3 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h3><blockquote>\n<p>Promise 对象用于异步(asynchronous)计算.。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。<br>Promise 对象是一个返回值的代理，这个返回值在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。 这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回值的 promise 对象来替代原返回值。</p>\n</blockquote>\n<h3 id=\"Promise的API\"><a href=\"#Promise的API\" class=\"headerlink\" title=\"Promise的API\"></a>Promise的API</h3><h4 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h4><p>使用<code>new</code>来调用<code>Promise</code>的构造器进行实例化</p>\n<pre><code>var promise = new Promise(function(resolve, reject){\n    //异步处理\n    //处理结束后，调用resolve或reject\n});\n</code></pre><h4 id=\"Instance-Method\"><a href=\"#Instance-Method\" class=\"headerlink\" title=\"Instance Method\"></a>Instance Method</h4><p>对通过new生成的promise对象为了设置其在resolve(成功)/reject(失败)时调用的回调函数可以使用<code>promise.then()</code>实例方法</p>\n<pre><code>promise.then(onFulfilled, onRejected);\n//以防误解，上述的即为以下这种形式\npromise.then(function(){...}, function(){...});\n</code></pre><p>当resolve(成功)时，会调用<code>onFulfilled</code>函数；<br>reject(失败)时，会调用<code>onRejected</code>函数。<br>这也对应了前面笔试题中,<code>onFulfilled</code>其实就是<code>console.log(2)</code>，也就是说成功时会调用<code>console.log(2)</code>，而失败时，<code>onRejected</code>就是调用<code>console.log(3)</code>。</p>\n<p>若只想处理异常情况的函数，可<code>promise.then(undefined, onRejected)</code>，当然更好的选择是用<code>promise.catch()</code>来处理。二者效果相同。</p>\n<pre><code>promise.then(function (value) {\n    console.log(value); \n}).catch(function (error) {\n    console.log(error);\n});\n\n//等同于以下形式\npromise.then(function (value) {\n    console.log(value);\n}, function (error) {\n    console.log(error);\n});\n</code></pre><h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li><code>Promise.all()</code></li>\n<li><code>Promise.race()</code></li>\n<li><code>Promise.resolve()</code></li>\n<li><code>Promise.reject()</code></li>\n</ul>\n<h3 id=\"Promise的状态\"><a href=\"#Promise的状态\" class=\"headerlink\" title=\"Promise的状态\"></a>Promise的状态</h3><p>Promise对象有三种状态</p>\n<ul>\n<li>pending 初始状态，既不是fulfilled也不是rejected</li>\n<li>fulfilled 成功。此时调用<code>onFulfilled</code></li>\n<li>rejected 失败。此时调用<code>onRejected</code></li>\n</ul>\n<p>Fulfilled和Rejected都可以表示为<code>Settled</code>。<br>由下图可以了解，最初Promise为<code>pending</code>状态，在执行后转为<code>settled</code>状态，而<code>settled</code>状态分为两种：在成功后转为<code>fulfilled</code>，执行<code>.then(onFulfilled)</code>方法；在失败后转为<code>reject</code>，执行<code>.then(onRejecttion)</code>或<code>.catch(onRejecttion)</code>，进行异步操作，再返回Promise对象，转为<code>pending</code>状态。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0804_1.png\" alt=\"Promise状态图\"></p>\n<h3 id=\"Promise-resolve-amp-Promise-reject\"><a href=\"#Promise-resolve-amp-Promise-reject\" class=\"headerlink\" title=\"Promise.resolve &amp; Promise.reject\"></a><code>Promise.resolve</code> &amp; <code>Promise.reject</code></h3><h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h4><p><code>Promise.resolve(value)</code>可认为是<code>new Promise()</code>方法的快捷方式</p>\n<pre><code>Promise.value(value);\n\n//等同于以下代码\n\nnew Promise(function(resolve){\n    resolve(value);\n});\n</code></pre><p>此时这个promise对象会进入<code>fulfilled</code>状态。而<code>resolve(value)</code>中的<code>value</code>会传递给后面<code>then</code>中指定的<code>onFulfilled</code>函数。</p>\n<p><code>Promise.resolve(value)</code>返回值也是一个promise对象，所以可以进行链式调用.</p>\n<h4 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h4><p><code>Promise.reject(error)</code>与上述静态方法类似，也是<code>new Promise()</code>方法的快捷方式</p>\n<pre><code>Promise.reject(new Error(&quot;出错了&quot;));\n//等同于以下代码\nnew Promise(function(resolve, reject){\n    reject(new Error(&quot;出错了&quot;));\n});\n</code></pre><p>这段代码则是调用该promise对象通过<code>then</code>指定的<code>onRejected</code>函数，并将错误对象(Error)传递给<code>onRejected</code>函数。</p>\n<h3 id=\"笔试题解答\"><a href=\"#笔试题解答\" class=\"headerlink\" title=\"笔试题解答\"></a>笔试题解答</h3><p>话不多说，贴图就是。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image.blog0804_2.png\" alt=\"答案截图\"></p>\n<p>可以知道，当promise调用了<code>reject(true)</code>方法，则传递<code>true</code>这个参数给’then’指定的<code>onRejected</code>函数，即题目中的<code>function(){console.log(3);}</code>。但由于’.then’中指定的方法调用是<strong>异步执行</strong>的，所以会先执行console.log(4);</p>\n<p>本篇文章仅是简单介绍promise。欲了解更多内容，可查看以下资料。谢谢~</p>\n<p>资料来源：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">Promise- Javascipt | MDN</a></li>\n<li><a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书（中文版)</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>近来参加校招笔试，发现有好几道关于Promise的题目。然而我都没有了解过。所以，这篇文章以网易笔试的一道题开始，记录关于Promise的那些事。</p>\n<h3 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h3><pre><code>console.log(1);\nnew Promise(function (resolve, reject){\n    reject(true);\n    window.setTimeout(function (){\n        resolve(false);\n    }, 0);\n}).then(function(){\n    console.log(2);\n}, function(){\n    console.log(3);\n});\nconsole.log(4);\n</code></pre><p>请问输出结果是什么？在揭晓答案之前，我们还是先来了解一下Promise吧。</p>\n<h3 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h3><blockquote>\n<p>Promise 对象用于异步(asynchronous)计算.。一个Promise对象代表着一个还未完成，但预期将来会完成的操作。<br>Promise 对象是一个返回值的代理，这个返回值在promise对象创建时未必已知。它允许你为异步操作的成功或失败指定处理方法。 这使得异步方法可以像同步方法那样返回值：异步方法会返回一个包含了原返回值的 promise 对象来替代原返回值。</p>\n</blockquote>\n<h3 id=\"Promise的API\"><a href=\"#Promise的API\" class=\"headerlink\" title=\"Promise的API\"></a>Promise的API</h3><h4 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h4><p>使用<code>new</code>来调用<code>Promise</code>的构造器进行实例化</p>\n<pre><code>var promise = new Promise(function(resolve, reject){\n    //异步处理\n    //处理结束后，调用resolve或reject\n});\n</code></pre><h4 id=\"Instance-Method\"><a href=\"#Instance-Method\" class=\"headerlink\" title=\"Instance Method\"></a>Instance Method</h4><p>对通过new生成的promise对象为了设置其在resolve(成功)/reject(失败)时调用的回调函数可以使用<code>promise.then()</code>实例方法</p>\n<pre><code>promise.then(onFulfilled, onRejected);\n//以防误解，上述的即为以下这种形式\npromise.then(function(){...}, function(){...});\n</code></pre><p>当resolve(成功)时，会调用<code>onFulfilled</code>函数；<br>reject(失败)时，会调用<code>onRejected</code>函数。<br>这也对应了前面笔试题中,<code>onFulfilled</code>其实就是<code>console.log(2)</code>，也就是说成功时会调用<code>console.log(2)</code>，而失败时，<code>onRejected</code>就是调用<code>console.log(3)</code>。</p>\n<p>若只想处理异常情况的函数，可<code>promise.then(undefined, onRejected)</code>，当然更好的选择是用<code>promise.catch()</code>来处理。二者效果相同。</p>\n<pre><code>promise.then(function (value) {\n    console.log(value); \n}).catch(function (error) {\n    console.log(error);\n});\n\n//等同于以下形式\npromise.then(function (value) {\n    console.log(value);\n}, function (error) {\n    console.log(error);\n});\n</code></pre><h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li><code>Promise.all()</code></li>\n<li><code>Promise.race()</code></li>\n<li><code>Promise.resolve()</code></li>\n<li><code>Promise.reject()</code></li>\n</ul>\n<h3 id=\"Promise的状态\"><a href=\"#Promise的状态\" class=\"headerlink\" title=\"Promise的状态\"></a>Promise的状态</h3><p>Promise对象有三种状态</p>\n<ul>\n<li>pending 初始状态，既不是fulfilled也不是rejected</li>\n<li>fulfilled 成功。此时调用<code>onFulfilled</code></li>\n<li>rejected 失败。此时调用<code>onRejected</code></li>\n</ul>\n<p>Fulfilled和Rejected都可以表示为<code>Settled</code>。<br>由下图可以了解，最初Promise为<code>pending</code>状态，在执行后转为<code>settled</code>状态，而<code>settled</code>状态分为两种：在成功后转为<code>fulfilled</code>，执行<code>.then(onFulfilled)</code>方法；在失败后转为<code>reject</code>，执行<code>.then(onRejecttion)</code>或<code>.catch(onRejecttion)</code>，进行异步操作，再返回Promise对象，转为<code>pending</code>状态。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0804_1.png\" alt=\"Promise状态图\"></p>\n<h3 id=\"Promise-resolve-amp-Promise-reject\"><a href=\"#Promise-resolve-amp-Promise-reject\" class=\"headerlink\" title=\"Promise.resolve &amp; Promise.reject\"></a><code>Promise.resolve</code> &amp; <code>Promise.reject</code></h3><h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h4><p><code>Promise.resolve(value)</code>可认为是<code>new Promise()</code>方法的快捷方式</p>\n<pre><code>Promise.value(value);\n\n//等同于以下代码\n\nnew Promise(function(resolve){\n    resolve(value);\n});\n</code></pre><p>此时这个promise对象会进入<code>fulfilled</code>状态。而<code>resolve(value)</code>中的<code>value</code>会传递给后面<code>then</code>中指定的<code>onFulfilled</code>函数。</p>\n<p><code>Promise.resolve(value)</code>返回值也是一个promise对象，所以可以进行链式调用.</p>\n<h4 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h4><p><code>Promise.reject(error)</code>与上述静态方法类似，也是<code>new Promise()</code>方法的快捷方式</p>\n<pre><code>Promise.reject(new Error(&quot;出错了&quot;));\n//等同于以下代码\nnew Promise(function(resolve, reject){\n    reject(new Error(&quot;出错了&quot;));\n});\n</code></pre><p>这段代码则是调用该promise对象通过<code>then</code>指定的<code>onRejected</code>函数，并将错误对象(Error)传递给<code>onRejected</code>函数。</p>\n<h3 id=\"笔试题解答\"><a href=\"#笔试题解答\" class=\"headerlink\" title=\"笔试题解答\"></a>笔试题解答</h3><p>话不多说，贴图就是。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image.blog0804_2.png\" alt=\"答案截图\"></p>\n<p>可以知道，当promise调用了<code>reject(true)</code>方法，则传递<code>true</code>这个参数给’then’指定的<code>onRejected</code>函数，即题目中的<code>function(){console.log(3);}</code>。但由于’.then’中指定的方法调用是<strong>异步执行</strong>的，所以会先执行console.log(4);</p>\n<p>本篇文章仅是简单介绍promise。欲了解更多内容，可查看以下资料。谢谢~</p>\n<p>资料来源：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise- Javascipt | MDN</a></li>\n<li><a href=\"http://liubin.org/promises-book/\">JavaScript Promise迷你书（中文版)</a></li>\n</ul>\n"},{"title":"即将入职6个月的碎碎念","date":"2017-12-10T14:28:01.000Z","_content":"\n很浮躁。\n\n知道自己欠缺的很多，但是好像因为都想学习，反而不知从而下手。三心二意，一会想着Angular一会想着Business，一会又想着还是看看基础，看看英语。最后什么都没做。\n\n很快就过试用期了。从7月到12月，时间很快。还是总结一下自己做了什么，学了什么吧。\n\n* 单元测试之数据库schema Auto-migration to H2。虽然功能很简单，但当初确实花了很多精力啊，以及还有很多需要改进的部分，希望之后可以继续完善🙈\n* angularjs 之在Deal页面新增字段post deal follow up，了解项目的整体逻辑。中途还因为BA改需求，删除了好多代码，不过第一次把自己写的代码merge到develop分支，并且release 上线，真的很开心呐☺️\n* 新增字段Financial Advisor，前后端整体实现，从DDL到后台DAO，从Service到Controller，从Angularjs到Select2，了解RFP部分的整体逻辑，并且熟悉发布DDL的流程，部署项目的流程。虽然出现了一个很严重的Easy-to-find bug，也是为我提了一个⚠️：IE兼容性!!!\n* iTicket 之 Angular4 前端实现。虽然大部分都是学姐在做，但是也学了不少东西，还是需要静下心去学习啊啊啊啊啊😥\n\n相比于其他公司，确实轻松很多，但个中滋味也只是自己知道。虽然当时完成FA功能也是连续加班了快两个星期，但还是觉得充实快乐。以及非常感谢老板的知遇之恩和一路上得到的各种肯定和认可。\n\n就像老大1-1说的，英语表达能力还不够，说到底还是自己不够勇敢，畏手畏脚。\n希望接下来能加强呀～\n\n","source":"_posts/work-dairy.md","raw":"---\ntitle: 即将入职6个月的碎碎念\ndate: 2017-12-10 22:28:01\ncategories: 随笔\ntags: [工作日记]\n---\n\n很浮躁。\n\n知道自己欠缺的很多，但是好像因为都想学习，反而不知从而下手。三心二意，一会想着Angular一会想着Business，一会又想着还是看看基础，看看英语。最后什么都没做。\n\n很快就过试用期了。从7月到12月，时间很快。还是总结一下自己做了什么，学了什么吧。\n\n* 单元测试之数据库schema Auto-migration to H2。虽然功能很简单，但当初确实花了很多精力啊，以及还有很多需要改进的部分，希望之后可以继续完善🙈\n* angularjs 之在Deal页面新增字段post deal follow up，了解项目的整体逻辑。中途还因为BA改需求，删除了好多代码，不过第一次把自己写的代码merge到develop分支，并且release 上线，真的很开心呐☺️\n* 新增字段Financial Advisor，前后端整体实现，从DDL到后台DAO，从Service到Controller，从Angularjs到Select2，了解RFP部分的整体逻辑，并且熟悉发布DDL的流程，部署项目的流程。虽然出现了一个很严重的Easy-to-find bug，也是为我提了一个⚠️：IE兼容性!!!\n* iTicket 之 Angular4 前端实现。虽然大部分都是学姐在做，但是也学了不少东西，还是需要静下心去学习啊啊啊啊啊😥\n\n相比于其他公司，确实轻松很多，但个中滋味也只是自己知道。虽然当时完成FA功能也是连续加班了快两个星期，但还是觉得充实快乐。以及非常感谢老板的知遇之恩和一路上得到的各种肯定和认可。\n\n就像老大1-1说的，英语表达能力还不够，说到底还是自己不够勇敢，畏手畏脚。\n希望接下来能加强呀～\n\n","slug":"work-dairy","published":1,"updated":"2017-12-10T14:29:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjv000vy3qw11qzxi6u","content":"<p>很浮躁。</p>\n<p>知道自己欠缺的很多，但是好像因为都想学习，反而不知从而下手。三心二意，一会想着Angular一会想着Business，一会又想着还是看看基础，看看英语。最后什么都没做。</p>\n<p>很快就过试用期了。从7月到12月，时间很快。还是总结一下自己做了什么，学了什么吧。</p>\n<ul>\n<li>单元测试之数据库schema Auto-migration to H2。虽然功能很简单，但当初确实花了很多精力啊，以及还有很多需要改进的部分，希望之后可以继续完善🙈</li>\n<li>angularjs 之在Deal页面新增字段post deal follow up，了解项目的整体逻辑。中途还因为BA改需求，删除了好多代码，不过第一次把自己写的代码merge到develop分支，并且release 上线，真的很开心呐☺️</li>\n<li>新增字段Financial Advisor，前后端整体实现，从DDL到后台DAO，从Service到Controller，从Angularjs到Select2，了解RFP部分的整体逻辑，并且熟悉发布DDL的流程，部署项目的流程。虽然出现了一个很严重的Easy-to-find bug，也是为我提了一个⚠️：IE兼容性!!!</li>\n<li>iTicket 之 Angular4 前端实现。虽然大部分都是学姐在做，但是也学了不少东西，还是需要静下心去学习啊啊啊啊啊😥</li>\n</ul>\n<p>相比于其他公司，确实轻松很多，但个中滋味也只是自己知道。虽然当时完成FA功能也是连续加班了快两个星期，但还是觉得充实快乐。以及非常感谢老板的知遇之恩和一路上得到的各种肯定和认可。</p>\n<p>就像老大1-1说的，英语表达能力还不够，说到底还是自己不够勇敢，畏手畏脚。<br>希望接下来能加强呀～</p>\n","excerpt":"","more":"<p>很浮躁。</p>\n<p>知道自己欠缺的很多，但是好像因为都想学习，反而不知从而下手。三心二意，一会想着Angular一会想着Business，一会又想着还是看看基础，看看英语。最后什么都没做。</p>\n<p>很快就过试用期了。从7月到12月，时间很快。还是总结一下自己做了什么，学了什么吧。</p>\n<ul>\n<li>单元测试之数据库schema Auto-migration to H2。虽然功能很简单，但当初确实花了很多精力啊，以及还有很多需要改进的部分，希望之后可以继续完善🙈</li>\n<li>angularjs 之在Deal页面新增字段post deal follow up，了解项目的整体逻辑。中途还因为BA改需求，删除了好多代码，不过第一次把自己写的代码merge到develop分支，并且release 上线，真的很开心呐☺️</li>\n<li>新增字段Financial Advisor，前后端整体实现，从DDL到后台DAO，从Service到Controller，从Angularjs到Select2，了解RFP部分的整体逻辑，并且熟悉发布DDL的流程，部署项目的流程。虽然出现了一个很严重的Easy-to-find bug，也是为我提了一个⚠️：IE兼容性!!!</li>\n<li>iTicket 之 Angular4 前端实现。虽然大部分都是学姐在做，但是也学了不少东西，还是需要静下心去学习啊啊啊啊啊😥</li>\n</ul>\n<p>相比于其他公司，确实轻松很多，但个中滋味也只是自己知道。虽然当时完成FA功能也是连续加班了快两个星期，但还是觉得充实快乐。以及非常感谢老板的知遇之恩和一路上得到的各种肯定和认可。</p>\n<p>就像老大1-1说的，英语表达能力还不够，说到底还是自己不够勇敢，畏手畏脚。<br>希望接下来能加强呀～</p>\n"},{"title":"summernote编辑器插件使用笔记","date":"2016-08-10T13:13:01.000Z","_content":"这次项目中需要用到编辑器插件，于是上网查了一下。由于需要的编辑器功能比较简单，不需要太多复杂功能，所以选择了一款特别轻量的summernote插件，而且后台操作也很简单。\n官网：http://summernote.org/\ngithub地址：https://github.com/summernote/summernote\n\n先来看一下官网的截图\n\n![官网截图](http://oao50r2ex.bkt.clouddn.com/image/blog0810_1.png)\n\n麻雀虽小五脏俱全。完全可以满足编辑器的需要。\n\n按照官网链接下载下来的是\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_5.png)\n\n我们需要使用的是在dist文件夹内\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_2.png)\n\n其中font主要是编辑器内的图标显示，lang是各种语言，css则是样式。我们主要来看一下summernote.js。\n## summernote.js\n### 定义\n\n     $.fn.extend({\n        summernote: function () {\n          var type = $.type(list.head(arguments));\n          var isExternalAPICalled = type === 'string';\n          var hasInitOptions = type === 'object';\n\n          var options = hasInitOptions ? list.head(arguments) : {};\n\n          options = $.extend({}, $.summernote.options, options);\n          options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);\n\n          this.each(function (idx, note) {\n            var $note = $(note);\n            if (!$note.data('summernote')) {\n              var context = new Context($note, options);\n              $note.data('summernote', context);\n              $note.data('summernote').triggerEvent('init', context.layoutInfo);\n            }\n          });\n\n          var $note = this.first();\n          if ($note.length) {\n            var context = $note.data('summernote');\n            if (isExternalAPICalled) {\n              return context.invoke.apply(context, list.from(arguments));\n            } else if (options.focus) {\n              context.invoke('editor.focus');\n            }\n          }\n    \n          return this;\n        }\n      });\n  \n这就是初始化summernote时执行的函数。\n\n    $.extend(object) 可以理解为JQuery 添加一个静态方法。\n    $.fn.extend(object) 可以理解为JQuery实例添加一个方法。\n\n默认的options如下\n\n    options: {\n      modules: {\n        'editor': Editor,\n        'clipboard': Clipboard,\n        'dropzone': Dropzone,\n        'codeview': Codeview,\n        'statusbar': Statusbar,\n        'fullscreen': Fullscreen,\n        'handle': Handle,\n        // FIXME: HintPopover must be front of autolink\n        //  - Script error about range when Enter key is pressed on hint popover\n        'hintPopover': HintPopover,\n        'autoLink': AutoLink,\n        'autoSync': AutoSync,\n        'placeholder': Placeholder,\n        'buttons': Buttons,\n        'toolbar': Toolbar,\n        'linkDialog': LinkDialog,\n        'linkPopover': LinkPopover,\n        'imageDialog': ImageDialog,\n        'imagePopover': ImagePopover,\n        'videoDialog': VideoDialog,\n        'helpDialog': HelpDialog,\n        'airPopover': AirPopover\n      },\n\n      buttons: {},\n      \n      lang: 'zh-CN',\n\n      // toolbar工具栏默认\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'picture', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']]\n      ],\n\n      // popover\n      popover: {\n        image: [\n          ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],\n          ['float', ['floatLeft', 'floatRight', 'floatNone']],\n          ['remove', ['removeMedia']]\n        ],\n        link: [\n          ['link', ['linkDialogShow', 'unlink']]\n        ],\n        air: [\n          ['color', ['color']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['para', ['ul', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'picture']]\n        ]\n      },\n\n      // air mode: inline editor\n      airMode: false,\n\n      width: null,\n      height: null,\n\n      focus: false,\n      tabSize: 4,\n      styleWithSpan: false,\n      shortcuts: true,\n      textareaAutoSync: true,\n      direction: null,\n\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n      fontNames: [\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\n        'Tahoma', 'Times New Roman', 'Verdana'\n      ],\n\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n\n      // pallete colors(n x n)\n      colors: [\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n      ],\n\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\n\n      tableClassName: 'table table-bordered',\n\n      insertTableMaxSize: {\n        col: 10,\n        row: 10\n      },\n\n      dialogsInBody: false,\n      dialogsFade: false,\n\n      maximumImageFileSize: null,\n\n      callbacks: {\n        onInit: null,//初始化回调函数\n        onFocus: null,//聚集\n        onBlur: null,//失去焦点\n        onEnter: null,//回车键的回调函数\n        onKeyup: null,\n        onKeydown: null,\n        onSubmit: null,//提交时回调函数\n        onImageUpload: null,//这就是上传图片的回调函数\n        onImageUploadError: null//上传图片出错\n      },\n\n      codemirror: {\n        mode: 'text/html',\n        htmlMode: true,\n        lineNumbers: true\n      },\n\n      keyMap: {\n        pc: {\n          'ENTER': 'insertParagraph',\n          'CTRL+Z': 'undo',\n          'CTRL+Y': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CTRL+B': 'bold',\n          'CTRL+I': 'italic',\n          'CTRL+U': 'underline',\n          'CTRL+SHIFT+S': 'strikethrough',\n          'CTRL+BACKSLASH': 'removeFormat',\n          'CTRL+SHIFT+L': 'justifyLeft',\n          'CTRL+SHIFT+E': 'justifyCenter',\n          'CTRL+SHIFT+R': 'justifyRight',\n          'CTRL+SHIFT+J': 'justifyFull',\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',\n          'CTRL+LEFTBRACKET': 'outdent',\n          'CTRL+RIGHTBRACKET': 'indent',\n          'CTRL+NUM0': 'formatPara',\n          'CTRL+NUM1': 'formatH1',\n          'CTRL+NUM2': 'formatH2',\n          'CTRL+NUM3': 'formatH3',\n          'CTRL+NUM4': 'formatH4',\n          'CTRL+NUM5': 'formatH5',\n          'CTRL+NUM6': 'formatH6',\n          'CTRL+ENTER': 'insertHorizontalRule',\n          'CTRL+K': 'linkDialog.show'\n        },\n\n        mac: {\n          'ENTER': 'insertParagraph',\n          'CMD+Z': 'undo',\n          'CMD+SHIFT+Z': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CMD+B': 'bold',\n          'CMD+I': 'italic',\n          'CMD+U': 'underline',\n          'CMD+SHIFT+S': 'strikethrough',\n          'CMD+BACKSLASH': 'removeFormat',\n          'CMD+SHIFT+L': 'justifyLeft',\n          'CMD+SHIFT+E': 'justifyCenter',\n          'CMD+SHIFT+R': 'justifyRight',\n          'CMD+SHIFT+J': 'justifyFull',\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',\n          'CMD+SHIFT+NUM8': 'insertOrderedList',\n          'CMD+LEFTBRACKET': 'outdent',\n          'CMD+RIGHTBRACKET': 'indent',\n          'CMD+NUM0': 'formatPara',\n          'CMD+NUM1': 'formatH1',\n          'CMD+NUM2': 'formatH2',\n          'CMD+NUM3': 'formatH3',\n          'CMD+NUM4': 'formatH4',\n          'CMD+NUM5': 'formatH5',\n          'CMD+NUM6': 'formatH6',\n          'CMD+ENTER': 'insertHorizontalRule',\n          'CMD+K': 'linkDialog.show'\n        }\n      },\n      icons: {\n        'align': 'icon-align',\n        'alignCenter': 'icon-align-center',\n        'alignJustify': 'icon-align-justify',\n        'alignLeft': 'icon-align-left',\n        'alignRight': 'icon-align-right',\n        'indent': 'icon-indent-right',\n        'outdent': 'icon-indent-left',\n        'arrowsAlt': 'icon-resize-full',\n        'bold': 'icon-bold',\n        'caret': 'icon-caret-down',\n        'circle': 'icon-circle',\n        'close': 'icon-close',\n        'code': 'icon-code',\n        'eraser': 'icon-eraser',\n        'font': 'icon-font',\n        'frame': 'icon-frame',\n        'italic': 'icon-italic',\n        'link': 'icon-link',\n        'unlink': 'icon-chain-broken',\n        'magic': 'icon-magic',\n        'menuCheck': 'icon-check',\n        'minus': 'icon-minus',\n        'orderedlist': 'icon-list-ol',\n        'pencil': 'icon-pencil',\n        'picture': 'icon-picture',\n        'question': 'icon-question',\n        'redo': 'icon-redo',\n        'square': 'icon-square',\n        'strikethrough': 'icon-strikethrough',\n        'subscript': 'icon-subscript',\n        'superscript': 'icon-superscript',\n        'table': 'icon-table',\n        'textHeight': 'icon-text-height',\n        'trash': 'icon-trash',\n        'underline': 'icon-underline',\n        'undo': 'icon-undo',\n        'unorderedlist': 'icon-list-ul',\n        'video': 'icon-facetime-video'\n      }\n    }\n关于编辑器需要的工具栏toolbar具体属性可查看官网[summernote-toolbar属性][1]\n### **更改工具栏图标**\n由于项目中我是直接使用fontawesome，所以我没有再引入summernote.font，直接在options中的icons中修改。但比较麻烦，不知道有什么更好的方法，求指导。\n\n关于图片上传、提交、按键等回调函数也是在options中，详见[callbacks部分][2]。\n\n初始化一个编辑器很简单。只需要定义\n    <div class=\"summernote\" id=\"myid\"></div>\n    \n     $(function () {\n        $('.summernote').summernote();\n        //或者\n        $('#myid').summernote();\n    });\n\n### **设置placeholder:**\n    $('.summernote').summernote({\n            placeholder:'请输入文章内容',\n            ...\n        });\n\n### **设置toolbar**\n    $('.summernote').summernote({\n            toolbar:[\n                ['style',['bold','italic','underline','clear']],\n                ['fontsize',['fontsize']],\n                ['para',['ul','ol','paragraph']],\n                ['color',['color']]\n            ],\n            ...\n\n        });\n\n\n### **更改图片上传的方式**：\n需要提及的是，summernote默认的图片上传方式为base64方式。若需要修改，看以下代码。\n【一定要注意：onImageUpload方法修改时要放在callbacks内配置，否则没用】\n\n    $('#myid').summernote({\n        callbacks:{\n            onImageUpload: function(files, editor, $editable) {\n                UploadFiles(files,insertImg);\n            }\n        },\n        ...\n    });\n    \n    function insertImg(){\n        for(i in imageUrl){\n            $('.summernote').summernote('editor.insertImage',imageUrl[i]);\n        }\n    }\n    \n    \n    function UploadFiles(files,func){\n    //这里files是因为我设置了可上传多张图片，所以需要依次添加到formData中\n        var formData = new FormData();\n        for(f in files){\n            formData.append(\"file\", files[f]);\n        }\n\n        $.ajax({\n            data: formData,\n            type: \"POST\",\n            url: \"/uploadMultipleFile\",\n            cache: false,\n            contentType: false,\n            processData: false,\n            success: function(imageUrl) {\n                func(imageUrl);\n         \n            },\n            error: function() {\n                console.log(\"uploadError\");\n            }\n        })\n    }\n    \n我们项目的后台是用spring+springMVC实现的。后台图片上传代码如下:\n\n    @RequestMapping(value = \"/uploadMultipleFile\", method = RequestMethod.POST, produces = \"application/json;charset=utf8\")\n    @ResponseBody\n    public String uploadMultipleFileHandler(@RequestParam(\"file\") MultipartFile[] files, HttpServletRequest request) throws IOException {\n        return     UploadUtil.uploadImage(request.getServletContext().getRealPath(\"/\"), files);\n    }\n    \n    \n    //UploadUtil.java中uploadImage方法如下\n     public static String uploadImage(String serverPath, MultipartFile[] files) {\n        try {\n            String uploadPath = serverPath + getImageRelativePath();\n            String images = \"{}\";\n            //如果不存在目录,创建一个目录\n            isDirectory(uploadPath);\n            if (files != null && files.length > 0) {\n                for (int i = 0; i < files.length; i++) {\n                    MultipartFile file = files[i];\n                    //save file\n                    if (!file.isEmpty()) {\n                        String savePath = getImageRelativePath() + file.getOriginalFilename();//数据库保存的图片路径\n                        images = JSONUtil.addProperty(images, String.valueOf(i), savePath);\n                        save(file, uploadPath);\n                    }\n                }\n            }\n            return images;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"{}\";\n        }\n    }\n    \n### **设置编辑器中的值：**\n    $('#myid').summernote('code',content);\n\n需要注意的是，content是html代码，可能存在**引号嵌套**的问题导致报错，记得将引号进行转义。  \n后台处理-java代码：\n\n    content = content.replaceAll(\"'\",\"\\\\\\\\'\");\n    content = content.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n\n\n### **获取编辑器中的值：**\n    var content = $('.summernote').summernote('code');\n### **上传附件** \n这次项目需要使用附件，但发现summernote貌似没有附件功能，于是自己研究了一下代码，根据项目的需求，在`link`链接部分进行了修改。\n效果如下：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_3.png)\n   \n首先，我们先看`link`按钮所绑定的事件。\n\n    context.memo('button.link', function () {\n            return ui.button({\n              contents: ui.icon(options.icons.link),\n              tooltip: lang.link.link,\n              click: context.createInvokeHandler('linkDialog.show')\n            }).render();\n          });\n\n由上面的代码可以发现`click`事件为：`linkDialog.show`，那么我们再来看一下`linkDialog`。\n\n    var LinkDialog = function (context) {\n        ...\n        this.initialize = function () {//初始化\n            ...\n            var body = '<div class=\"form-group\">' +\n                   '<label>' + lang.link.textToDisplay + '</label>' +\n                   '<input class=\"note-link-text form-control\" type=\"text\" />' +\n                 '</div>' +\n                  '<div class=\"form-group\">' +\n                  '<label>' + lang.link.attachment + '</label>' +\n                  '<input class=\"note-link-attachment form-control\" type=\"file\" />' +\n                  '</div>' +\n                 '<div class=\"form-group\">' +\n                   '<label>' + lang.link.url + '</label>' +\n                   '<input class=\"note-link-url form-control\" type=\"text\" value=\"http://\" />' +\n                 '</div>' +\n                 (!options.disableLinkTarget ?\n                   '<div class=\"checkbox\">' +\n                     '<label>' + '<input type=\"checkbox\" checked> ' + lang.link.openInNewWindow + '</label>' +\n                   '</div>' : ''\n                 );\n            var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n          \n        }\n    }\n\n    \n可以看到，点击链接按钮出现的弹框样式就在`LinkDialog`的`initialize`方法中的`body`，所以我在中间添加了一个`input`上传附件的部分。\n\n    '<div class=\"form-group\">' +\n    '<label>' + lang.link.attachment + '</label>' +\n    '<input class=\"note-link-attachment form-control\" type=\"file\" />' +\n    '</div>' +\n\n那么，我们需要在`lang.link`属性中，新增一个`attachment`附件属性。\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_4.png)\n\n\n除此之外，在中文的转换部分summernote-zh-CN.min.js中，添加`link`的`attachment: '添加附件'`\n\n好了，那么我们接下来需要处理的问题是上传文件后的处理。\n\n    this.showLinkDialog = function (linkInfo) {\n        return $.Deferred(function (deferred) {\n            ...\n            //上传文件的输入框\n            $linkAttachment = self.$dialog.find('.note-link-attachment'),\n            \n            ui.onDialogShown(self.$dialog, function () {\n                ...\n                //对于输入框的事件绑定\n                $linkAttachment.on('change', function() {\n                    UploadFiles($linkAttachment.val(),function(url){\n                        $linkUrl.val(url);//将上传后的URL赋值到linkUrl的输入框中\n                    });\n                });\n            }\n        }\n    }\n\nUploadFiles与上述修改上传图片的形式一样。   \n\n\n如果这篇文章对您有帮助，欢迎点赞。如果有疏漏，欢迎指正。\n\n  [1]: http://summernote.org/deep-dive/#custom-toolbar-popover\n  [2]: http://summernote.org/deep-dive/#callbacks","source":"_posts/summernote-notes.md","raw":"---\ntitle: summernote编辑器插件使用笔记\ndate: 2016-08-10 21:13:01\ncategories: 前端开发\ntags: [javascript, jQuery, jQuery插件,summernote]\n---\n这次项目中需要用到编辑器插件，于是上网查了一下。由于需要的编辑器功能比较简单，不需要太多复杂功能，所以选择了一款特别轻量的summernote插件，而且后台操作也很简单。\n官网：http://summernote.org/\ngithub地址：https://github.com/summernote/summernote\n\n先来看一下官网的截图\n\n![官网截图](http://oao50r2ex.bkt.clouddn.com/image/blog0810_1.png)\n\n麻雀虽小五脏俱全。完全可以满足编辑器的需要。\n\n按照官网链接下载下来的是\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_5.png)\n\n我们需要使用的是在dist文件夹内\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_2.png)\n\n其中font主要是编辑器内的图标显示，lang是各种语言，css则是样式。我们主要来看一下summernote.js。\n## summernote.js\n### 定义\n\n     $.fn.extend({\n        summernote: function () {\n          var type = $.type(list.head(arguments));\n          var isExternalAPICalled = type === 'string';\n          var hasInitOptions = type === 'object';\n\n          var options = hasInitOptions ? list.head(arguments) : {};\n\n          options = $.extend({}, $.summernote.options, options);\n          options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);\n\n          this.each(function (idx, note) {\n            var $note = $(note);\n            if (!$note.data('summernote')) {\n              var context = new Context($note, options);\n              $note.data('summernote', context);\n              $note.data('summernote').triggerEvent('init', context.layoutInfo);\n            }\n          });\n\n          var $note = this.first();\n          if ($note.length) {\n            var context = $note.data('summernote');\n            if (isExternalAPICalled) {\n              return context.invoke.apply(context, list.from(arguments));\n            } else if (options.focus) {\n              context.invoke('editor.focus');\n            }\n          }\n    \n          return this;\n        }\n      });\n  \n这就是初始化summernote时执行的函数。\n\n    $.extend(object) 可以理解为JQuery 添加一个静态方法。\n    $.fn.extend(object) 可以理解为JQuery实例添加一个方法。\n\n默认的options如下\n\n    options: {\n      modules: {\n        'editor': Editor,\n        'clipboard': Clipboard,\n        'dropzone': Dropzone,\n        'codeview': Codeview,\n        'statusbar': Statusbar,\n        'fullscreen': Fullscreen,\n        'handle': Handle,\n        // FIXME: HintPopover must be front of autolink\n        //  - Script error about range when Enter key is pressed on hint popover\n        'hintPopover': HintPopover,\n        'autoLink': AutoLink,\n        'autoSync': AutoSync,\n        'placeholder': Placeholder,\n        'buttons': Buttons,\n        'toolbar': Toolbar,\n        'linkDialog': LinkDialog,\n        'linkPopover': LinkPopover,\n        'imageDialog': ImageDialog,\n        'imagePopover': ImagePopover,\n        'videoDialog': VideoDialog,\n        'helpDialog': HelpDialog,\n        'airPopover': AirPopover\n      },\n\n      buttons: {},\n      \n      lang: 'zh-CN',\n\n      // toolbar工具栏默认\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'picture', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']]\n      ],\n\n      // popover\n      popover: {\n        image: [\n          ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],\n          ['float', ['floatLeft', 'floatRight', 'floatNone']],\n          ['remove', ['removeMedia']]\n        ],\n        link: [\n          ['link', ['linkDialogShow', 'unlink']]\n        ],\n        air: [\n          ['color', ['color']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['para', ['ul', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'picture']]\n        ]\n      },\n\n      // air mode: inline editor\n      airMode: false,\n\n      width: null,\n      height: null,\n\n      focus: false,\n      tabSize: 4,\n      styleWithSpan: false,\n      shortcuts: true,\n      textareaAutoSync: true,\n      direction: null,\n\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n      fontNames: [\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\n        'Tahoma', 'Times New Roman', 'Verdana'\n      ],\n\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n\n      // pallete colors(n x n)\n      colors: [\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n      ],\n\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\n\n      tableClassName: 'table table-bordered',\n\n      insertTableMaxSize: {\n        col: 10,\n        row: 10\n      },\n\n      dialogsInBody: false,\n      dialogsFade: false,\n\n      maximumImageFileSize: null,\n\n      callbacks: {\n        onInit: null,//初始化回调函数\n        onFocus: null,//聚集\n        onBlur: null,//失去焦点\n        onEnter: null,//回车键的回调函数\n        onKeyup: null,\n        onKeydown: null,\n        onSubmit: null,//提交时回调函数\n        onImageUpload: null,//这就是上传图片的回调函数\n        onImageUploadError: null//上传图片出错\n      },\n\n      codemirror: {\n        mode: 'text/html',\n        htmlMode: true,\n        lineNumbers: true\n      },\n\n      keyMap: {\n        pc: {\n          'ENTER': 'insertParagraph',\n          'CTRL+Z': 'undo',\n          'CTRL+Y': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CTRL+B': 'bold',\n          'CTRL+I': 'italic',\n          'CTRL+U': 'underline',\n          'CTRL+SHIFT+S': 'strikethrough',\n          'CTRL+BACKSLASH': 'removeFormat',\n          'CTRL+SHIFT+L': 'justifyLeft',\n          'CTRL+SHIFT+E': 'justifyCenter',\n          'CTRL+SHIFT+R': 'justifyRight',\n          'CTRL+SHIFT+J': 'justifyFull',\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',\n          'CTRL+LEFTBRACKET': 'outdent',\n          'CTRL+RIGHTBRACKET': 'indent',\n          'CTRL+NUM0': 'formatPara',\n          'CTRL+NUM1': 'formatH1',\n          'CTRL+NUM2': 'formatH2',\n          'CTRL+NUM3': 'formatH3',\n          'CTRL+NUM4': 'formatH4',\n          'CTRL+NUM5': 'formatH5',\n          'CTRL+NUM6': 'formatH6',\n          'CTRL+ENTER': 'insertHorizontalRule',\n          'CTRL+K': 'linkDialog.show'\n        },\n\n        mac: {\n          'ENTER': 'insertParagraph',\n          'CMD+Z': 'undo',\n          'CMD+SHIFT+Z': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CMD+B': 'bold',\n          'CMD+I': 'italic',\n          'CMD+U': 'underline',\n          'CMD+SHIFT+S': 'strikethrough',\n          'CMD+BACKSLASH': 'removeFormat',\n          'CMD+SHIFT+L': 'justifyLeft',\n          'CMD+SHIFT+E': 'justifyCenter',\n          'CMD+SHIFT+R': 'justifyRight',\n          'CMD+SHIFT+J': 'justifyFull',\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',\n          'CMD+SHIFT+NUM8': 'insertOrderedList',\n          'CMD+LEFTBRACKET': 'outdent',\n          'CMD+RIGHTBRACKET': 'indent',\n          'CMD+NUM0': 'formatPara',\n          'CMD+NUM1': 'formatH1',\n          'CMD+NUM2': 'formatH2',\n          'CMD+NUM3': 'formatH3',\n          'CMD+NUM4': 'formatH4',\n          'CMD+NUM5': 'formatH5',\n          'CMD+NUM6': 'formatH6',\n          'CMD+ENTER': 'insertHorizontalRule',\n          'CMD+K': 'linkDialog.show'\n        }\n      },\n      icons: {\n        'align': 'icon-align',\n        'alignCenter': 'icon-align-center',\n        'alignJustify': 'icon-align-justify',\n        'alignLeft': 'icon-align-left',\n        'alignRight': 'icon-align-right',\n        'indent': 'icon-indent-right',\n        'outdent': 'icon-indent-left',\n        'arrowsAlt': 'icon-resize-full',\n        'bold': 'icon-bold',\n        'caret': 'icon-caret-down',\n        'circle': 'icon-circle',\n        'close': 'icon-close',\n        'code': 'icon-code',\n        'eraser': 'icon-eraser',\n        'font': 'icon-font',\n        'frame': 'icon-frame',\n        'italic': 'icon-italic',\n        'link': 'icon-link',\n        'unlink': 'icon-chain-broken',\n        'magic': 'icon-magic',\n        'menuCheck': 'icon-check',\n        'minus': 'icon-minus',\n        'orderedlist': 'icon-list-ol',\n        'pencil': 'icon-pencil',\n        'picture': 'icon-picture',\n        'question': 'icon-question',\n        'redo': 'icon-redo',\n        'square': 'icon-square',\n        'strikethrough': 'icon-strikethrough',\n        'subscript': 'icon-subscript',\n        'superscript': 'icon-superscript',\n        'table': 'icon-table',\n        'textHeight': 'icon-text-height',\n        'trash': 'icon-trash',\n        'underline': 'icon-underline',\n        'undo': 'icon-undo',\n        'unorderedlist': 'icon-list-ul',\n        'video': 'icon-facetime-video'\n      }\n    }\n关于编辑器需要的工具栏toolbar具体属性可查看官网[summernote-toolbar属性][1]\n### **更改工具栏图标**\n由于项目中我是直接使用fontawesome，所以我没有再引入summernote.font，直接在options中的icons中修改。但比较麻烦，不知道有什么更好的方法，求指导。\n\n关于图片上传、提交、按键等回调函数也是在options中，详见[callbacks部分][2]。\n\n初始化一个编辑器很简单。只需要定义\n    <div class=\"summernote\" id=\"myid\"></div>\n    \n     $(function () {\n        $('.summernote').summernote();\n        //或者\n        $('#myid').summernote();\n    });\n\n### **设置placeholder:**\n    $('.summernote').summernote({\n            placeholder:'请输入文章内容',\n            ...\n        });\n\n### **设置toolbar**\n    $('.summernote').summernote({\n            toolbar:[\n                ['style',['bold','italic','underline','clear']],\n                ['fontsize',['fontsize']],\n                ['para',['ul','ol','paragraph']],\n                ['color',['color']]\n            ],\n            ...\n\n        });\n\n\n### **更改图片上传的方式**：\n需要提及的是，summernote默认的图片上传方式为base64方式。若需要修改，看以下代码。\n【一定要注意：onImageUpload方法修改时要放在callbacks内配置，否则没用】\n\n    $('#myid').summernote({\n        callbacks:{\n            onImageUpload: function(files, editor, $editable) {\n                UploadFiles(files,insertImg);\n            }\n        },\n        ...\n    });\n    \n    function insertImg(){\n        for(i in imageUrl){\n            $('.summernote').summernote('editor.insertImage',imageUrl[i]);\n        }\n    }\n    \n    \n    function UploadFiles(files,func){\n    //这里files是因为我设置了可上传多张图片，所以需要依次添加到formData中\n        var formData = new FormData();\n        for(f in files){\n            formData.append(\"file\", files[f]);\n        }\n\n        $.ajax({\n            data: formData,\n            type: \"POST\",\n            url: \"/uploadMultipleFile\",\n            cache: false,\n            contentType: false,\n            processData: false,\n            success: function(imageUrl) {\n                func(imageUrl);\n         \n            },\n            error: function() {\n                console.log(\"uploadError\");\n            }\n        })\n    }\n    \n我们项目的后台是用spring+springMVC实现的。后台图片上传代码如下:\n\n    @RequestMapping(value = \"/uploadMultipleFile\", method = RequestMethod.POST, produces = \"application/json;charset=utf8\")\n    @ResponseBody\n    public String uploadMultipleFileHandler(@RequestParam(\"file\") MultipartFile[] files, HttpServletRequest request) throws IOException {\n        return     UploadUtil.uploadImage(request.getServletContext().getRealPath(\"/\"), files);\n    }\n    \n    \n    //UploadUtil.java中uploadImage方法如下\n     public static String uploadImage(String serverPath, MultipartFile[] files) {\n        try {\n            String uploadPath = serverPath + getImageRelativePath();\n            String images = \"{}\";\n            //如果不存在目录,创建一个目录\n            isDirectory(uploadPath);\n            if (files != null && files.length > 0) {\n                for (int i = 0; i < files.length; i++) {\n                    MultipartFile file = files[i];\n                    //save file\n                    if (!file.isEmpty()) {\n                        String savePath = getImageRelativePath() + file.getOriginalFilename();//数据库保存的图片路径\n                        images = JSONUtil.addProperty(images, String.valueOf(i), savePath);\n                        save(file, uploadPath);\n                    }\n                }\n            }\n            return images;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"{}\";\n        }\n    }\n    \n### **设置编辑器中的值：**\n    $('#myid').summernote('code',content);\n\n需要注意的是，content是html代码，可能存在**引号嵌套**的问题导致报错，记得将引号进行转义。  \n后台处理-java代码：\n\n    content = content.replaceAll(\"'\",\"\\\\\\\\'\");\n    content = content.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n\n\n### **获取编辑器中的值：**\n    var content = $('.summernote').summernote('code');\n### **上传附件** \n这次项目需要使用附件，但发现summernote貌似没有附件功能，于是自己研究了一下代码，根据项目的需求，在`link`链接部分进行了修改。\n效果如下：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_3.png)\n   \n首先，我们先看`link`按钮所绑定的事件。\n\n    context.memo('button.link', function () {\n            return ui.button({\n              contents: ui.icon(options.icons.link),\n              tooltip: lang.link.link,\n              click: context.createInvokeHandler('linkDialog.show')\n            }).render();\n          });\n\n由上面的代码可以发现`click`事件为：`linkDialog.show`，那么我们再来看一下`linkDialog`。\n\n    var LinkDialog = function (context) {\n        ...\n        this.initialize = function () {//初始化\n            ...\n            var body = '<div class=\"form-group\">' +\n                   '<label>' + lang.link.textToDisplay + '</label>' +\n                   '<input class=\"note-link-text form-control\" type=\"text\" />' +\n                 '</div>' +\n                  '<div class=\"form-group\">' +\n                  '<label>' + lang.link.attachment + '</label>' +\n                  '<input class=\"note-link-attachment form-control\" type=\"file\" />' +\n                  '</div>' +\n                 '<div class=\"form-group\">' +\n                   '<label>' + lang.link.url + '</label>' +\n                   '<input class=\"note-link-url form-control\" type=\"text\" value=\"http://\" />' +\n                 '</div>' +\n                 (!options.disableLinkTarget ?\n                   '<div class=\"checkbox\">' +\n                     '<label>' + '<input type=\"checkbox\" checked> ' + lang.link.openInNewWindow + '</label>' +\n                   '</div>' : ''\n                 );\n            var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n          \n        }\n    }\n\n    \n可以看到，点击链接按钮出现的弹框样式就在`LinkDialog`的`initialize`方法中的`body`，所以我在中间添加了一个`input`上传附件的部分。\n\n    '<div class=\"form-group\">' +\n    '<label>' + lang.link.attachment + '</label>' +\n    '<input class=\"note-link-attachment form-control\" type=\"file\" />' +\n    '</div>' +\n\n那么，我们需要在`lang.link`属性中，新增一个`attachment`附件属性。\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0810_4.png)\n\n\n除此之外，在中文的转换部分summernote-zh-CN.min.js中，添加`link`的`attachment: '添加附件'`\n\n好了，那么我们接下来需要处理的问题是上传文件后的处理。\n\n    this.showLinkDialog = function (linkInfo) {\n        return $.Deferred(function (deferred) {\n            ...\n            //上传文件的输入框\n            $linkAttachment = self.$dialog.find('.note-link-attachment'),\n            \n            ui.onDialogShown(self.$dialog, function () {\n                ...\n                //对于输入框的事件绑定\n                $linkAttachment.on('change', function() {\n                    UploadFiles($linkAttachment.val(),function(url){\n                        $linkUrl.val(url);//将上传后的URL赋值到linkUrl的输入框中\n                    });\n                });\n            }\n        }\n    }\n\nUploadFiles与上述修改上传图片的形式一样。   \n\n\n如果这篇文章对您有帮助，欢迎点赞。如果有疏漏，欢迎指正。\n\n  [1]: http://summernote.org/deep-dive/#custom-toolbar-popover\n  [2]: http://summernote.org/deep-dive/#callbacks","slug":"summernote-notes","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kjx000xy3qwm0fqqy38","content":"<p>这次项目中需要用到编辑器插件，于是上网查了一下。由于需要的编辑器功能比较简单，不需要太多复杂功能，所以选择了一款特别轻量的summernote插件，而且后台操作也很简单。<br>官网：<a href=\"http://summernote.org/\" target=\"_blank\" rel=\"external\">http://summernote.org/</a><br>github地址：<a href=\"https://github.com/summernote/summernote\" target=\"_blank\" rel=\"external\">https://github.com/summernote/summernote</a></p>\n<p>先来看一下官网的截图</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_1.png\" alt=\"官网截图\"></p>\n<p>麻雀虽小五脏俱全。完全可以满足编辑器的需要。</p>\n<p>按照官网链接下载下来的是</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_5.png\" alt=\"clipboard.png\"></p>\n<p>我们需要使用的是在dist文件夹内</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_2.png\" alt=\"clipboard.png\"></p>\n<p>其中font主要是编辑器内的图标显示，lang是各种语言，css则是样式。我们主要来看一下summernote.js。</p>\n<h2 id=\"summernote-js\"><a href=\"#summernote-js\" class=\"headerlink\" title=\"summernote.js\"></a>summernote.js</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre><code>$.fn.extend({\n   summernote: function () {\n     var type = $.type(list.head(arguments));\n     var isExternalAPICalled = type === &apos;string&apos;;\n     var hasInitOptions = type === &apos;object&apos;;\n\n     var options = hasInitOptions ? list.head(arguments) : {};\n\n     options = $.extend({}, $.summernote.options, options);\n     options.langInfo = $.extend(true, {}, $.summernote.lang[&apos;en-US&apos;], $.summernote.lang[options.lang]);\n\n     this.each(function (idx, note) {\n       var $note = $(note);\n       if (!$note.data(&apos;summernote&apos;)) {\n         var context = new Context($note, options);\n         $note.data(&apos;summernote&apos;, context);\n         $note.data(&apos;summernote&apos;).triggerEvent(&apos;init&apos;, context.layoutInfo);\n       }\n     });\n\n     var $note = this.first();\n     if ($note.length) {\n       var context = $note.data(&apos;summernote&apos;);\n       if (isExternalAPICalled) {\n         return context.invoke.apply(context, list.from(arguments));\n       } else if (options.focus) {\n         context.invoke(&apos;editor.focus&apos;);\n       }\n     }\n\n     return this;\n   }\n });\n</code></pre><p>这就是初始化summernote时执行的函数。</p>\n<pre><code>$.extend(object) 可以理解为JQuery 添加一个静态方法。\n$.fn.extend(object) 可以理解为JQuery实例添加一个方法。\n</code></pre><p>默认的options如下</p>\n<pre><code>options: {\n  modules: {\n    &apos;editor&apos;: Editor,\n    &apos;clipboard&apos;: Clipboard,\n    &apos;dropzone&apos;: Dropzone,\n    &apos;codeview&apos;: Codeview,\n    &apos;statusbar&apos;: Statusbar,\n    &apos;fullscreen&apos;: Fullscreen,\n    &apos;handle&apos;: Handle,\n    // FIXME: HintPopover must be front of autolink\n    //  - Script error about range when Enter key is pressed on hint popover\n    &apos;hintPopover&apos;: HintPopover,\n    &apos;autoLink&apos;: AutoLink,\n    &apos;autoSync&apos;: AutoSync,\n    &apos;placeholder&apos;: Placeholder,\n    &apos;buttons&apos;: Buttons,\n    &apos;toolbar&apos;: Toolbar,\n    &apos;linkDialog&apos;: LinkDialog,\n    &apos;linkPopover&apos;: LinkPopover,\n    &apos;imageDialog&apos;: ImageDialog,\n    &apos;imagePopover&apos;: ImagePopover,\n    &apos;videoDialog&apos;: VideoDialog,\n    &apos;helpDialog&apos;: HelpDialog,\n    &apos;airPopover&apos;: AirPopover\n  },\n\n  buttons: {},\n\n  lang: &apos;zh-CN&apos;,\n\n  // toolbar工具栏默认\n  toolbar: [\n    [&apos;style&apos;, [&apos;style&apos;]],\n    [&apos;font&apos;, [&apos;bold&apos;, &apos;underline&apos;, &apos;clear&apos;]],\n    [&apos;fontname&apos;, [&apos;fontname&apos;]],\n    [&apos;color&apos;, [&apos;color&apos;]],\n    [&apos;para&apos;, [&apos;ul&apos;, &apos;ol&apos;, &apos;paragraph&apos;]],\n    [&apos;table&apos;, [&apos;table&apos;]],\n    [&apos;insert&apos;, [&apos;link&apos;, &apos;picture&apos;, &apos;video&apos;]],\n    [&apos;view&apos;, [&apos;fullscreen&apos;, &apos;codeview&apos;, &apos;help&apos;]]\n  ],\n\n  // popover\n  popover: {\n    image: [\n      [&apos;imagesize&apos;, [&apos;imageSize100&apos;, &apos;imageSize50&apos;, &apos;imageSize25&apos;]],\n      [&apos;float&apos;, [&apos;floatLeft&apos;, &apos;floatRight&apos;, &apos;floatNone&apos;]],\n      [&apos;remove&apos;, [&apos;removeMedia&apos;]]\n    ],\n    link: [\n      [&apos;link&apos;, [&apos;linkDialogShow&apos;, &apos;unlink&apos;]]\n    ],\n    air: [\n      [&apos;color&apos;, [&apos;color&apos;]],\n      [&apos;font&apos;, [&apos;bold&apos;, &apos;underline&apos;, &apos;clear&apos;]],\n      [&apos;para&apos;, [&apos;ul&apos;, &apos;paragraph&apos;]],\n      [&apos;table&apos;, [&apos;table&apos;]],\n      [&apos;insert&apos;, [&apos;link&apos;, &apos;picture&apos;]]\n    ]\n  },\n\n  // air mode: inline editor\n  airMode: false,\n\n  width: null,\n  height: null,\n\n  focus: false,\n  tabSize: 4,\n  styleWithSpan: false,\n  shortcuts: true,\n  textareaAutoSync: true,\n  direction: null,\n\n  styleTags: [&apos;p&apos;, &apos;blockquote&apos;, &apos;pre&apos;, &apos;h1&apos;, &apos;h2&apos;, &apos;h3&apos;, &apos;h4&apos;, &apos;h5&apos;, &apos;h6&apos;],\n\n  fontNames: [\n    &apos;Arial&apos;, &apos;Arial Black&apos;, &apos;Comic Sans MS&apos;, &apos;Courier New&apos;,\n    &apos;Helvetica Neue&apos;, &apos;Helvetica&apos;, &apos;Impact&apos;, &apos;Lucida Grande&apos;,\n    &apos;Tahoma&apos;, &apos;Times New Roman&apos;, &apos;Verdana&apos;\n  ],\n\n  fontSizes: [&apos;8&apos;, &apos;9&apos;, &apos;10&apos;, &apos;11&apos;, &apos;12&apos;, &apos;14&apos;, &apos;18&apos;, &apos;24&apos;, &apos;36&apos;],\n\n  // pallete colors(n x n)\n  colors: [\n    [&apos;#000000&apos;, &apos;#424242&apos;, &apos;#636363&apos;, &apos;#9C9C94&apos;, &apos;#CEC6CE&apos;, &apos;#EFEFEF&apos;, &apos;#F7F7F7&apos;, &apos;#FFFFFF&apos;],\n    [&apos;#FF0000&apos;, &apos;#FF9C00&apos;, &apos;#FFFF00&apos;, &apos;#00FF00&apos;, &apos;#00FFFF&apos;, &apos;#0000FF&apos;, &apos;#9C00FF&apos;, &apos;#FF00FF&apos;],\n    [&apos;#F7C6CE&apos;, &apos;#FFE7CE&apos;, &apos;#FFEFC6&apos;, &apos;#D6EFD6&apos;, &apos;#CEDEE7&apos;, &apos;#CEE7F7&apos;, &apos;#D6D6E7&apos;, &apos;#E7D6DE&apos;],\n    [&apos;#E79C9C&apos;, &apos;#FFC69C&apos;, &apos;#FFE79C&apos;, &apos;#B5D6A5&apos;, &apos;#A5C6CE&apos;, &apos;#9CC6EF&apos;, &apos;#B5A5D6&apos;, &apos;#D6A5BD&apos;],\n    [&apos;#E76363&apos;, &apos;#F7AD6B&apos;, &apos;#FFD663&apos;, &apos;#94BD7B&apos;, &apos;#73A5AD&apos;, &apos;#6BADDE&apos;, &apos;#8C7BC6&apos;, &apos;#C67BA5&apos;],\n    [&apos;#CE0000&apos;, &apos;#E79439&apos;, &apos;#EFC631&apos;, &apos;#6BA54A&apos;, &apos;#4A7B8C&apos;, &apos;#3984C6&apos;, &apos;#634AA5&apos;, &apos;#A54A7B&apos;],\n    [&apos;#9C0000&apos;, &apos;#B56308&apos;, &apos;#BD9400&apos;, &apos;#397B21&apos;, &apos;#104A5A&apos;, &apos;#085294&apos;, &apos;#311873&apos;, &apos;#731842&apos;],\n    [&apos;#630000&apos;, &apos;#7B3900&apos;, &apos;#846300&apos;, &apos;#295218&apos;, &apos;#083139&apos;, &apos;#003163&apos;, &apos;#21104A&apos;, &apos;#4A1031&apos;]\n  ],\n\n  lineHeights: [&apos;1.0&apos;, &apos;1.2&apos;, &apos;1.4&apos;, &apos;1.5&apos;, &apos;1.6&apos;, &apos;1.8&apos;, &apos;2.0&apos;, &apos;3.0&apos;],\n\n  tableClassName: &apos;table table-bordered&apos;,\n\n  insertTableMaxSize: {\n    col: 10,\n    row: 10\n  },\n\n  dialogsInBody: false,\n  dialogsFade: false,\n\n  maximumImageFileSize: null,\n\n  callbacks: {\n    onInit: null,//初始化回调函数\n    onFocus: null,//聚集\n    onBlur: null,//失去焦点\n    onEnter: null,//回车键的回调函数\n    onKeyup: null,\n    onKeydown: null,\n    onSubmit: null,//提交时回调函数\n    onImageUpload: null,//这就是上传图片的回调函数\n    onImageUploadError: null//上传图片出错\n  },\n\n  codemirror: {\n    mode: &apos;text/html&apos;,\n    htmlMode: true,\n    lineNumbers: true\n  },\n\n  keyMap: {\n    pc: {\n      &apos;ENTER&apos;: &apos;insertParagraph&apos;,\n      &apos;CTRL+Z&apos;: &apos;undo&apos;,\n      &apos;CTRL+Y&apos;: &apos;redo&apos;,\n      &apos;TAB&apos;: &apos;tab&apos;,\n      &apos;SHIFT+TAB&apos;: &apos;untab&apos;,\n      &apos;CTRL+B&apos;: &apos;bold&apos;,\n      &apos;CTRL+I&apos;: &apos;italic&apos;,\n      &apos;CTRL+U&apos;: &apos;underline&apos;,\n      &apos;CTRL+SHIFT+S&apos;: &apos;strikethrough&apos;,\n      &apos;CTRL+BACKSLASH&apos;: &apos;removeFormat&apos;,\n      &apos;CTRL+SHIFT+L&apos;: &apos;justifyLeft&apos;,\n      &apos;CTRL+SHIFT+E&apos;: &apos;justifyCenter&apos;,\n      &apos;CTRL+SHIFT+R&apos;: &apos;justifyRight&apos;,\n      &apos;CTRL+SHIFT+J&apos;: &apos;justifyFull&apos;,\n      &apos;CTRL+SHIFT+NUM7&apos;: &apos;insertUnorderedList&apos;,\n      &apos;CTRL+SHIFT+NUM8&apos;: &apos;insertOrderedList&apos;,\n      &apos;CTRL+LEFTBRACKET&apos;: &apos;outdent&apos;,\n      &apos;CTRL+RIGHTBRACKET&apos;: &apos;indent&apos;,\n      &apos;CTRL+NUM0&apos;: &apos;formatPara&apos;,\n      &apos;CTRL+NUM1&apos;: &apos;formatH1&apos;,\n      &apos;CTRL+NUM2&apos;: &apos;formatH2&apos;,\n      &apos;CTRL+NUM3&apos;: &apos;formatH3&apos;,\n      &apos;CTRL+NUM4&apos;: &apos;formatH4&apos;,\n      &apos;CTRL+NUM5&apos;: &apos;formatH5&apos;,\n      &apos;CTRL+NUM6&apos;: &apos;formatH6&apos;,\n      &apos;CTRL+ENTER&apos;: &apos;insertHorizontalRule&apos;,\n      &apos;CTRL+K&apos;: &apos;linkDialog.show&apos;\n    },\n\n    mac: {\n      &apos;ENTER&apos;: &apos;insertParagraph&apos;,\n      &apos;CMD+Z&apos;: &apos;undo&apos;,\n      &apos;CMD+SHIFT+Z&apos;: &apos;redo&apos;,\n      &apos;TAB&apos;: &apos;tab&apos;,\n      &apos;SHIFT+TAB&apos;: &apos;untab&apos;,\n      &apos;CMD+B&apos;: &apos;bold&apos;,\n      &apos;CMD+I&apos;: &apos;italic&apos;,\n      &apos;CMD+U&apos;: &apos;underline&apos;,\n      &apos;CMD+SHIFT+S&apos;: &apos;strikethrough&apos;,\n      &apos;CMD+BACKSLASH&apos;: &apos;removeFormat&apos;,\n      &apos;CMD+SHIFT+L&apos;: &apos;justifyLeft&apos;,\n      &apos;CMD+SHIFT+E&apos;: &apos;justifyCenter&apos;,\n      &apos;CMD+SHIFT+R&apos;: &apos;justifyRight&apos;,\n      &apos;CMD+SHIFT+J&apos;: &apos;justifyFull&apos;,\n      &apos;CMD+SHIFT+NUM7&apos;: &apos;insertUnorderedList&apos;,\n      &apos;CMD+SHIFT+NUM8&apos;: &apos;insertOrderedList&apos;,\n      &apos;CMD+LEFTBRACKET&apos;: &apos;outdent&apos;,\n      &apos;CMD+RIGHTBRACKET&apos;: &apos;indent&apos;,\n      &apos;CMD+NUM0&apos;: &apos;formatPara&apos;,\n      &apos;CMD+NUM1&apos;: &apos;formatH1&apos;,\n      &apos;CMD+NUM2&apos;: &apos;formatH2&apos;,\n      &apos;CMD+NUM3&apos;: &apos;formatH3&apos;,\n      &apos;CMD+NUM4&apos;: &apos;formatH4&apos;,\n      &apos;CMD+NUM5&apos;: &apos;formatH5&apos;,\n      &apos;CMD+NUM6&apos;: &apos;formatH6&apos;,\n      &apos;CMD+ENTER&apos;: &apos;insertHorizontalRule&apos;,\n      &apos;CMD+K&apos;: &apos;linkDialog.show&apos;\n    }\n  },\n  icons: {\n    &apos;align&apos;: &apos;icon-align&apos;,\n    &apos;alignCenter&apos;: &apos;icon-align-center&apos;,\n    &apos;alignJustify&apos;: &apos;icon-align-justify&apos;,\n    &apos;alignLeft&apos;: &apos;icon-align-left&apos;,\n    &apos;alignRight&apos;: &apos;icon-align-right&apos;,\n    &apos;indent&apos;: &apos;icon-indent-right&apos;,\n    &apos;outdent&apos;: &apos;icon-indent-left&apos;,\n    &apos;arrowsAlt&apos;: &apos;icon-resize-full&apos;,\n    &apos;bold&apos;: &apos;icon-bold&apos;,\n    &apos;caret&apos;: &apos;icon-caret-down&apos;,\n    &apos;circle&apos;: &apos;icon-circle&apos;,\n    &apos;close&apos;: &apos;icon-close&apos;,\n    &apos;code&apos;: &apos;icon-code&apos;,\n    &apos;eraser&apos;: &apos;icon-eraser&apos;,\n    &apos;font&apos;: &apos;icon-font&apos;,\n    &apos;frame&apos;: &apos;icon-frame&apos;,\n    &apos;italic&apos;: &apos;icon-italic&apos;,\n    &apos;link&apos;: &apos;icon-link&apos;,\n    &apos;unlink&apos;: &apos;icon-chain-broken&apos;,\n    &apos;magic&apos;: &apos;icon-magic&apos;,\n    &apos;menuCheck&apos;: &apos;icon-check&apos;,\n    &apos;minus&apos;: &apos;icon-minus&apos;,\n    &apos;orderedlist&apos;: &apos;icon-list-ol&apos;,\n    &apos;pencil&apos;: &apos;icon-pencil&apos;,\n    &apos;picture&apos;: &apos;icon-picture&apos;,\n    &apos;question&apos;: &apos;icon-question&apos;,\n    &apos;redo&apos;: &apos;icon-redo&apos;,\n    &apos;square&apos;: &apos;icon-square&apos;,\n    &apos;strikethrough&apos;: &apos;icon-strikethrough&apos;,\n    &apos;subscript&apos;: &apos;icon-subscript&apos;,\n    &apos;superscript&apos;: &apos;icon-superscript&apos;,\n    &apos;table&apos;: &apos;icon-table&apos;,\n    &apos;textHeight&apos;: &apos;icon-text-height&apos;,\n    &apos;trash&apos;: &apos;icon-trash&apos;,\n    &apos;underline&apos;: &apos;icon-underline&apos;,\n    &apos;undo&apos;: &apos;icon-undo&apos;,\n    &apos;unorderedlist&apos;: &apos;icon-list-ul&apos;,\n    &apos;video&apos;: &apos;icon-facetime-video&apos;\n  }\n}\n</code></pre><p>关于编辑器需要的工具栏toolbar具体属性可查看官网<a href=\"http://summernote.org/deep-dive/#custom-toolbar-popover\" target=\"_blank\" rel=\"external\">summernote-toolbar属性</a></p>\n<h3 id=\"更改工具栏图标\"><a href=\"#更改工具栏图标\" class=\"headerlink\" title=\"更改工具栏图标\"></a><strong>更改工具栏图标</strong></h3><p>由于项目中我是直接使用fontawesome，所以我没有再引入summernote.font，直接在options中的icons中修改。但比较麻烦，不知道有什么更好的方法，求指导。</p>\n<p>关于图片上传、提交、按键等回调函数也是在options中，详见<a href=\"http://summernote.org/deep-dive/#callbacks\" target=\"_blank\" rel=\"external\">callbacks部分</a>。</p>\n<p>初始化一个编辑器很简单。只需要定义<br>    <div class=\"summernote\" id=\"myid\"></div></p>\n<pre><code> $(function () {\n    $(&apos;.summernote&apos;).summernote();\n    //或者\n    $(&apos;#myid&apos;).summernote();\n});\n</code></pre><h3 id=\"设置placeholder\"><a href=\"#设置placeholder\" class=\"headerlink\" title=\"设置placeholder:\"></a><strong>设置placeholder:</strong></h3><pre><code>$(&apos;.summernote&apos;).summernote({\n        placeholder:&apos;请输入文章内容&apos;,\n        ...\n    });\n</code></pre><h3 id=\"设置toolbar\"><a href=\"#设置toolbar\" class=\"headerlink\" title=\"设置toolbar\"></a><strong>设置toolbar</strong></h3><pre><code>$(&apos;.summernote&apos;).summernote({\n        toolbar:[\n            [&apos;style&apos;,[&apos;bold&apos;,&apos;italic&apos;,&apos;underline&apos;,&apos;clear&apos;]],\n            [&apos;fontsize&apos;,[&apos;fontsize&apos;]],\n            [&apos;para&apos;,[&apos;ul&apos;,&apos;ol&apos;,&apos;paragraph&apos;]],\n            [&apos;color&apos;,[&apos;color&apos;]]\n        ],\n        ...\n\n    });\n</code></pre><h3 id=\"更改图片上传的方式：\"><a href=\"#更改图片上传的方式：\" class=\"headerlink\" title=\"更改图片上传的方式：\"></a><strong>更改图片上传的方式</strong>：</h3><p>需要提及的是，summernote默认的图片上传方式为base64方式。若需要修改，看以下代码。<br>【一定要注意：onImageUpload方法修改时要放在callbacks内配置，否则没用】</p>\n<pre><code>$(&apos;#myid&apos;).summernote({\n    callbacks:{\n        onImageUpload: function(files, editor, $editable) {\n            UploadFiles(files,insertImg);\n        }\n    },\n    ...\n});\n\nfunction insertImg(){\n    for(i in imageUrl){\n        $(&apos;.summernote&apos;).summernote(&apos;editor.insertImage&apos;,imageUrl[i]);\n    }\n}\n\n\nfunction UploadFiles(files,func){\n//这里files是因为我设置了可上传多张图片，所以需要依次添加到formData中\n    var formData = new FormData();\n    for(f in files){\n        formData.append(&quot;file&quot;, files[f]);\n    }\n\n    $.ajax({\n        data: formData,\n        type: &quot;POST&quot;,\n        url: &quot;/uploadMultipleFile&quot;,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function(imageUrl) {\n            func(imageUrl);\n\n        },\n        error: function() {\n            console.log(&quot;uploadError&quot;);\n        }\n    })\n}\n</code></pre><p>我们项目的后台是用spring+springMVC实现的。后台图片上传代码如下:</p>\n<pre><code>@RequestMapping(value = &quot;/uploadMultipleFile&quot;, method = RequestMethod.POST, produces = &quot;application/json;charset=utf8&quot;)\n@ResponseBody\npublic String uploadMultipleFileHandler(@RequestParam(&quot;file&quot;) MultipartFile[] files, HttpServletRequest request) throws IOException {\n    return     UploadUtil.uploadImage(request.getServletContext().getRealPath(&quot;/&quot;), files);\n}\n\n\n//UploadUtil.java中uploadImage方法如下\n public static String uploadImage(String serverPath, MultipartFile[] files) {\n    try {\n        String uploadPath = serverPath + getImageRelativePath();\n        String images = &quot;{}&quot;;\n        //如果不存在目录,创建一个目录\n        isDirectory(uploadPath);\n        if (files != null &amp;&amp; files.length &gt; 0) {\n            for (int i = 0; i &lt; files.length; i++) {\n                MultipartFile file = files[i];\n                //save file\n                if (!file.isEmpty()) {\n                    String savePath = getImageRelativePath() + file.getOriginalFilename();//数据库保存的图片路径\n                    images = JSONUtil.addProperty(images, String.valueOf(i), savePath);\n                    save(file, uploadPath);\n                }\n            }\n        }\n        return images;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return &quot;{}&quot;;\n    }\n}\n</code></pre><h3 id=\"设置编辑器中的值：\"><a href=\"#设置编辑器中的值：\" class=\"headerlink\" title=\"设置编辑器中的值：\"></a><strong>设置编辑器中的值：</strong></h3><pre><code>$(&apos;#myid&apos;).summernote(&apos;code&apos;,content);\n</code></pre><p>需要注意的是，content是html代码，可能存在<strong>引号嵌套</strong>的问题导致报错，记得将引号进行转义。<br>后台处理-java代码：</p>\n<pre><code>content = content.replaceAll(&quot;&apos;&quot;,&quot;\\\\\\\\&apos;&quot;);\ncontent = content.replaceAll(&quot;\\&quot;&quot;, &quot;\\\\\\\\\\&quot;&quot;);\n</code></pre><h3 id=\"获取编辑器中的值：\"><a href=\"#获取编辑器中的值：\" class=\"headerlink\" title=\"获取编辑器中的值：\"></a><strong>获取编辑器中的值：</strong></h3><pre><code>var content = $(&apos;.summernote&apos;).summernote(&apos;code&apos;);\n</code></pre><h3 id=\"上传附件\"><a href=\"#上传附件\" class=\"headerlink\" title=\"上传附件\"></a><strong>上传附件</strong></h3><p>这次项目需要使用附件，但发现summernote貌似没有附件功能，于是自己研究了一下代码，根据项目的需求，在<code>link</code>链接部分进行了修改。<br>效果如下：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_3.png\" alt=\"clipboard.png\"></p>\n<p>首先，我们先看<code>link</code>按钮所绑定的事件。</p>\n<pre><code>context.memo(&apos;button.link&apos;, function () {\n        return ui.button({\n          contents: ui.icon(options.icons.link),\n          tooltip: lang.link.link,\n          click: context.createInvokeHandler(&apos;linkDialog.show&apos;)\n        }).render();\n      });\n</code></pre><p>由上面的代码可以发现<code>click</code>事件为：<code>linkDialog.show</code>，那么我们再来看一下<code>linkDialog</code>。</p>\n<pre><code>var LinkDialog = function (context) {\n    ...\n    this.initialize = function () {//初始化\n        ...\n        var body = &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n               &apos;&lt;label&gt;&apos; + lang.link.textToDisplay + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;input class=&quot;note-link-text form-control&quot; type=&quot;text&quot; /&gt;&apos; +\n             &apos;&lt;/div&gt;&apos; +\n              &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n              &apos;&lt;label&gt;&apos; + lang.link.attachment + &apos;&lt;/label&gt;&apos; +\n              &apos;&lt;input class=&quot;note-link-attachment form-control&quot; type=&quot;file&quot; /&gt;&apos; +\n              &apos;&lt;/div&gt;&apos; +\n             &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n               &apos;&lt;label&gt;&apos; + lang.link.url + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;input class=&quot;note-link-url form-control&quot; type=&quot;text&quot; value=&quot;http://&quot; /&gt;&apos; +\n             &apos;&lt;/div&gt;&apos; +\n             (!options.disableLinkTarget ?\n               &apos;&lt;div class=&quot;checkbox&quot;&gt;&apos; +\n                 &apos;&lt;label&gt;&apos; + &apos;&lt;input type=&quot;checkbox&quot; checked&gt; &apos; + lang.link.openInNewWindow + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;/div&gt;&apos; : &apos;&apos;\n             );\n        var footer = &apos;&lt;button href=&quot;#&quot; class=&quot;btn btn-primary note-link-btn disabled&quot; disabled&gt;&apos; + lang.link.insert + &apos;&lt;/button&gt;&apos;;\n\n    }\n}\n</code></pre><p>可以看到，点击链接按钮出现的弹框样式就在<code>LinkDialog</code>的<code>initialize</code>方法中的<code>body</code>，所以我在中间添加了一个<code>input</code>上传附件的部分。</p>\n<pre><code>&apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n&apos;&lt;label&gt;&apos; + lang.link.attachment + &apos;&lt;/label&gt;&apos; +\n&apos;&lt;input class=&quot;note-link-attachment form-control&quot; type=&quot;file&quot; /&gt;&apos; +\n&apos;&lt;/div&gt;&apos; +\n</code></pre><p>那么，我们需要在<code>lang.link</code>属性中，新增一个<code>attachment</code>附件属性。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_4.png\" alt=\"clipboard.png\"></p>\n<p>除此之外，在中文的转换部分summernote-zh-CN.min.js中，添加<code>link</code>的<code>attachment: &#39;添加附件&#39;</code></p>\n<p>好了，那么我们接下来需要处理的问题是上传文件后的处理。</p>\n<pre><code>this.showLinkDialog = function (linkInfo) {\n    return $.Deferred(function (deferred) {\n        ...\n        //上传文件的输入框\n        $linkAttachment = self.$dialog.find(&apos;.note-link-attachment&apos;),\n\n        ui.onDialogShown(self.$dialog, function () {\n            ...\n            //对于输入框的事件绑定\n            $linkAttachment.on(&apos;change&apos;, function() {\n                UploadFiles($linkAttachment.val(),function(url){\n                    $linkUrl.val(url);//将上传后的URL赋值到linkUrl的输入框中\n                });\n            });\n        }\n    }\n}\n</code></pre><p>UploadFiles与上述修改上传图片的形式一样。   </p>\n<p>如果这篇文章对您有帮助，欢迎点赞。如果有疏漏，欢迎指正。</p>\n","excerpt":"","more":"<p>这次项目中需要用到编辑器插件，于是上网查了一下。由于需要的编辑器功能比较简单，不需要太多复杂功能，所以选择了一款特别轻量的summernote插件，而且后台操作也很简单。<br>官网：<a href=\"http://summernote.org/\">http://summernote.org/</a><br>github地址：<a href=\"https://github.com/summernote/summernote\">https://github.com/summernote/summernote</a></p>\n<p>先来看一下官网的截图</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_1.png\" alt=\"官网截图\"></p>\n<p>麻雀虽小五脏俱全。完全可以满足编辑器的需要。</p>\n<p>按照官网链接下载下来的是</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_5.png\" alt=\"clipboard.png\"></p>\n<p>我们需要使用的是在dist文件夹内</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_2.png\" alt=\"clipboard.png\"></p>\n<p>其中font主要是编辑器内的图标显示，lang是各种语言，css则是样式。我们主要来看一下summernote.js。</p>\n<h2 id=\"summernote-js\"><a href=\"#summernote-js\" class=\"headerlink\" title=\"summernote.js\"></a>summernote.js</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><pre><code>$.fn.extend({\n   summernote: function () {\n     var type = $.type(list.head(arguments));\n     var isExternalAPICalled = type === &apos;string&apos;;\n     var hasInitOptions = type === &apos;object&apos;;\n\n     var options = hasInitOptions ? list.head(arguments) : {};\n\n     options = $.extend({}, $.summernote.options, options);\n     options.langInfo = $.extend(true, {}, $.summernote.lang[&apos;en-US&apos;], $.summernote.lang[options.lang]);\n\n     this.each(function (idx, note) {\n       var $note = $(note);\n       if (!$note.data(&apos;summernote&apos;)) {\n         var context = new Context($note, options);\n         $note.data(&apos;summernote&apos;, context);\n         $note.data(&apos;summernote&apos;).triggerEvent(&apos;init&apos;, context.layoutInfo);\n       }\n     });\n\n     var $note = this.first();\n     if ($note.length) {\n       var context = $note.data(&apos;summernote&apos;);\n       if (isExternalAPICalled) {\n         return context.invoke.apply(context, list.from(arguments));\n       } else if (options.focus) {\n         context.invoke(&apos;editor.focus&apos;);\n       }\n     }\n\n     return this;\n   }\n });\n</code></pre><p>这就是初始化summernote时执行的函数。</p>\n<pre><code>$.extend(object) 可以理解为JQuery 添加一个静态方法。\n$.fn.extend(object) 可以理解为JQuery实例添加一个方法。\n</code></pre><p>默认的options如下</p>\n<pre><code>options: {\n  modules: {\n    &apos;editor&apos;: Editor,\n    &apos;clipboard&apos;: Clipboard,\n    &apos;dropzone&apos;: Dropzone,\n    &apos;codeview&apos;: Codeview,\n    &apos;statusbar&apos;: Statusbar,\n    &apos;fullscreen&apos;: Fullscreen,\n    &apos;handle&apos;: Handle,\n    // FIXME: HintPopover must be front of autolink\n    //  - Script error about range when Enter key is pressed on hint popover\n    &apos;hintPopover&apos;: HintPopover,\n    &apos;autoLink&apos;: AutoLink,\n    &apos;autoSync&apos;: AutoSync,\n    &apos;placeholder&apos;: Placeholder,\n    &apos;buttons&apos;: Buttons,\n    &apos;toolbar&apos;: Toolbar,\n    &apos;linkDialog&apos;: LinkDialog,\n    &apos;linkPopover&apos;: LinkPopover,\n    &apos;imageDialog&apos;: ImageDialog,\n    &apos;imagePopover&apos;: ImagePopover,\n    &apos;videoDialog&apos;: VideoDialog,\n    &apos;helpDialog&apos;: HelpDialog,\n    &apos;airPopover&apos;: AirPopover\n  },\n\n  buttons: {},\n\n  lang: &apos;zh-CN&apos;,\n\n  // toolbar工具栏默认\n  toolbar: [\n    [&apos;style&apos;, [&apos;style&apos;]],\n    [&apos;font&apos;, [&apos;bold&apos;, &apos;underline&apos;, &apos;clear&apos;]],\n    [&apos;fontname&apos;, [&apos;fontname&apos;]],\n    [&apos;color&apos;, [&apos;color&apos;]],\n    [&apos;para&apos;, [&apos;ul&apos;, &apos;ol&apos;, &apos;paragraph&apos;]],\n    [&apos;table&apos;, [&apos;table&apos;]],\n    [&apos;insert&apos;, [&apos;link&apos;, &apos;picture&apos;, &apos;video&apos;]],\n    [&apos;view&apos;, [&apos;fullscreen&apos;, &apos;codeview&apos;, &apos;help&apos;]]\n  ],\n\n  // popover\n  popover: {\n    image: [\n      [&apos;imagesize&apos;, [&apos;imageSize100&apos;, &apos;imageSize50&apos;, &apos;imageSize25&apos;]],\n      [&apos;float&apos;, [&apos;floatLeft&apos;, &apos;floatRight&apos;, &apos;floatNone&apos;]],\n      [&apos;remove&apos;, [&apos;removeMedia&apos;]]\n    ],\n    link: [\n      [&apos;link&apos;, [&apos;linkDialogShow&apos;, &apos;unlink&apos;]]\n    ],\n    air: [\n      [&apos;color&apos;, [&apos;color&apos;]],\n      [&apos;font&apos;, [&apos;bold&apos;, &apos;underline&apos;, &apos;clear&apos;]],\n      [&apos;para&apos;, [&apos;ul&apos;, &apos;paragraph&apos;]],\n      [&apos;table&apos;, [&apos;table&apos;]],\n      [&apos;insert&apos;, [&apos;link&apos;, &apos;picture&apos;]]\n    ]\n  },\n\n  // air mode: inline editor\n  airMode: false,\n\n  width: null,\n  height: null,\n\n  focus: false,\n  tabSize: 4,\n  styleWithSpan: false,\n  shortcuts: true,\n  textareaAutoSync: true,\n  direction: null,\n\n  styleTags: [&apos;p&apos;, &apos;blockquote&apos;, &apos;pre&apos;, &apos;h1&apos;, &apos;h2&apos;, &apos;h3&apos;, &apos;h4&apos;, &apos;h5&apos;, &apos;h6&apos;],\n\n  fontNames: [\n    &apos;Arial&apos;, &apos;Arial Black&apos;, &apos;Comic Sans MS&apos;, &apos;Courier New&apos;,\n    &apos;Helvetica Neue&apos;, &apos;Helvetica&apos;, &apos;Impact&apos;, &apos;Lucida Grande&apos;,\n    &apos;Tahoma&apos;, &apos;Times New Roman&apos;, &apos;Verdana&apos;\n  ],\n\n  fontSizes: [&apos;8&apos;, &apos;9&apos;, &apos;10&apos;, &apos;11&apos;, &apos;12&apos;, &apos;14&apos;, &apos;18&apos;, &apos;24&apos;, &apos;36&apos;],\n\n  // pallete colors(n x n)\n  colors: [\n    [&apos;#000000&apos;, &apos;#424242&apos;, &apos;#636363&apos;, &apos;#9C9C94&apos;, &apos;#CEC6CE&apos;, &apos;#EFEFEF&apos;, &apos;#F7F7F7&apos;, &apos;#FFFFFF&apos;],\n    [&apos;#FF0000&apos;, &apos;#FF9C00&apos;, &apos;#FFFF00&apos;, &apos;#00FF00&apos;, &apos;#00FFFF&apos;, &apos;#0000FF&apos;, &apos;#9C00FF&apos;, &apos;#FF00FF&apos;],\n    [&apos;#F7C6CE&apos;, &apos;#FFE7CE&apos;, &apos;#FFEFC6&apos;, &apos;#D6EFD6&apos;, &apos;#CEDEE7&apos;, &apos;#CEE7F7&apos;, &apos;#D6D6E7&apos;, &apos;#E7D6DE&apos;],\n    [&apos;#E79C9C&apos;, &apos;#FFC69C&apos;, &apos;#FFE79C&apos;, &apos;#B5D6A5&apos;, &apos;#A5C6CE&apos;, &apos;#9CC6EF&apos;, &apos;#B5A5D6&apos;, &apos;#D6A5BD&apos;],\n    [&apos;#E76363&apos;, &apos;#F7AD6B&apos;, &apos;#FFD663&apos;, &apos;#94BD7B&apos;, &apos;#73A5AD&apos;, &apos;#6BADDE&apos;, &apos;#8C7BC6&apos;, &apos;#C67BA5&apos;],\n    [&apos;#CE0000&apos;, &apos;#E79439&apos;, &apos;#EFC631&apos;, &apos;#6BA54A&apos;, &apos;#4A7B8C&apos;, &apos;#3984C6&apos;, &apos;#634AA5&apos;, &apos;#A54A7B&apos;],\n    [&apos;#9C0000&apos;, &apos;#B56308&apos;, &apos;#BD9400&apos;, &apos;#397B21&apos;, &apos;#104A5A&apos;, &apos;#085294&apos;, &apos;#311873&apos;, &apos;#731842&apos;],\n    [&apos;#630000&apos;, &apos;#7B3900&apos;, &apos;#846300&apos;, &apos;#295218&apos;, &apos;#083139&apos;, &apos;#003163&apos;, &apos;#21104A&apos;, &apos;#4A1031&apos;]\n  ],\n\n  lineHeights: [&apos;1.0&apos;, &apos;1.2&apos;, &apos;1.4&apos;, &apos;1.5&apos;, &apos;1.6&apos;, &apos;1.8&apos;, &apos;2.0&apos;, &apos;3.0&apos;],\n\n  tableClassName: &apos;table table-bordered&apos;,\n\n  insertTableMaxSize: {\n    col: 10,\n    row: 10\n  },\n\n  dialogsInBody: false,\n  dialogsFade: false,\n\n  maximumImageFileSize: null,\n\n  callbacks: {\n    onInit: null,//初始化回调函数\n    onFocus: null,//聚集\n    onBlur: null,//失去焦点\n    onEnter: null,//回车键的回调函数\n    onKeyup: null,\n    onKeydown: null,\n    onSubmit: null,//提交时回调函数\n    onImageUpload: null,//这就是上传图片的回调函数\n    onImageUploadError: null//上传图片出错\n  },\n\n  codemirror: {\n    mode: &apos;text/html&apos;,\n    htmlMode: true,\n    lineNumbers: true\n  },\n\n  keyMap: {\n    pc: {\n      &apos;ENTER&apos;: &apos;insertParagraph&apos;,\n      &apos;CTRL+Z&apos;: &apos;undo&apos;,\n      &apos;CTRL+Y&apos;: &apos;redo&apos;,\n      &apos;TAB&apos;: &apos;tab&apos;,\n      &apos;SHIFT+TAB&apos;: &apos;untab&apos;,\n      &apos;CTRL+B&apos;: &apos;bold&apos;,\n      &apos;CTRL+I&apos;: &apos;italic&apos;,\n      &apos;CTRL+U&apos;: &apos;underline&apos;,\n      &apos;CTRL+SHIFT+S&apos;: &apos;strikethrough&apos;,\n      &apos;CTRL+BACKSLASH&apos;: &apos;removeFormat&apos;,\n      &apos;CTRL+SHIFT+L&apos;: &apos;justifyLeft&apos;,\n      &apos;CTRL+SHIFT+E&apos;: &apos;justifyCenter&apos;,\n      &apos;CTRL+SHIFT+R&apos;: &apos;justifyRight&apos;,\n      &apos;CTRL+SHIFT+J&apos;: &apos;justifyFull&apos;,\n      &apos;CTRL+SHIFT+NUM7&apos;: &apos;insertUnorderedList&apos;,\n      &apos;CTRL+SHIFT+NUM8&apos;: &apos;insertOrderedList&apos;,\n      &apos;CTRL+LEFTBRACKET&apos;: &apos;outdent&apos;,\n      &apos;CTRL+RIGHTBRACKET&apos;: &apos;indent&apos;,\n      &apos;CTRL+NUM0&apos;: &apos;formatPara&apos;,\n      &apos;CTRL+NUM1&apos;: &apos;formatH1&apos;,\n      &apos;CTRL+NUM2&apos;: &apos;formatH2&apos;,\n      &apos;CTRL+NUM3&apos;: &apos;formatH3&apos;,\n      &apos;CTRL+NUM4&apos;: &apos;formatH4&apos;,\n      &apos;CTRL+NUM5&apos;: &apos;formatH5&apos;,\n      &apos;CTRL+NUM6&apos;: &apos;formatH6&apos;,\n      &apos;CTRL+ENTER&apos;: &apos;insertHorizontalRule&apos;,\n      &apos;CTRL+K&apos;: &apos;linkDialog.show&apos;\n    },\n\n    mac: {\n      &apos;ENTER&apos;: &apos;insertParagraph&apos;,\n      &apos;CMD+Z&apos;: &apos;undo&apos;,\n      &apos;CMD+SHIFT+Z&apos;: &apos;redo&apos;,\n      &apos;TAB&apos;: &apos;tab&apos;,\n      &apos;SHIFT+TAB&apos;: &apos;untab&apos;,\n      &apos;CMD+B&apos;: &apos;bold&apos;,\n      &apos;CMD+I&apos;: &apos;italic&apos;,\n      &apos;CMD+U&apos;: &apos;underline&apos;,\n      &apos;CMD+SHIFT+S&apos;: &apos;strikethrough&apos;,\n      &apos;CMD+BACKSLASH&apos;: &apos;removeFormat&apos;,\n      &apos;CMD+SHIFT+L&apos;: &apos;justifyLeft&apos;,\n      &apos;CMD+SHIFT+E&apos;: &apos;justifyCenter&apos;,\n      &apos;CMD+SHIFT+R&apos;: &apos;justifyRight&apos;,\n      &apos;CMD+SHIFT+J&apos;: &apos;justifyFull&apos;,\n      &apos;CMD+SHIFT+NUM7&apos;: &apos;insertUnorderedList&apos;,\n      &apos;CMD+SHIFT+NUM8&apos;: &apos;insertOrderedList&apos;,\n      &apos;CMD+LEFTBRACKET&apos;: &apos;outdent&apos;,\n      &apos;CMD+RIGHTBRACKET&apos;: &apos;indent&apos;,\n      &apos;CMD+NUM0&apos;: &apos;formatPara&apos;,\n      &apos;CMD+NUM1&apos;: &apos;formatH1&apos;,\n      &apos;CMD+NUM2&apos;: &apos;formatH2&apos;,\n      &apos;CMD+NUM3&apos;: &apos;formatH3&apos;,\n      &apos;CMD+NUM4&apos;: &apos;formatH4&apos;,\n      &apos;CMD+NUM5&apos;: &apos;formatH5&apos;,\n      &apos;CMD+NUM6&apos;: &apos;formatH6&apos;,\n      &apos;CMD+ENTER&apos;: &apos;insertHorizontalRule&apos;,\n      &apos;CMD+K&apos;: &apos;linkDialog.show&apos;\n    }\n  },\n  icons: {\n    &apos;align&apos;: &apos;icon-align&apos;,\n    &apos;alignCenter&apos;: &apos;icon-align-center&apos;,\n    &apos;alignJustify&apos;: &apos;icon-align-justify&apos;,\n    &apos;alignLeft&apos;: &apos;icon-align-left&apos;,\n    &apos;alignRight&apos;: &apos;icon-align-right&apos;,\n    &apos;indent&apos;: &apos;icon-indent-right&apos;,\n    &apos;outdent&apos;: &apos;icon-indent-left&apos;,\n    &apos;arrowsAlt&apos;: &apos;icon-resize-full&apos;,\n    &apos;bold&apos;: &apos;icon-bold&apos;,\n    &apos;caret&apos;: &apos;icon-caret-down&apos;,\n    &apos;circle&apos;: &apos;icon-circle&apos;,\n    &apos;close&apos;: &apos;icon-close&apos;,\n    &apos;code&apos;: &apos;icon-code&apos;,\n    &apos;eraser&apos;: &apos;icon-eraser&apos;,\n    &apos;font&apos;: &apos;icon-font&apos;,\n    &apos;frame&apos;: &apos;icon-frame&apos;,\n    &apos;italic&apos;: &apos;icon-italic&apos;,\n    &apos;link&apos;: &apos;icon-link&apos;,\n    &apos;unlink&apos;: &apos;icon-chain-broken&apos;,\n    &apos;magic&apos;: &apos;icon-magic&apos;,\n    &apos;menuCheck&apos;: &apos;icon-check&apos;,\n    &apos;minus&apos;: &apos;icon-minus&apos;,\n    &apos;orderedlist&apos;: &apos;icon-list-ol&apos;,\n    &apos;pencil&apos;: &apos;icon-pencil&apos;,\n    &apos;picture&apos;: &apos;icon-picture&apos;,\n    &apos;question&apos;: &apos;icon-question&apos;,\n    &apos;redo&apos;: &apos;icon-redo&apos;,\n    &apos;square&apos;: &apos;icon-square&apos;,\n    &apos;strikethrough&apos;: &apos;icon-strikethrough&apos;,\n    &apos;subscript&apos;: &apos;icon-subscript&apos;,\n    &apos;superscript&apos;: &apos;icon-superscript&apos;,\n    &apos;table&apos;: &apos;icon-table&apos;,\n    &apos;textHeight&apos;: &apos;icon-text-height&apos;,\n    &apos;trash&apos;: &apos;icon-trash&apos;,\n    &apos;underline&apos;: &apos;icon-underline&apos;,\n    &apos;undo&apos;: &apos;icon-undo&apos;,\n    &apos;unorderedlist&apos;: &apos;icon-list-ul&apos;,\n    &apos;video&apos;: &apos;icon-facetime-video&apos;\n  }\n}\n</code></pre><p>关于编辑器需要的工具栏toolbar具体属性可查看官网<a href=\"http://summernote.org/deep-dive/#custom-toolbar-popover\">summernote-toolbar属性</a></p>\n<h3 id=\"更改工具栏图标\"><a href=\"#更改工具栏图标\" class=\"headerlink\" title=\"更改工具栏图标\"></a><strong>更改工具栏图标</strong></h3><p>由于项目中我是直接使用fontawesome，所以我没有再引入summernote.font，直接在options中的icons中修改。但比较麻烦，不知道有什么更好的方法，求指导。</p>\n<p>关于图片上传、提交、按键等回调函数也是在options中，详见<a href=\"http://summernote.org/deep-dive/#callbacks\">callbacks部分</a>。</p>\n<p>初始化一个编辑器很简单。只需要定义<br>    <div class=\"summernote\" id=\"myid\"></div></p>\n<pre><code> $(function () {\n    $(&apos;.summernote&apos;).summernote();\n    //或者\n    $(&apos;#myid&apos;).summernote();\n});\n</code></pre><h3 id=\"设置placeholder\"><a href=\"#设置placeholder\" class=\"headerlink\" title=\"设置placeholder:\"></a><strong>设置placeholder:</strong></h3><pre><code>$(&apos;.summernote&apos;).summernote({\n        placeholder:&apos;请输入文章内容&apos;,\n        ...\n    });\n</code></pre><h3 id=\"设置toolbar\"><a href=\"#设置toolbar\" class=\"headerlink\" title=\"设置toolbar\"></a><strong>设置toolbar</strong></h3><pre><code>$(&apos;.summernote&apos;).summernote({\n        toolbar:[\n            [&apos;style&apos;,[&apos;bold&apos;,&apos;italic&apos;,&apos;underline&apos;,&apos;clear&apos;]],\n            [&apos;fontsize&apos;,[&apos;fontsize&apos;]],\n            [&apos;para&apos;,[&apos;ul&apos;,&apos;ol&apos;,&apos;paragraph&apos;]],\n            [&apos;color&apos;,[&apos;color&apos;]]\n        ],\n        ...\n\n    });\n</code></pre><h3 id=\"更改图片上传的方式：\"><a href=\"#更改图片上传的方式：\" class=\"headerlink\" title=\"更改图片上传的方式：\"></a><strong>更改图片上传的方式</strong>：</h3><p>需要提及的是，summernote默认的图片上传方式为base64方式。若需要修改，看以下代码。<br>【一定要注意：onImageUpload方法修改时要放在callbacks内配置，否则没用】</p>\n<pre><code>$(&apos;#myid&apos;).summernote({\n    callbacks:{\n        onImageUpload: function(files, editor, $editable) {\n            UploadFiles(files,insertImg);\n        }\n    },\n    ...\n});\n\nfunction insertImg(){\n    for(i in imageUrl){\n        $(&apos;.summernote&apos;).summernote(&apos;editor.insertImage&apos;,imageUrl[i]);\n    }\n}\n\n\nfunction UploadFiles(files,func){\n//这里files是因为我设置了可上传多张图片，所以需要依次添加到formData中\n    var formData = new FormData();\n    for(f in files){\n        formData.append(&quot;file&quot;, files[f]);\n    }\n\n    $.ajax({\n        data: formData,\n        type: &quot;POST&quot;,\n        url: &quot;/uploadMultipleFile&quot;,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function(imageUrl) {\n            func(imageUrl);\n\n        },\n        error: function() {\n            console.log(&quot;uploadError&quot;);\n        }\n    })\n}\n</code></pre><p>我们项目的后台是用spring+springMVC实现的。后台图片上传代码如下:</p>\n<pre><code>@RequestMapping(value = &quot;/uploadMultipleFile&quot;, method = RequestMethod.POST, produces = &quot;application/json;charset=utf8&quot;)\n@ResponseBody\npublic String uploadMultipleFileHandler(@RequestParam(&quot;file&quot;) MultipartFile[] files, HttpServletRequest request) throws IOException {\n    return     UploadUtil.uploadImage(request.getServletContext().getRealPath(&quot;/&quot;), files);\n}\n\n\n//UploadUtil.java中uploadImage方法如下\n public static String uploadImage(String serverPath, MultipartFile[] files) {\n    try {\n        String uploadPath = serverPath + getImageRelativePath();\n        String images = &quot;{}&quot;;\n        //如果不存在目录,创建一个目录\n        isDirectory(uploadPath);\n        if (files != null &amp;&amp; files.length &gt; 0) {\n            for (int i = 0; i &lt; files.length; i++) {\n                MultipartFile file = files[i];\n                //save file\n                if (!file.isEmpty()) {\n                    String savePath = getImageRelativePath() + file.getOriginalFilename();//数据库保存的图片路径\n                    images = JSONUtil.addProperty(images, String.valueOf(i), savePath);\n                    save(file, uploadPath);\n                }\n            }\n        }\n        return images;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return &quot;{}&quot;;\n    }\n}\n</code></pre><h3 id=\"设置编辑器中的值：\"><a href=\"#设置编辑器中的值：\" class=\"headerlink\" title=\"设置编辑器中的值：\"></a><strong>设置编辑器中的值：</strong></h3><pre><code>$(&apos;#myid&apos;).summernote(&apos;code&apos;,content);\n</code></pre><p>需要注意的是，content是html代码，可能存在<strong>引号嵌套</strong>的问题导致报错，记得将引号进行转义。<br>后台处理-java代码：</p>\n<pre><code>content = content.replaceAll(&quot;&apos;&quot;,&quot;\\\\\\\\&apos;&quot;);\ncontent = content.replaceAll(&quot;\\&quot;&quot;, &quot;\\\\\\\\\\&quot;&quot;);\n</code></pre><h3 id=\"获取编辑器中的值：\"><a href=\"#获取编辑器中的值：\" class=\"headerlink\" title=\"获取编辑器中的值：\"></a><strong>获取编辑器中的值：</strong></h3><pre><code>var content = $(&apos;.summernote&apos;).summernote(&apos;code&apos;);\n</code></pre><h3 id=\"上传附件\"><a href=\"#上传附件\" class=\"headerlink\" title=\"上传附件\"></a><strong>上传附件</strong></h3><p>这次项目需要使用附件，但发现summernote貌似没有附件功能，于是自己研究了一下代码，根据项目的需求，在<code>link</code>链接部分进行了修改。<br>效果如下：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_3.png\" alt=\"clipboard.png\"></p>\n<p>首先，我们先看<code>link</code>按钮所绑定的事件。</p>\n<pre><code>context.memo(&apos;button.link&apos;, function () {\n        return ui.button({\n          contents: ui.icon(options.icons.link),\n          tooltip: lang.link.link,\n          click: context.createInvokeHandler(&apos;linkDialog.show&apos;)\n        }).render();\n      });\n</code></pre><p>由上面的代码可以发现<code>click</code>事件为：<code>linkDialog.show</code>，那么我们再来看一下<code>linkDialog</code>。</p>\n<pre><code>var LinkDialog = function (context) {\n    ...\n    this.initialize = function () {//初始化\n        ...\n        var body = &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n               &apos;&lt;label&gt;&apos; + lang.link.textToDisplay + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;input class=&quot;note-link-text form-control&quot; type=&quot;text&quot; /&gt;&apos; +\n             &apos;&lt;/div&gt;&apos; +\n              &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n              &apos;&lt;label&gt;&apos; + lang.link.attachment + &apos;&lt;/label&gt;&apos; +\n              &apos;&lt;input class=&quot;note-link-attachment form-control&quot; type=&quot;file&quot; /&gt;&apos; +\n              &apos;&lt;/div&gt;&apos; +\n             &apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n               &apos;&lt;label&gt;&apos; + lang.link.url + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;input class=&quot;note-link-url form-control&quot; type=&quot;text&quot; value=&quot;http://&quot; /&gt;&apos; +\n             &apos;&lt;/div&gt;&apos; +\n             (!options.disableLinkTarget ?\n               &apos;&lt;div class=&quot;checkbox&quot;&gt;&apos; +\n                 &apos;&lt;label&gt;&apos; + &apos;&lt;input type=&quot;checkbox&quot; checked&gt; &apos; + lang.link.openInNewWindow + &apos;&lt;/label&gt;&apos; +\n               &apos;&lt;/div&gt;&apos; : &apos;&apos;\n             );\n        var footer = &apos;&lt;button href=&quot;#&quot; class=&quot;btn btn-primary note-link-btn disabled&quot; disabled&gt;&apos; + lang.link.insert + &apos;&lt;/button&gt;&apos;;\n\n    }\n}\n</code></pre><p>可以看到，点击链接按钮出现的弹框样式就在<code>LinkDialog</code>的<code>initialize</code>方法中的<code>body</code>，所以我在中间添加了一个<code>input</code>上传附件的部分。</p>\n<pre><code>&apos;&lt;div class=&quot;form-group&quot;&gt;&apos; +\n&apos;&lt;label&gt;&apos; + lang.link.attachment + &apos;&lt;/label&gt;&apos; +\n&apos;&lt;input class=&quot;note-link-attachment form-control&quot; type=&quot;file&quot; /&gt;&apos; +\n&apos;&lt;/div&gt;&apos; +\n</code></pre><p>那么，我们需要在<code>lang.link</code>属性中，新增一个<code>attachment</code>附件属性。</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0810_4.png\" alt=\"clipboard.png\"></p>\n<p>除此之外，在中文的转换部分summernote-zh-CN.min.js中，添加<code>link</code>的<code>attachment: &#39;添加附件&#39;</code></p>\n<p>好了，那么我们接下来需要处理的问题是上传文件后的处理。</p>\n<pre><code>this.showLinkDialog = function (linkInfo) {\n    return $.Deferred(function (deferred) {\n        ...\n        //上传文件的输入框\n        $linkAttachment = self.$dialog.find(&apos;.note-link-attachment&apos;),\n\n        ui.onDialogShown(self.$dialog, function () {\n            ...\n            //对于输入框的事件绑定\n            $linkAttachment.on(&apos;change&apos;, function() {\n                UploadFiles($linkAttachment.val(),function(url){\n                    $linkUrl.val(url);//将上传后的URL赋值到linkUrl的输入框中\n                });\n            });\n        }\n    }\n}\n</code></pre><p>UploadFiles与上述修改上传图片的形式一样。   </p>\n<p>如果这篇文章对您有帮助，欢迎点赞。如果有疏漏，欢迎指正。</p>\n"},{"title":"websocket资料总结","date":"2016-08-14T11:29:43.000Z","_content":"## 前言\n之前的项目中使用了`websocket`、`socketJS`，趁此机会将一些知识点及资料进行整理总结。正所谓温故而知新~\n\n## websocket是什么\n按照惯例，在使用之前，先了解一下概念。\n> `websocket`是在`html5`中提供了一种浏览器和服务器间进行**全双工**通讯的网络技术。\n\n浏览器向服务端发送一个请求，通过报文头部`Upgrade`来表明需要从`HTTP`切换至`Websocket`协议。\n\n    GET ws://echo.websocket.org/?encoding=text HTTP/1.1\n    Origin: http://websocket.org\n    Cookie: __utma=99as\n    Connection: Upgrade\n    Host: echo.websocket.org\n    Sec-WebSocket-Key: uRovscZjNol/umbTt5uKmw==\n    Upgrade: websocket\n    Sec-WebSocket-Version: 13\n\n如果服务端理解websocket协议，它也是通过报文`Upgrade`从HTTP转换为Websocket协议。\n\n    HTTP/1.1 101 WebSocket Protocol Handshake\n    Date: Fri, 10 Feb 2012 17:38:18 GMT\n    Connection: Upgrade\n    Server: Kaazing Gateway\n    Upgrade: WebSocket\n    Access-Control-Allow-Origin: http://websocket.org\n    Access-Control-Allow-Credentials: true\n    Sec-WebSocket-Accept: rLHCkw/SKsO9GAH/ZSFhBATDKrU=\n    Access-Control-Allow-Headers: content-type\n\n这个时候就建立起了websocket连接，基于TCP/IP。使用端口与HTTP(80)和HTTPS(443)一样。\n    \n## 为什么要用websocket？\n知道了什么是websocket，那么为什么要使用websocket呢？除了websocket之外，浏览器进行即时通信的方式还有以下几种：\n\n* 定期查询\n每隔一个时间段就向服务器发送一个请求，请求服务器的最新数据再进行更新。但这样做的后果就是浪费大量流量，对服务端造成了巨大压力。\n\n* Comet\n基于http长连接的“服务器推”技术。客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。有两种形式：\n    * 基于`Ajax`的长轮询（long-polling）方式\n    浏览器发出XMLHttpRequest请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。\n    * 基于`Iframe`及`htmlfile`的流（http streaming）方式\n    通常的做法是在页面中嵌入一个隐藏的iframe,然后让这个iframe的src属性指向我们请求的一个服务端地址，并且为了数据更新，我们将页面上数据更新操作封装为一个js函数，将函数名当做参数传递到这个地址当中。服务端收到请求后解析地址取出参数（客户端js函数调用名），每当有数据更新的时候，返回对客户端函数的调用，并且将要跟新的数据以js函数的参数填入到返回内容当中，例如返回“<script type=\"text/javascript\">update(\"data\")</script>”这样一个字符串，意味着以data为参数调用客户端update函数进行客户端view更新。\n当应用程序有高吞吐量的需求，Comet的长轮询就不适合了。\n\n* SSE\nSSE(服务端推送事件)是一种允许服务端向客户端推送新数据的HTML5技术。与websocket相比，WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。\n\n相比于间断的轮询或长轮询来模拟全双工连接的解决方式，Websocket极大的减少了不必要的网络流量和延迟。除此之外，Websocket-based的应用减轻了服务器的负担，让现有的机器能支持更多的并发连接。如下图所示：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0814_2.png)\n\n\n## 如何使用websocket\n【以下例子来源于http://www.websocket.org/aboutwebsocket.html】\n只需要创建一个新的Websocket实例，提供一个URL，这个URL表示的是你希望连接的那个end-point。如下所示。\n需要注意的是: `ws://`和`wss://`的前缀表示了Websokcet和安全协议的Websocket连接。\n    \n    var myWebsocket = new Websocket(\"ws://www.websocket.org\");\n\n在连接到一个端点发送消息之前，你可以将一系列的事件监听器来处理连接的生命周期的每个阶段。如下所示：\n\n    myWebSocket.onopen = function(evt) { \n        alert(\"Connection open ...\"); \n    };\n    myWebSocket.onmessage = function(evt) { \n        alert( \"Received Message: \" + evt.data); \n    };\n    myWebSocket.onclose = function(evt) { \n        alert(\"Connection closed.\"); \n    };\n\n向服务端发送信息，只需要简单的`send`并提供你希望传递的内容。发送信息后，`close`终止连接。如下所示：\n    \n    myWebSocket.send(\"Hello WebSockets!\");\n    myWebSocket.close();\n\n## socketJS\n我们都知道，webscoket是HTML5的新玩意，那么兼容性方面，如下图所示：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0814_1.png)\n\n可以看出IE8以及Android 4.3是不支持的。这个时候，我们就可以来看看`socketJS`的优势了。\n\n> SockJS is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server.\n`socketJS`的一大好处在于**提供了浏览器兼容性**。优先使用原生`websocket`，如果在不支持`websocket`的浏览器中，会自动降为轮询的方式。\n除此之外，`spring`也对`socketJS`提供了支持。如果代码中添加了`withSockJS()`如下，服务器也会自动降级为轮询。\n\n    registry.addEndpoint(\"/coordination\").withSockJS();  \n\n## 如何使用socketJS\n\n    <script src=\"//cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\"></script>\n\n    var sock = new SockJS('/coordination');  \n    sock.onopen = function() {\n        console.log('open');\n    };\n    sock.onmessage = function(e) {\n        console.log('message', e.data);\n    };\n    sock.onclose = function() {\n        console.log('close');\n    };\n    sock.send('test');\n    sock.close();\n\n更多内容，可查看github地址：https://github.com/sockjs/sockjs-client\n\n## 什么是Stomp\n通过以上部分我们可以知道`websocket`的优势，兼容性的问题`socketJS`也帮我们解决了。不过这个时候，我还要安利一个好东西，也就是`Stomp`。\n\n> STOMP is a simple text-orientated messaging protocol. It defines an interoperable wire format so that any of the available STOMP clients can communicate with any STOMP message broker to provide easy and widespread messaging interoperability among languages and platforms (the STOMP web site has a list of STOMP client and server implementations.\n\n具体内容，可查看官网：http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~\n\n参考资料：\n 1. [Spring WebSocket教程（一）][1]\n 2. [WebSocket详解（一）：初步认识WebSocket技术][2]\n 3. [STOMP Over WebSocket][3]\n 4. [sockjs/sockjs-client][4]\n 5. [Spring websocket 使用][5]\n 6. [Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE][6]\n 7. [websocket官网About HTML5 WebSocket][7]\n\n\n  [1]: http://blog.csdn.net/xjyzxx/article/details/24182677\n  [2]: http://www.52im.net/forum.php?mod=viewthread&tid=331&ctid=15\n  [3]: http://jmesnil.net/stomp-websocket/doc/\n  [4]: https://github.com/sockjs/sockjs-client\n  [5]: http://blog.csdn.net/yxb19870428vv/article/details/41495543\n  [6]: http://www.tuicool.com/articles/uINBfiZ\n  [7]: http://www.websocket.org/aboutwebsocket.html","source":"_posts/websocket-notes.md","raw":"---\ntitle: websocket资料总结\ndate: 2016-08-14 19:29:43\ncategories: 前端开发\ntags: [websocket, html5, javascript]\n---\n## 前言\n之前的项目中使用了`websocket`、`socketJS`，趁此机会将一些知识点及资料进行整理总结。正所谓温故而知新~\n\n## websocket是什么\n按照惯例，在使用之前，先了解一下概念。\n> `websocket`是在`html5`中提供了一种浏览器和服务器间进行**全双工**通讯的网络技术。\n\n浏览器向服务端发送一个请求，通过报文头部`Upgrade`来表明需要从`HTTP`切换至`Websocket`协议。\n\n    GET ws://echo.websocket.org/?encoding=text HTTP/1.1\n    Origin: http://websocket.org\n    Cookie: __utma=99as\n    Connection: Upgrade\n    Host: echo.websocket.org\n    Sec-WebSocket-Key: uRovscZjNol/umbTt5uKmw==\n    Upgrade: websocket\n    Sec-WebSocket-Version: 13\n\n如果服务端理解websocket协议，它也是通过报文`Upgrade`从HTTP转换为Websocket协议。\n\n    HTTP/1.1 101 WebSocket Protocol Handshake\n    Date: Fri, 10 Feb 2012 17:38:18 GMT\n    Connection: Upgrade\n    Server: Kaazing Gateway\n    Upgrade: WebSocket\n    Access-Control-Allow-Origin: http://websocket.org\n    Access-Control-Allow-Credentials: true\n    Sec-WebSocket-Accept: rLHCkw/SKsO9GAH/ZSFhBATDKrU=\n    Access-Control-Allow-Headers: content-type\n\n这个时候就建立起了websocket连接，基于TCP/IP。使用端口与HTTP(80)和HTTPS(443)一样。\n    \n## 为什么要用websocket？\n知道了什么是websocket，那么为什么要使用websocket呢？除了websocket之外，浏览器进行即时通信的方式还有以下几种：\n\n* 定期查询\n每隔一个时间段就向服务器发送一个请求，请求服务器的最新数据再进行更新。但这样做的后果就是浪费大量流量，对服务端造成了巨大压力。\n\n* Comet\n基于http长连接的“服务器推”技术。客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。有两种形式：\n    * 基于`Ajax`的长轮询（long-polling）方式\n    浏览器发出XMLHttpRequest请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。\n    * 基于`Iframe`及`htmlfile`的流（http streaming）方式\n    通常的做法是在页面中嵌入一个隐藏的iframe,然后让这个iframe的src属性指向我们请求的一个服务端地址，并且为了数据更新，我们将页面上数据更新操作封装为一个js函数，将函数名当做参数传递到这个地址当中。服务端收到请求后解析地址取出参数（客户端js函数调用名），每当有数据更新的时候，返回对客户端函数的调用，并且将要跟新的数据以js函数的参数填入到返回内容当中，例如返回“<script type=\"text/javascript\">update(\"data\")</script>”这样一个字符串，意味着以data为参数调用客户端update函数进行客户端view更新。\n当应用程序有高吞吐量的需求，Comet的长轮询就不适合了。\n\n* SSE\nSSE(服务端推送事件)是一种允许服务端向客户端推送新数据的HTML5技术。与websocket相比，WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。\n\n相比于间断的轮询或长轮询来模拟全双工连接的解决方式，Websocket极大的减少了不必要的网络流量和延迟。除此之外，Websocket-based的应用减轻了服务器的负担，让现有的机器能支持更多的并发连接。如下图所示：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0814_2.png)\n\n\n## 如何使用websocket\n【以下例子来源于http://www.websocket.org/aboutwebsocket.html】\n只需要创建一个新的Websocket实例，提供一个URL，这个URL表示的是你希望连接的那个end-point。如下所示。\n需要注意的是: `ws://`和`wss://`的前缀表示了Websokcet和安全协议的Websocket连接。\n    \n    var myWebsocket = new Websocket(\"ws://www.websocket.org\");\n\n在连接到一个端点发送消息之前，你可以将一系列的事件监听器来处理连接的生命周期的每个阶段。如下所示：\n\n    myWebSocket.onopen = function(evt) { \n        alert(\"Connection open ...\"); \n    };\n    myWebSocket.onmessage = function(evt) { \n        alert( \"Received Message: \" + evt.data); \n    };\n    myWebSocket.onclose = function(evt) { \n        alert(\"Connection closed.\"); \n    };\n\n向服务端发送信息，只需要简单的`send`并提供你希望传递的内容。发送信息后，`close`终止连接。如下所示：\n    \n    myWebSocket.send(\"Hello WebSockets!\");\n    myWebSocket.close();\n\n## socketJS\n我们都知道，webscoket是HTML5的新玩意，那么兼容性方面，如下图所示：\n\n![clipboard.png](http://oao50r2ex.bkt.clouddn.com/image/blog0814_1.png)\n\n可以看出IE8以及Android 4.3是不支持的。这个时候，我们就可以来看看`socketJS`的优势了。\n\n> SockJS is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server.\n`socketJS`的一大好处在于**提供了浏览器兼容性**。优先使用原生`websocket`，如果在不支持`websocket`的浏览器中，会自动降为轮询的方式。\n除此之外，`spring`也对`socketJS`提供了支持。如果代码中添加了`withSockJS()`如下，服务器也会自动降级为轮询。\n\n    registry.addEndpoint(\"/coordination\").withSockJS();  \n\n## 如何使用socketJS\n\n    <script src=\"//cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js\"></script>\n\n    var sock = new SockJS('/coordination');  \n    sock.onopen = function() {\n        console.log('open');\n    };\n    sock.onmessage = function(e) {\n        console.log('message', e.data);\n    };\n    sock.onclose = function() {\n        console.log('close');\n    };\n    sock.send('test');\n    sock.close();\n\n更多内容，可查看github地址：https://github.com/sockjs/sockjs-client\n\n## 什么是Stomp\n通过以上部分我们可以知道`websocket`的优势，兼容性的问题`socketJS`也帮我们解决了。不过这个时候，我还要安利一个好东西，也就是`Stomp`。\n\n> STOMP is a simple text-orientated messaging protocol. It defines an interoperable wire format so that any of the available STOMP clients can communicate with any STOMP message broker to provide easy and widespread messaging interoperability among languages and platforms (the STOMP web site has a list of STOMP client and server implementations.\n\n具体内容，可查看官网：http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~\n\n参考资料：\n 1. [Spring WebSocket教程（一）][1]\n 2. [WebSocket详解（一）：初步认识WebSocket技术][2]\n 3. [STOMP Over WebSocket][3]\n 4. [sockjs/sockjs-client][4]\n 5. [Spring websocket 使用][5]\n 6. [Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE][6]\n 7. [websocket官网About HTML5 WebSocket][7]\n\n\n  [1]: http://blog.csdn.net/xjyzxx/article/details/24182677\n  [2]: http://www.52im.net/forum.php?mod=viewthread&tid=331&ctid=15\n  [3]: http://jmesnil.net/stomp-websocket/doc/\n  [4]: https://github.com/sockjs/sockjs-client\n  [5]: http://blog.csdn.net/yxb19870428vv/article/details/41495543\n  [6]: http://www.tuicool.com/articles/uINBfiZ\n  [7]: http://www.websocket.org/aboutwebsocket.html","slug":"websocket-notes","published":1,"updated":"2017-11-20T14:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb0w5kk00011y3qwcxphynhq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前的项目中使用了<code>websocket</code>、<code>socketJS</code>，趁此机会将一些知识点及资料进行整理总结。正所谓温故而知新~</p>\n<h2 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h2><p>按照惯例，在使用之前，先了解一下概念。</p>\n<blockquote>\n<p><code>websocket</code>是在<code>html5</code>中提供了一种浏览器和服务器间进行<strong>全双工</strong>通讯的网络技术。</p>\n</blockquote>\n<p>浏览器向服务端发送一个请求，通过报文头部<code>Upgrade</code>来表明需要从<code>HTTP</code>切换至<code>Websocket</code>协议。</p>\n<pre><code>GET ws://echo.websocket.org/?encoding=text HTTP/1.1\nOrigin: http://websocket.org\nCookie: __utma=99as\nConnection: Upgrade\nHost: echo.websocket.org\nSec-WebSocket-Key: uRovscZjNol/umbTt5uKmw==\nUpgrade: websocket\nSec-WebSocket-Version: 13\n</code></pre><p>如果服务端理解websocket协议，它也是通过报文<code>Upgrade</code>从HTTP转换为Websocket协议。</p>\n<pre><code>HTTP/1.1 101 WebSocket Protocol Handshake\nDate: Fri, 10 Feb 2012 17:38:18 GMT\nConnection: Upgrade\nServer: Kaazing Gateway\nUpgrade: WebSocket\nAccess-Control-Allow-Origin: http://websocket.org\nAccess-Control-Allow-Credentials: true\nSec-WebSocket-Accept: rLHCkw/SKsO9GAH/ZSFhBATDKrU=\nAccess-Control-Allow-Headers: content-type\n</code></pre><p>这个时候就建立起了websocket连接，基于TCP/IP。使用端口与HTTP(80)和HTTPS(443)一样。</p>\n<h2 id=\"为什么要用websocket？\"><a href=\"#为什么要用websocket？\" class=\"headerlink\" title=\"为什么要用websocket？\"></a>为什么要用websocket？</h2><p>知道了什么是websocket，那么为什么要使用websocket呢？除了websocket之外，浏览器进行即时通信的方式还有以下几种：</p>\n<ul>\n<li><p>定期查询<br>每隔一个时间段就向服务器发送一个请求，请求服务器的最新数据再进行更新。但这样做的后果就是浪费大量流量，对服务端造成了巨大压力。</p>\n</li>\n<li><p>Comet<br>基于http长连接的“服务器推”技术。客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。有两种形式：</p>\n<ul>\n<li>基于<code>Ajax</code>的长轮询（long-polling）方式<br>浏览器发出XMLHttpRequest请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。</li>\n<li>基于<code>Iframe</code>及<code>htmlfile</code>的流（http streaming）方式<br>通常的做法是在页面中嵌入一个隐藏的iframe,然后让这个iframe的src属性指向我们请求的一个服务端地址，并且为了数据更新，我们将页面上数据更新操作封装为一个js函数，将函数名当做参数传递到这个地址当中。服务端收到请求后解析地址取出参数（客户端js函数调用名），每当有数据更新的时候，返回对客户端函数的调用，并且将要跟新的数据以js函数的参数填入到返回内容当中，例如返回“<script type=\"text/javascript\">update(“data”)</script>”这样一个字符串，意味着以data为参数调用客户端update函数进行客户端view更新。<br>当应用程序有高吞吐量的需求，Comet的长轮询就不适合了。</li>\n</ul>\n</li>\n<li><p>SSE<br>SSE(服务端推送事件)是一种允许服务端向客户端推送新数据的HTML5技术。与websocket相比，WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。</p>\n</li>\n</ul>\n<p>相比于间断的轮询或长轮询来模拟全双工连接的解决方式，Websocket极大的减少了不必要的网络流量和延迟。除此之外，Websocket-based的应用减轻了服务器的负担，让现有的机器能支持更多的并发连接。如下图所示：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0814_2.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"如何使用websocket\"><a href=\"#如何使用websocket\" class=\"headerlink\" title=\"如何使用websocket\"></a>如何使用websocket</h2><p>【以下例子来源于<a href=\"http://www.websocket.org/aboutwebsocket.html】\" target=\"_blank\" rel=\"external\">http://www.websocket.org/aboutwebsocket.html】</a><br>只需要创建一个新的Websocket实例，提供一个URL，这个URL表示的是你希望连接的那个end-point。如下所示。<br>需要注意的是: <code>ws://</code>和<code>wss://</code>的前缀表示了Websokcet和安全协议的Websocket连接。</p>\n<pre><code>var myWebsocket = new Websocket(&quot;ws://www.websocket.org&quot;);\n</code></pre><p>在连接到一个端点发送消息之前，你可以将一系列的事件监听器来处理连接的生命周期的每个阶段。如下所示：</p>\n<pre><code>myWebSocket.onopen = function(evt) { \n    alert(&quot;Connection open ...&quot;); \n};\nmyWebSocket.onmessage = function(evt) { \n    alert( &quot;Received Message: &quot; + evt.data); \n};\nmyWebSocket.onclose = function(evt) { \n    alert(&quot;Connection closed.&quot;); \n};\n</code></pre><p>向服务端发送信息，只需要简单的<code>send</code>并提供你希望传递的内容。发送信息后，<code>close</code>终止连接。如下所示：</p>\n<pre><code>myWebSocket.send(&quot;Hello WebSockets!&quot;);\nmyWebSocket.close();\n</code></pre><h2 id=\"socketJS\"><a href=\"#socketJS\" class=\"headerlink\" title=\"socketJS\"></a>socketJS</h2><p>我们都知道，webscoket是HTML5的新玩意，那么兼容性方面，如下图所示：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0814_1.png\" alt=\"clipboard.png\"></p>\n<p>可以看出IE8以及Android 4.3是不支持的。这个时候，我们就可以来看看<code>socketJS</code>的优势了。</p>\n<blockquote>\n<p>SockJS is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server.<br><code>socketJS</code>的一大好处在于<strong>提供了浏览器兼容性</strong>。优先使用原生<code>websocket</code>，如果在不支持<code>websocket</code>的浏览器中，会自动降为轮询的方式。<br>除此之外，<code>spring</code>也对<code>socketJS</code>提供了支持。如果代码中添加了<code>withSockJS()</code>如下，服务器也会自动降级为轮询。</p>\n</blockquote>\n<pre><code>registry.addEndpoint(&quot;/coordination&quot;).withSockJS();  \n</code></pre><h2 id=\"如何使用socketJS\"><a href=\"#如何使用socketJS\" class=\"headerlink\" title=\"如何使用socketJS\"></a>如何使用socketJS</h2><pre><code>&lt;script src=&quot;//cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js&quot;&gt;&lt;/script&gt;\n\nvar sock = new SockJS(&apos;/coordination&apos;);  \nsock.onopen = function() {\n    console.log(&apos;open&apos;);\n};\nsock.onmessage = function(e) {\n    console.log(&apos;message&apos;, e.data);\n};\nsock.onclose = function() {\n    console.log(&apos;close&apos;);\n};\nsock.send(&apos;test&apos;);\nsock.close();\n</code></pre><p>更多内容，可查看github地址：<a href=\"https://github.com/sockjs/sockjs-client\" target=\"_blank\" rel=\"external\">https://github.com/sockjs/sockjs-client</a></p>\n<h2 id=\"什么是Stomp\"><a href=\"#什么是Stomp\" class=\"headerlink\" title=\"什么是Stomp\"></a>什么是Stomp</h2><p>通过以上部分我们可以知道<code>websocket</code>的优势，兼容性的问题<code>socketJS</code>也帮我们解决了。不过这个时候，我还要安利一个好东西，也就是<code>Stomp</code>。</p>\n<blockquote>\n<p>STOMP is a simple text-orientated messaging protocol. It defines an interoperable wire format so that any of the available STOMP clients can communicate with any STOMP message broker to provide easy and widespread messaging interoperability among languages and platforms (the STOMP web site has a list of STOMP client and server implementations.</p>\n</blockquote>\n<p>具体内容，可查看官网：<a href=\"http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~\" target=\"_blank\" rel=\"external\">http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~</a></p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/xjyzxx/article/details/24182677\" target=\"_blank\" rel=\"external\">Spring WebSocket教程（一）</a></li>\n<li><a href=\"http://www.52im.net/forum.php?mod=viewthread&amp;tid=331&amp;ctid=15\" target=\"_blank\" rel=\"external\">WebSocket详解（一）：初步认识WebSocket技术</a></li>\n<li><a href=\"http://jmesnil.net/stomp-websocket/doc/\" target=\"_blank\" rel=\"external\">STOMP Over WebSocket</a></li>\n<li><a href=\"https://github.com/sockjs/sockjs-client\" target=\"_blank\" rel=\"external\">sockjs/sockjs-client</a></li>\n<li><a href=\"http://blog.csdn.net/yxb19870428vv/article/details/41495543\" target=\"_blank\" rel=\"external\">Spring websocket 使用</a></li>\n<li><a href=\"http://www.tuicool.com/articles/uINBfiZ\" target=\"_blank\" rel=\"external\">Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE</a></li>\n<li><a href=\"http://www.websocket.org/aboutwebsocket.html\" target=\"_blank\" rel=\"external\">websocket官网About HTML5 WebSocket</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前的项目中使用了<code>websocket</code>、<code>socketJS</code>，趁此机会将一些知识点及资料进行整理总结。正所谓温故而知新~</p>\n<h2 id=\"websocket是什么\"><a href=\"#websocket是什么\" class=\"headerlink\" title=\"websocket是什么\"></a>websocket是什么</h2><p>按照惯例，在使用之前，先了解一下概念。</p>\n<blockquote>\n<p><code>websocket</code>是在<code>html5</code>中提供了一种浏览器和服务器间进行<strong>全双工</strong>通讯的网络技术。</p>\n</blockquote>\n<p>浏览器向服务端发送一个请求，通过报文头部<code>Upgrade</code>来表明需要从<code>HTTP</code>切换至<code>Websocket</code>协议。</p>\n<pre><code>GET ws://echo.websocket.org/?encoding=text HTTP/1.1\nOrigin: http://websocket.org\nCookie: __utma=99as\nConnection: Upgrade\nHost: echo.websocket.org\nSec-WebSocket-Key: uRovscZjNol/umbTt5uKmw==\nUpgrade: websocket\nSec-WebSocket-Version: 13\n</code></pre><p>如果服务端理解websocket协议，它也是通过报文<code>Upgrade</code>从HTTP转换为Websocket协议。</p>\n<pre><code>HTTP/1.1 101 WebSocket Protocol Handshake\nDate: Fri, 10 Feb 2012 17:38:18 GMT\nConnection: Upgrade\nServer: Kaazing Gateway\nUpgrade: WebSocket\nAccess-Control-Allow-Origin: http://websocket.org\nAccess-Control-Allow-Credentials: true\nSec-WebSocket-Accept: rLHCkw/SKsO9GAH/ZSFhBATDKrU=\nAccess-Control-Allow-Headers: content-type\n</code></pre><p>这个时候就建立起了websocket连接，基于TCP/IP。使用端口与HTTP(80)和HTTPS(443)一样。</p>\n<h2 id=\"为什么要用websocket？\"><a href=\"#为什么要用websocket？\" class=\"headerlink\" title=\"为什么要用websocket？\"></a>为什么要用websocket？</h2><p>知道了什么是websocket，那么为什么要使用websocket呢？除了websocket之外，浏览器进行即时通信的方式还有以下几种：</p>\n<ul>\n<li><p>定期查询<br>每隔一个时间段就向服务器发送一个请求，请求服务器的最新数据再进行更新。但这样做的后果就是浪费大量流量，对服务端造成了巨大压力。</p>\n</li>\n<li><p>Comet<br>基于http长连接的“服务器推”技术。客户端与服务器端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端。有两种形式：</p>\n<ul>\n<li>基于<code>Ajax</code>的长轮询（long-polling）方式<br>浏览器发出XMLHttpRequest请求，服务器端接收到请求后，会阻塞请求直到有数据或者超时才返回，浏览器在处理请求返回信息（超时或有效数据）后再次发出请求，重新建立连接。在此期间服务器端可能已经有新的数据到达，服务器会选择把数据保存，直到重新建立连接，浏览器会把所有数据一次性取回。</li>\n<li>基于<code>Iframe</code>及<code>htmlfile</code>的流（http streaming）方式<br>通常的做法是在页面中嵌入一个隐藏的iframe,然后让这个iframe的src属性指向我们请求的一个服务端地址，并且为了数据更新，我们将页面上数据更新操作封装为一个js函数，将函数名当做参数传递到这个地址当中。服务端收到请求后解析地址取出参数（客户端js函数调用名），每当有数据更新的时候，返回对客户端函数的调用，并且将要跟新的数据以js函数的参数填入到返回内容当中，例如返回“<script type=\"text/javascript\">update(“data”)</script>”这样一个字符串，意味着以data为参数调用客户端update函数进行客户端view更新。<br>当应用程序有高吞吐量的需求，Comet的长轮询就不适合了。</li>\n</ul>\n</li>\n<li><p>SSE<br>SSE(服务端推送事件)是一种允许服务端向客户端推送新数据的HTML5技术。与websocket相比，WebSocket相较SSE最大的优势在于它是双向交流的，这意味向服务端发送数据就像从服务端接收数据一样简单。用SSE时，一般通过一个独立的Ajax请求从客户端向服务端传送数据。相对于WebSocket，这样使用Ajax会增加开销，但也就多一点点而已。</p>\n</li>\n</ul>\n<p>相比于间断的轮询或长轮询来模拟全双工连接的解决方式，Websocket极大的减少了不必要的网络流量和延迟。除此之外，Websocket-based的应用减轻了服务器的负担，让现有的机器能支持更多的并发连接。如下图所示：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0814_2.png\" alt=\"clipboard.png\"></p>\n<h2 id=\"如何使用websocket\"><a href=\"#如何使用websocket\" class=\"headerlink\" title=\"如何使用websocket\"></a>如何使用websocket</h2><p>【以下例子来源于<a href=\"http://www.websocket.org/aboutwebsocket.html】\">http://www.websocket.org/aboutwebsocket.html】</a><br>只需要创建一个新的Websocket实例，提供一个URL，这个URL表示的是你希望连接的那个end-point。如下所示。<br>需要注意的是: <code>ws://</code>和<code>wss://</code>的前缀表示了Websokcet和安全协议的Websocket连接。</p>\n<pre><code>var myWebsocket = new Websocket(&quot;ws://www.websocket.org&quot;);\n</code></pre><p>在连接到一个端点发送消息之前，你可以将一系列的事件监听器来处理连接的生命周期的每个阶段。如下所示：</p>\n<pre><code>myWebSocket.onopen = function(evt) { \n    alert(&quot;Connection open ...&quot;); \n};\nmyWebSocket.onmessage = function(evt) { \n    alert( &quot;Received Message: &quot; + evt.data); \n};\nmyWebSocket.onclose = function(evt) { \n    alert(&quot;Connection closed.&quot;); \n};\n</code></pre><p>向服务端发送信息，只需要简单的<code>send</code>并提供你希望传递的内容。发送信息后，<code>close</code>终止连接。如下所示：</p>\n<pre><code>myWebSocket.send(&quot;Hello WebSockets!&quot;);\nmyWebSocket.close();\n</code></pre><h2 id=\"socketJS\"><a href=\"#socketJS\" class=\"headerlink\" title=\"socketJS\"></a>socketJS</h2><p>我们都知道，webscoket是HTML5的新玩意，那么兼容性方面，如下图所示：</p>\n<p><img src=\"http://oao50r2ex.bkt.clouddn.com/image/blog0814_1.png\" alt=\"clipboard.png\"></p>\n<p>可以看出IE8以及Android 4.3是不支持的。这个时候，我们就可以来看看<code>socketJS</code>的优势了。</p>\n<blockquote>\n<p>SockJS is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server.<br><code>socketJS</code>的一大好处在于<strong>提供了浏览器兼容性</strong>。优先使用原生<code>websocket</code>，如果在不支持<code>websocket</code>的浏览器中，会自动降为轮询的方式。<br>除此之外，<code>spring</code>也对<code>socketJS</code>提供了支持。如果代码中添加了<code>withSockJS()</code>如下，服务器也会自动降级为轮询。</p>\n</blockquote>\n<pre><code>registry.addEndpoint(&quot;/coordination&quot;).withSockJS();  \n</code></pre><h2 id=\"如何使用socketJS\"><a href=\"#如何使用socketJS\" class=\"headerlink\" title=\"如何使用socketJS\"></a>如何使用socketJS</h2><pre><code>&lt;script src=&quot;//cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js&quot;&gt;&lt;/script&gt;\n\nvar sock = new SockJS(&apos;/coordination&apos;);  \nsock.onopen = function() {\n    console.log(&apos;open&apos;);\n};\nsock.onmessage = function(e) {\n    console.log(&apos;message&apos;, e.data);\n};\nsock.onclose = function() {\n    console.log(&apos;close&apos;);\n};\nsock.send(&apos;test&apos;);\nsock.close();\n</code></pre><p>更多内容，可查看github地址：<a href=\"https://github.com/sockjs/sockjs-client\">https://github.com/sockjs/sockjs-client</a></p>\n<h2 id=\"什么是Stomp\"><a href=\"#什么是Stomp\" class=\"headerlink\" title=\"什么是Stomp\"></a>什么是Stomp</h2><p>通过以上部分我们可以知道<code>websocket</code>的优势，兼容性的问题<code>socketJS</code>也帮我们解决了。不过这个时候，我还要安利一个好东西，也就是<code>Stomp</code>。</p>\n<blockquote>\n<p>STOMP is a simple text-orientated messaging protocol. It defines an interoperable wire format so that any of the available STOMP clients can communicate with any STOMP message broker to provide easy and widespread messaging interoperability among languages and platforms (the STOMP web site has a list of STOMP client and server implementations.</p>\n</blockquote>\n<p>具体内容，可查看官网：<a href=\"http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~\">http://jmesnil.net/stomp-websocket/doc/。或者等我下一篇文章详谈吧~</a></p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/xjyzxx/article/details/24182677\">Spring WebSocket教程（一）</a></li>\n<li><a href=\"http://www.52im.net/forum.php?mod=viewthread&amp;tid=331&amp;ctid=15\">WebSocket详解（一）：初步认识WebSocket技术</a></li>\n<li><a href=\"http://jmesnil.net/stomp-websocket/doc/\">STOMP Over WebSocket</a></li>\n<li><a href=\"https://github.com/sockjs/sockjs-client\">sockjs/sockjs-client</a></li>\n<li><a href=\"http://blog.csdn.net/yxb19870428vv/article/details/41495543\">Spring websocket 使用</a></li>\n<li><a href=\"http://www.tuicool.com/articles/uINBfiZ\">Web端即时通讯技术盘点：短轮询、Comet、Websocket、SSE</a></li>\n<li><a href=\"http://www.websocket.org/aboutwebsocket.html\">websocket官网About HTML5 WebSocket</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjb0w5kir0000y3qwn8oipobh","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kjg000fy3qwyb3l3n8m"},{"post_id":"cjb0w5kix0002y3qwllq28bvq","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kjn000ly3qwzzclsfht"},{"post_id":"cjb0w5kj30006y3qwijdqphiq","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kjr000ry3qwvgs11fpv"},{"post_id":"cjb0w5kjq000qy3qwl7j34pkj","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kjw000wy3qwa0xga4wk"},{"post_id":"cjb0w5kjs000sy3qw2tuwadel","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kjz0010y3qwi6fud3ia"},{"post_id":"cjb0w5kjx000xy3qwm0fqqy38","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kk30013y3qw5d3p83zb"},{"post_id":"cjb0w5kk00011y3qwcxphynhq","category_id":"cjb0w5kj30005y3qwvt1zf0wz","_id":"cjb0w5kk50016y3qwj8xetn32"},{"post_id":"cjb0w5kj60008y3qwq0l9x4v2","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkd001ky3qwzc1kqzwj"},{"post_id":"cjb0w5kj60008y3qwq0l9x4v2","category_id":"cjb0w5kka001fy3qwdn9ydy93","_id":"cjb0w5kke001ny3qw62n38yl9"},{"post_id":"cjb0w5kjv000vy3qw11qzxi6u","category_id":"cjb0w5kkc001iy3qwkej9mj1f","_id":"cjb0w5kkf001qy3qwcaqss7hx"},{"post_id":"cjb0w5kj9000by3qwov23f0rf","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkh001uy3qwacq6mae1"},{"post_id":"cjb0w5kj9000by3qwov23f0rf","category_id":"cjb0w5kka001fy3qwdn9ydy93","_id":"cjb0w5kki001xy3qw0hw3pgu6"},{"post_id":"cjb0w5kje000ey3qw9dlecta7","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkj001zy3qwlp3v4j0z"},{"post_id":"cjb0w5kje000ey3qw9dlecta7","category_id":"cjb0w5kka001fy3qwdn9ydy93","_id":"cjb0w5kkk0021y3qwtekotot1"},{"post_id":"cjb0w5kjg000gy3qwztmccmy8","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkl0024y3qwtq3jvjqo"},{"post_id":"cjb0w5kjg000gy3qwztmccmy8","category_id":"cjb0w5kka001fy3qwdn9ydy93","_id":"cjb0w5kkl0027y3qwhcucm9dd"},{"post_id":"cjb0w5kjl000ky3qwlsgyou15","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kkm0029y3qwrkm8bl6l"},{"post_id":"cjb0w5kjl000ky3qwlsgyou15","category_id":"cjb0w5kka001fy3qwdn9ydy93","_id":"cjb0w5kkn002ay3qwktyh1t1c"},{"post_id":"cjb0w5kjn000ny3qw1znlt27y","category_id":"cjb0w5kjo000oy3qwedesb8q5","_id":"cjb0w5kko002dy3qws4vpysns"},{"post_id":"cjb0w5kjn000ny3qw1znlt27y","category_id":"cjb0w5kkl0025y3qwww6i102r","_id":"cjb0w5kko002gy3qw6w145x8b"}],"PostTag":[{"post_id":"cjb0w5kir0000y3qwn8oipobh","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kjl000jy3qwv7vevimv"},{"post_id":"cjb0w5kir0000y3qwn8oipobh","tag_id":"cjb0w5kj9000ay3qwyv178b9m","_id":"cjb0w5kjn000my3qw4x135fz7"},{"post_id":"cjb0w5kix0002y3qwllq28bvq","tag_id":"cjb0w5kji000iy3qwg4wdxgqx","_id":"cjb0w5kk40015y3qw9ypgaag0"},{"post_id":"cjb0w5kix0002y3qwllq28bvq","tag_id":"cjb0w5kjp000py3qwpsezyngz","_id":"cjb0w5kk60018y3qw2gsxej06"},{"post_id":"cjb0w5kix0002y3qwllq28bvq","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kk7001ay3qw0zbvth9c"},{"post_id":"cjb0w5kix0002y3qwllq28bvq","tag_id":"cjb0w5kjz000zy3qwum3zjvt7","_id":"cjb0w5kk8001cy3qw32rsvba9"},{"post_id":"cjb0w5kj30006y3qwijdqphiq","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kk9001ey3qwo4izzudx"},{"post_id":"cjb0w5kj30006y3qwijdqphiq","tag_id":"cjb0w5kk60019y3qwl99l2nfg","_id":"cjb0w5kkb001gy3qwnuu1mobg"},{"post_id":"cjb0w5kj60008y3qwq0l9x4v2","tag_id":"cjb0w5kk8001dy3qwo0wpo9ff","_id":"cjb0w5kkd001ly3qw1tdu9b42"},{"post_id":"cjb0w5kj60008y3qwq0l9x4v2","tag_id":"cjb0w5kkb001hy3qwela59yz7","_id":"cjb0w5kke001oy3qw8lzucfh9"},{"post_id":"cjb0w5kj9000by3qwov23f0rf","tag_id":"cjb0w5kk8001dy3qwo0wpo9ff","_id":"cjb0w5kkh001ty3qw51ng4ubh"},{"post_id":"cjb0w5kj9000by3qwov23f0rf","tag_id":"cjb0w5kkb001hy3qwela59yz7","_id":"cjb0w5kki001wy3qwg5fpe3uy"},{"post_id":"cjb0w5kje000ey3qw9dlecta7","tag_id":"cjb0w5kk8001dy3qwo0wpo9ff","_id":"cjb0w5kkk0023y3qwrygml4ah"},{"post_id":"cjb0w5kje000ey3qw9dlecta7","tag_id":"cjb0w5kkb001hy3qwela59yz7","_id":"cjb0w5kkl0026y3qwy8k4uf8i"},{"post_id":"cjb0w5kjg000gy3qwztmccmy8","tag_id":"cjb0w5kk8001dy3qwo0wpo9ff","_id":"cjb0w5kko002cy3qw5cpefpmj"},{"post_id":"cjb0w5kjg000gy3qwztmccmy8","tag_id":"cjb0w5kkb001hy3qwela59yz7","_id":"cjb0w5kko002ey3qwuvvlz45g"},{"post_id":"cjb0w5kjl000ky3qwlsgyou15","tag_id":"cjb0w5kk8001dy3qwo0wpo9ff","_id":"cjb0w5kkq002iy3qw2ojfu9s7"},{"post_id":"cjb0w5kjl000ky3qwlsgyou15","tag_id":"cjb0w5kkb001hy3qwela59yz7","_id":"cjb0w5kkq002jy3qwdo5v94zf"},{"post_id":"cjb0w5kjn000ny3qw1znlt27y","tag_id":"cjb0w5kkp002hy3qwkk2z7001","_id":"cjb0w5kkr002my3qwi6jd2nl1"},{"post_id":"cjb0w5kjn000ny3qw1znlt27y","tag_id":"cjb0w5kkq002ky3qwa7pyzbxu","_id":"cjb0w5kkr002ny3qwxedr6e0h"},{"post_id":"cjb0w5kjq000qy3qwl7j34pkj","tag_id":"cjb0w5kjz000zy3qwum3zjvt7","_id":"cjb0w5kkt002qy3qwho73565h"},{"post_id":"cjb0w5kjq000qy3qwl7j34pkj","tag_id":"cjb0w5kks002oy3qwu79z7f83","_id":"cjb0w5kkt002ry3qwwsqtobpf"},{"post_id":"cjb0w5kjq000qy3qwl7j34pkj","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kkt002ty3qwog0hh47b"},{"post_id":"cjb0w5kjs000sy3qw2tuwadel","tag_id":"cjb0w5kks002py3qw6nnfgqsy","_id":"cjb0w5kku002vy3qw7ee3fyc2"},{"post_id":"cjb0w5kjs000sy3qw2tuwadel","tag_id":"cjb0w5kkt002sy3qwhpztn7cr","_id":"cjb0w5kku002wy3qwq7j9srje"},{"post_id":"cjb0w5kjs000sy3qw2tuwadel","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kkv002yy3qwjvix25c2"},{"post_id":"cjb0w5kjv000vy3qw11qzxi6u","tag_id":"cjb0w5kku002uy3qwbsfxqb2d","_id":"cjb0w5kkv002zy3qw3t70gu4k"},{"post_id":"cjb0w5kjx000xy3qwm0fqqy38","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kkx0033y3qwndzgayt3"},{"post_id":"cjb0w5kjx000xy3qwm0fqqy38","tag_id":"cjb0w5kku002xy3qwdgsrxx2s","_id":"cjb0w5kkx0034y3qwlwrhrfkd"},{"post_id":"cjb0w5kjx000xy3qwm0fqqy38","tag_id":"cjb0w5kkv0030y3qw1cktbm9u","_id":"cjb0w5kkx0035y3qwaubr6wbe"},{"post_id":"cjb0w5kjx000xy3qwm0fqqy38","tag_id":"cjb0w5kkw0031y3qwgzn3ykqy","_id":"cjb0w5kkx0036y3qw1q4qjcaj"},{"post_id":"cjb0w5kk00011y3qwcxphynhq","tag_id":"cjb0w5kjp000py3qwpsezyngz","_id":"cjb0w5kky0037y3qwdup20r1t"},{"post_id":"cjb0w5kk00011y3qwcxphynhq","tag_id":"cjb0w5kjz000zy3qwum3zjvt7","_id":"cjb0w5kky0038y3qw1mlw3l1z"},{"post_id":"cjb0w5kk00011y3qwcxphynhq","tag_id":"cjb0w5kj10004y3qw5sh55wa6","_id":"cjb0w5kky0039y3qwng3dyhbr"}],"Tag":[{"name":"javascript","_id":"cjb0w5kj10004y3qw5sh55wa6"},{"name":"正则表达式","_id":"cjb0w5kj9000ay3qwyv178b9m"},{"name":"Stomp","_id":"cjb0w5kji000iy3qwg4wdxgqx"},{"name":"websocket","_id":"cjb0w5kjp000py3qwpsezyngz"},{"name":"html5","_id":"cjb0w5kjz000zy3qwum3zjvt7"},{"name":"跨域","_id":"cjb0w5kk60019y3qwl99l2nfg"},{"name":"JAVA","_id":"cjb0w5kk8001dy3qwo0wpo9ff"},{"name":"Effective Java","_id":"cjb0w5kkb001hy3qwela59yz7"},{"name":"Linux","_id":"cjb0w5kkp002hy3qwkk2z7001"},{"name":"Unix","_id":"cjb0w5kkq002ky3qwa7pyzbxu"},{"name":"css","_id":"cjb0w5kks002oy3qwu79z7f83"},{"name":"es6","_id":"cjb0w5kks002py3qw6nnfgqsy"},{"name":"promise","_id":"cjb0w5kkt002sy3qwhpztn7cr"},{"name":"工作日记","_id":"cjb0w5kku002uy3qwbsfxqb2d"},{"name":"jQuery","_id":"cjb0w5kku002xy3qwdgsrxx2s"},{"name":"jQuery插件","_id":"cjb0w5kkv0030y3qw1cktbm9u"},{"name":"summernote","_id":"cjb0w5kkw0031y3qwgzn3ykqy"}]}}